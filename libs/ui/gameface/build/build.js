/*! For license information please see build.js.LICENSE.txt */
(()=>{var e={868:(e,t,i)=>{var s,n;s=[i,t,i(7602),i(8606),i(851),i(518),i(5758),i(282),i(4597),i(4041),i(508),i(1959),i(7908),i(5255),i(581),i(7136),i(3840),i(9541),i(5773),i(8613),i(7801),i(3222),i(541),i(9970),i(3820),i(2202),i(214),i(5427),i(7798),i(7515),i(7303),i(8878),i(6771),i(4606),i(7947),i(475),i(9157),i(5198),i(7774),i(117),i(8558),i(7053),i(9490),i(1318),i(4389),i(943),i(9546),i(9633),i(2423),i(1353),i(6716),i(2584),i(4552),i(4560),i(9666),i(4884),i(588),i(3339),i(3640),i(2005),i(6574),i(2993),i(9198),i(6),i(177),i(4050),i(8398),i(8487),i(1769),i(347),i(9426),i(8780),i(5708),i(4034),i(9781),i(2712),i(8981),i(8071),i(9108),i(1135),i(5959),i(1185),i(2484),i(6262),i(8306),i(9142),i(5879),i(205),i(5452),i(2067),i(9814),i(7007),i(7135),i(484),i(7049),i(1822),i(9869),i(4413),i(6206),i(6721),i(2392),i(3706),i(7478),i(1971),i(2194),i(488),i(5918),i(169),i(7538),i(8315),i(7501),i(9830),i(7493),i(7232),i(7990),i(23),i(3634),i(5657),i(1835),i(1288),i(3954),i(5078),i(6635),i(8065),i(6843),i(9950),i(8206),i(5118),i(7818),i(3230),i(4054),i(5040),i(889),i(4673),i(7490),i(3395),i(5446),i(6732),i(9171),i(7630),i(8294),i(7880),i(2447),i(9662),i(6348),i(9533),i(5058),i(5121),i(2401),i(3191),i(8166),i(1e3),i(600),i(7554),i(4342),i(2475),i(5053),i(2687),i(106),i(2703),i(5260),i(8012),i(737),i(5993),i(4258),i(4917),i(758),i(8989),i(8047),i(35),i(9070),i(3603),i(9196),i(6323),i(9201),i(1357),i(2088),i(7579),i(7354),i(5011),i(4698),i(5906),i(2286),i(178),i(2080),i(6300),i(9384),i(1900),i(4534),i(5924),i(7368),i(9998),i(1861),i(6795),i(7760),i(8899),i(8875),i(4158),i(6586),i(8513),i(3468),i(7940),i(4507),i(2023),i(5380),i(769),i(4931),i(8801),i(5912),i(6778),i(373),i(7866),i(677),i(9322),i(5579),i(5249),i(8610),i(3949),i(8920),i(739),i(4130),i(4656),i(5980),i(7417),i(7194),i(8459),i(6497),i(1485),i(9096),i(4197),i(3676),i(4154),i(9356),i(3581),i(5423),i(9768),i(3102),i(5234),i(3824),i(278),i(5769),i(6213),i(7497),i(2099),i(5629),i(9762),i(3373),i(9436),i(3573),i(946),i(3041),i(6955),i(4890),i(8388),i(1139),i(4138),i(6399),i(8001),i(6695),i(4826),i(952),i(3548),i(831),i(3444),i(8957),i(6413),i(1573),i(8057)],n=function(e,t,i,s,n,a,o,r,l,h,d,c,u,p,m,g,_,f,v,y,b,w,x,C,M,I,T,P,E,k,L,A,S,D,R,N,B,O,F,V,$,H,W,z,U,j,X,G,q,Y,Z,K,J,Q,ee,te,ie,se,ne,ae,oe,re,le,he,de,ce,ue,pe,me,ge,_e,fe,ve,ye,be,we,xe,Ce,Me,Ie,Te,Pe,Ee,ke,Le,Ae,Se,De,Re,Ne,Be,Oe,Fe,Ve,$e,He,We,ze,Ue,je,Xe,Ge,qe,Ye,Ze,Ke,Je,Qe,et,tt,it,st,nt,at,ot,rt,lt,ht,dt,ct,ut,pt,mt,gt,_t,ft,vt,yt,bt,wt,xt,Ct,Mt,It,Tt,Pt,Et,kt,Lt,At,St,Dt,Rt,Nt,Bt,Ot,Ft,Vt,$t,Ht,Wt,zt,Ut,jt,Xt,Gt,qt,Yt,Zt,Kt,Jt,Qt,ei,ti,ii,si,ni,ai,oi,ri,li,hi,di,ci,ui,pi,mi,gi,_i,fi,vi,yi,bi,wi,xi,Ci,Mi,Ii,Ti,Pi,Ei,ki,Li,Ai,Si,Di,Ri,Ni,Bi,Oi,Fi,Vi,$i,Hi,Wi,zi,Ui,ji,Xi,Gi,qi,Yi,Zi,Ki,Ji,Qi,es,ts,is,ss,ns,as,os,rs,ls,hs,ds,cs,us,ps,ms,gs,_s,fs,vs,ys,bs,ws,xs,Cs,Ms,Is,Ts,Ps,Es,ks,Ls,As,Ss,Ds,Rs,Ns,Bs,Os,Fs,Vs,$s,Hs,Ws,zs,Us,js,Xs,Gs,qs,Ys,Zs,Ks){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.navigationClasses={CommonGrid:pe.CommonGrid,CommonList:de.CommonList,NavigationElement:re.NavigationElement,NavigationListContainer:he.NavigationListContainer,NavigationStackContainer:ce.NavigationStackContainer,NavigationGridContainer:ue.NavigationGridContainer,NavigationGroupContainer:Fs.NavigationGroupContainer,ButtonElement:zs.ButtonElement,SliderElement:Us.SliderElement,EditBoxElement:js.EditBoxElement,ItemsListContainer:me.ItemsListContainer,ItemsGridContainer:ge.ItemsGridContainer,NavigationRoot:le.NavigationRoot,FriendsPageNavigation:yi.FriendsPageNavigation,FriendsListNavigation:bi.FriendsListNavigation,ArmoryWeaponGridNavigation:Ce.ArmoryWeaponGridNavigation,TestNavigationList:Ns.TestNavigationList},t.controlClasses={RootControl:i.RootControl,Control:s.Control,Label:n.Label,EditBox:c.EditBox,ImageControl:u.ImageControl,VideoControl:m.VideoControl,Button:g.Button,ProgressBar:P.ProgressBar,ListBox:O.ListBox,ItemsGrid:z.ItemsGrid,ListItem:F.ListItem,GridItem:V.GridItem,SimpleList:U.SimpleList,SimpleListItem:j.SimpleListItem,PatternButtonComboBoxItem:Y.PatternButtonComboBoxItem,RelativeControl:qt.RelativeControl,DefaultButton:f.DefaultButton,DefaultProgressBar:E.DefaultProgressBar,DefaultSlider:D.DefaultSlider,DefaultScrollBar:B.DefaultScrollBar,FillingSlider:N.FillingSlider,Dropdown:$.Dropdown,KeyBind:H.KeyBind,SliderModelless:R.SliderModelless,AutoScrollingButton:_.AutoScrollingButton,AutoScrollingLabel:a.AutoScrollingLabel,ZeroPaddedLabel:o.ZeroPaddedLabel,NoTagsLabel:r.NoTagsLabel,DefaultTimer:l.DefaultTimer,ExpireTimer:h.ExpireTimer,MinutesTimer:d.MinutesTimer,Grid:W.Grid,ModalWindow:Z.ModalWindow,CurrencyPurchaseItem:K.CurrencyPurchaseItem,TestCurrencyPurchaseWindow:J.TestCurrencyPurchaseWindow,FlippableItem:p.FlippableItem,SelectableButton:v.SelectableButton,EmptySelectableButton:y.EmptySelectableButton,ButtonModelless:b.ButtonModelless,Toggle:C.Toggle,InfoButton:M.InfoButton,Hint:I.Hint,Mark:T.Mark,TintedProgressBar:L.TintedProgressBar,TintedProgressBarLabel:A.TintedProgressBarLabel,CircleProgressBar:S.CircleProgressBar,EntityHealthBar:k.EntityHealthBar,NavigationBar:Q.NavigationBar,NavigationBarItem:ee.NavigationBarItem,NavigationBarSelectPanel:te.NavigationBarSelectPanel,NavigationBarTiny:ie.NavigationBarTiny,MatchmakingInfoWidget:se.MatchmakingInfoWidget,PlayerInfoWidgetCurrencyLimit:ne.PlayerInfoWidgetCurrencyLimit,NonBlockingNotification:ae.NonBlockingNotification,NonBlockingNotificationsItem:oe.NonBlockingNotificationsItem,ParallaxButton:Ze.ParallaxButton,DefaultScreen:Ee.DefaultScreen,HudIcons:Ks.HudIcons,InboxItem:ke.InboxItem,TaskWidgetItem:ds.TaskWidgetItem,TaskWidgetHint:cs.TaskWidgetHint,TaskWidgetTitleBackground:gs.TaskWidgetTitleBackground,HeroProgressionItem:fe.HeroProgressionItem,HeroProgressionDescription:ve.HeroProgressionDescription,ArmoryWeaponItem:ye.ArmoryWeaponItem,ArmoryWeaponsListTierItem:we.ArmoryWeaponsListTierItem,ArmoryWeaponsListProgressItem:be.ArmoryWeaponsListProgressItem,ArmoryWeaponsListContainer:xe.ArmoryWeaponsListContainer,TestArmoryGrid:Me.TestArmoryGrid,RankUp:Pe.RankUp,GachaBox:Ie.GachaBox,RewardsUnlock:Te.RewardsUnlock,ShopProduct:Le.ShopProduct,ShopProductPreviewItem:Ae.ShopProductPreviewItem,WeaponCustomization:Se.WeaponCustomization,WeaponCustomizationItemsPanel:De.WeaponCustomizationItemsPanel,WeaponCustomizationHint:Re.WeaponCustomizationHint,WeaponPerkItem:Ne.WeaponPerkItem,EquipmentPanelButton:Oe.EquipmentPanelButton,EquipmentPanelBlock:Be.EquipmentPanelBlock,EquipmentPanelBlockTimer:Fe.EquipmentPanelBlockTimer,EquipmentPanelCustomizationButton:Ve.EquipmentPanelCustomizationButton,EquipmentPanelWeaponTypeButton:$e.EquipmentPanelWeaponTypeButton,ItemPanelFlippableImage:He.ItemPanelFlippableImage,ItemPanelFlippableZeroPaddedLabel:We.ItemPanelFlippableZeroPaddedLabel,Crosshair:ze.Crosshair,HitFeedback:Ue.HitFeedback,DamageFeedback:je.DamageFeedback,DamageFeedbackItem:Xe.DamageFeedbackItem,ReloadingProgress:Ge.ReloadingProgress,MessageLabel:qe.MessageLabel,UsageMessage:Ye.UsageMessage,EscapeMenuHeroButton:et.EscapeMenuHeroButton,PreBattleReadyButton:at.PreBattleReadyButton,TeamListItem:ot.TeamListItem,HeroPanel:it.HeroPanel,HeroPerkImage:st.HeroPerkImage,HeroHealthBar:nt.HeroHealthBar,HeroButton:tt.HeroButton,WeaponContainer:Ke.WeaponContainer,ReequipAbilities:Je.ReequipAbilities,ReequipButton:Qe.ReequipButton,SkipButton:lt.SkipButton,SessionPerformance:ht.SessionPerformance,TestSessionPerformance:dt.TestSessionPerformance,InstantRewardsList:ut.InstantRewardsList,InstantRewardsItem:ct.InstantRewardsItem,SessionRewardsList:pt.SessionRewardsList,SessionRewardsItem:mt.SessionRewardsItem,SessionProgression:yt.SessionProgression,TestSessionProgression:bt.TestSessionProgression,HeroUnlocksList:_t.HeroUnlocksList,HeroUnlocksItem:gt.HeroUnlocksItem,WeaponUnlocksList:ft.WeaponUnlocksList,WeaponUnlocksItem:vt.WeaponUnlocksItem,WeaponUnlocksItemDoubleProgressBar:Mt.WeaponUnlocksItemDoubleProgressBar,TierProgression:Ct.TierProgression,UnlockedTierWeapons:wt.UnlockedTierWeapons,UnlockedTierWeaponsItem:xt.UnlockedTierWeaponsItem,SeasonPassProgression:kt.SeasonPassProgression,TaskProgressItem:At.TaskProgressItem,CurrencyListItem:St.CurrencyListItem,RewardListBox:Dt.RewardListBox,RewardListItem:Rt.RewardListItem,SeasonPassProgressWidget:It.SeasonPassProgressWidget,SeasonPassProgressLevel:Pt.SeasonPassProgressLevel,TestSeasonPassRewardsList:Tt.TestSeasonPassRewardsList,TestSeasonPassProgressLevelList:Et.TestSeasonPassProgressLevelList,TestPurchaseSeasonPassRewardsList:Lt.TestPurchaseSeasonPassRewardsList,PostSessionHeroItem:Nt.PostSessionHeroItem,PostSessionWeaponItem:Bt.PostSessionWeaponItem,PostSessionArmoryWeaponItem:Ot.PostSessionArmoryWeaponItem,TestSessionUnlocks:Ft.TestSessionUnlocks,Subtitles:Vt.Subtitles,PickOneItem:$t.PickOneItem,RarityButton:w.RarityButton,Rarity:x.Rarity,Radar:Xt.Radar,RadarIcon:Gt.RadarIcon,Sector:Yt.Sector,RoundInfo:Zt.RoundInfo,KillLog:Ht.KillLog,KillLogItem:Wt.KillLogItem,GlitchIcon:mi.GlitchIcon,PerkNotification:zt.PerkNotification,ContaminationPanel:jt.ContaminationPanel,ContaminationIcon:Ut.ContaminationIcon,AbilitiesPanel:ii.AbilitiesPanel,TestAbilitiesPanel:si.TestAbilitiesPanel,TestAbilitiesPanelScreen:ni.TestAbilitiesPanelScreen,AbilitiesPanelAbility:ai.AbilitiesPanelAbility,TestAbilitiesPanelAbility:oi.TestAbilitiesPanelAbility,AbilitiesPanelUltimate:ri.AbilitiesPanelUltimate,TestAbilitiesPanelUltimate:li.TestAbilitiesPanelUltimate,StrategicAbility:di.StrategicAbility,StrategicView:hi.StrategicView,TestStrategicView:Os.TestStrategicView,Chat:ci.Chat,ChatInput:ui.ChatInput,ChatOutput:pi.ChatOutput,RaceIcon:_e.RaceIcon,TestRaceIcon:As.TestRaceIcon,TaskCompleted:Qt.TaskCompleted,WeaponLevelUp:Kt.WeaponLevelUp,ObjectiveMessage:ei.ObjectiveMessage,NarratorMessage:ti.NarratorMessage,ItemEquipped:Jt.ItemEquipped,HudIcon:gi.HudIcon,PlayerBadge:_i.PlayerBadge,TeammateMarker:fi.TeammateMarker,KillerInfo:vi.KillerInfo,HeroSelectButton:Vs.HeroSelectButton,HeroSelection:$s.HeroSelection,HeroSelectionItem:Hs.HeroSelectionItem,HeroAbilityItem:Ws.HeroAbilityItem,HeroCustomization:Xs.HeroCustomization,HeroOutfitButton:Gs.HeroOutfitButton,WipeCount:es.WipeCount,HudInfoLabel:ts.HudInfoLabel,PersonalScore:wi.PersonalScore,DefaultIcon:Ui.DefaultIcon,TestDefaultIcon:ji.TestDefaultIcon,ThrowableIcon:Xi.ThrowableIcon,TestThrowableIcon:Gi.TestThrowableIcon,PieProgressIcon:Wi.PieProgressIcon,TestPieProgressIcon:zi.TestPieProgressIcon,ResurrectionIcon:qi.ResurrectionIcon,TestResurrectionIcon:Yi.TestResurrectionIcon,PlayerResultsBadge:Zi.PlayerResultsBadge,PingIcon:Ji.PingIcon,TestPingIcon:Qi.TestPingIcon,CaptureProgress:Ki.CaptureProgress,OptionsElement:is.OptionsElement,OptionsDropdown:ss.OptionsDropdown,OptionsKeyBindLock:ns.OptionsKeyBindLock,Scoreboard:Li.Scoreboard,ScoreboardTeamBlock:Di.ScoreboardTeamBlock,ScoreboardPlayerItem:Ri.ScoreboardPlayerItem,TestScoreboardPlayerItem:Ni.TestScoreboardPlayerItem,ScoreBoardContextMenu:Ai.ScoreBoardContextMenu,ScoreboardContextMenuButton:Si.ScoreboardContextMenuButton,ContaminationModifiersItem:Bi.ContaminationModifiersItem,HordePerkItem:rt.HordePerkItem,StaminaIndicator:qs.StaminaIndicator,TestStaminaIndicator:Ys.TestStaminaIndicator,TeammatesPanel:xi.TeammatesPanel,EncounterCompletion:Ci.EncounterCompletion,TestEncounterCompletion:Mi.TestEncounterCompletion,ModeInfoPVEBriefing:as.ModeInfoPVEBriefing,ModeInfoPVPList:os.ModeInfoPVPList,ModeInfoPVPItem:rs.ModeInfoPVPItem,PlayModeItem:ls.PlayModeItem,AiHealthBar:Ii.AiHealthBar,TestAiHealthBar:Ti.TestAiHealthBar,TeamsPanelPlayer:Ei.TeamsPanelPlayer,TestTeamsPanel:Pi.TestTeamsPanel,RarityWeapon:ps.RarityWeapon,AttachmentSlot:ms.AttachmentSlot,InstantRewardItem:ki.InstantRewardItem,Fader:Oi.Fader,PatternButton:X.PatternButton,SelectablePatternButton:G.SelectablePatternButton,ScrollingBanner:hs.ScrollingBanner,RarityItem:us.RarityItem,TaskItem:_s.TaskItem,TaskRewardsList:fs.TaskRewardsList,TaskCategoryItem:vs.TaskCategoryItem,TestTasks:ys.TestTasks,TerritorySelectionItem:Zs.TerritorySelectionItem,GeneralHints:bs.GeneralHints,Nameplate:Fi.Nameplate,TestNameplate:Vi.TestNameplate,MissionListItem:ws.MissionListItem,CreatePageChoice:xs.CreatePageChoice,SocialPanel:Cs.SocialPanel,SocialPanelBlock:Ms.SocialPanelBlock,ContextMenu:Is.ContextMenu,PlayerList:Ts.PlayerList,PlayerListItem:Ps.PlayerListItem,SocialSearchPanel:Es.SocialSearchPanel,EscortPanel:$i.EscortPanel,TestEscortPanel:Hi.TestEscortPanel,Paginator:q.Paginator,Test:ks.Test,TestScreen:Ls.TestScreen,TestNavigation:Ns.TestNavigation,TestNavigationProduct:Ns.TestNavigationProduct,TestNavigationPreview:Bs.TestNavigationPreview,TestChat:Ss.TestChat,TestWipeCount:Ds.TestWipeCount,TestPersonalScore:Rs.TestPersonalScore}}.apply(t,s),void 0===n||(e.exports=n)},2044:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(8516),i(8323),i(5615),i(9664),i(4529),i(5702),i(4049),i(5591),i(8231),i(9973),i(9191)],n=function(e,t,i,s,n,a,o,r,l,h,d,c,u,p){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataBinds=class{static registerBindingAttributes(){i.engine.registerBindingAttribute("label",s.LabelHandler),i.engine.registerBindingAttribute("image",n.ImageHandler),i.engine.registerBindingAttribute("progress_bar",a.ProgressBarHandler),i.engine.registerBindingAttribute("test",o.TestHandler),i.engine.registerBindingAttribute("style-coh-color-matrix",o.CohColorMatrixHandler),i.engine.registerBindingAttribute("style-mask-image-url",o.MaskImageHandler),i.engine.registerBindingAttribute("custom-html",o.CustomHtmlHandler),i.engine.registerBindingAttribute("style-z-index",o.ZIndexHandler),i.engine.registerBindingAttribute("animation-restart",o.AnimationRestartHandler),i.engine.registerBindingAttribute("animation-restart-all",o.AnimationRestartAllHandler),i.engine.registerBindingAttribute("kill_log_event",r.KillLogItemHandler),i.engine.registerBindingAttribute("task_completed_event",l.TaskCompletedHandler),i.engine.registerBindingAttribute("weapon_levelup_event",h.WeaponLevelUpDataBind),i.engine.registerBindingAttribute("item_equipped_event",d.ItemEquippedDataBind),i.engine.registerBindingAttribute("hero_panel",c.HeroPanelHandler),i.engine.registerBindingAttribute("personal_score",u.PersonalScoreHandler),i.engine.registerBindingAttribute("teammates_panel",p.TeammatesPanelHandler),i.engine.registerBindingAttribute("teammates_panel_frequent",p.TeammatesPanelFrequentHandler)}}}.apply(t,s),void 0===n||(e.exports=n)},8606:(e,t,i)=>{var s,n;s=[i,t,i(9586),i(8330),i(3008),i(5542),i(227),i(2889),i(8674),i(2209),i(3521),i(6749),i(4260),i(1225),i(9008)],n=function(e,t,i,s,n,a,o,r,l,h,d,c,u,p,m){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.controls=new Map,t.controlsById=new Map,window.controls=t.controls,window.controlsById=t.controlsById,t.resizeObserverOptions={attributes:!0,attributeFilter:["style"]};const g=e=>{for(const t of e){const e=t.target.control;e&&e.onRectChanged()}};t.Control=class{constructor(e){this.prevRect=null,this.isDestroyed=!1,this.childControlsRefs=[],this.listeners=new Array,this.waitActivate=()=>{this.waitActivateDispose&&(this.waitActivateDispose(),this.waitActivateDispose=null),this.waitActivateDispose=c.waitSeveralFrames(this.onWaitActivate)},this.onWaitActivate=()=>{this.waitActivateDispose&&(this.waitActivateDispose(),this.waitActivateDispose=null),this.invisibleParent&&(this.invisibleParent.signalVisibilityChanged.remove(this.waitActivate),this.invisibleParent=null),this.activationPossible?this.activated?this._signalActivate.dispatch():this.isDestroyed||this.waitActivate():this.invisibleParent&&this.invisibleParent.signalVisibilityChanged.add(this.waitActivate)},this.dispatchExternalEventAnimationStarted=e=>{this.dispatchExternalEvent(a.ExternalEvent.animation_started,e)},this.dispatchExternalEventAnimationFinished=e=>{this.dispatchExternalEvent(a.ExternalEvent.animation_finished,e)},this.setListenRectChanged=(e=!0)=>{this._isListenRectChanged||(this._isListenRectChanged=!0,this.signalActivate.add(this.onRectChanged),r.signalScreenResized.add(this.onRectChanged),this.resizeObserver=new MutationObserver(g),this.resizeObserver.observe(this.content,t.resizeObserverOptions))},this.onRectChanged=(e=null)=>{const t=this.content.getBoundingClientRect();this.prevRect&&this.prevRect.width==t.width&&this.prevRect.height==t.height&&this.prevRect.left==t.left&&this.prevRect.top==t.top?this.resizeInterval=window.setInterval((()=>{if(!this.content)return void window.clearInterval(this.resizeInterval);const e=this.content.getBoundingClientRect();this.prevRect.width==e.width&&this.prevRect.height==e.height&&this.prevRect.left==e.left&&this.prevRect.top==e.top||(this.dispatchExternalEvent(a.ExternalEvent.rect_changed,e.left,e.top,e.width,e.height,this.alpha),this.prevRect=e,this._signalRectChanged&&this._signalRectChanged.dispatch(this),window.clearInterval(this.resizeInterval))}),200):(this.dispatchExternalEvent(a.ExternalEvent.rect_changed,t.left,t.top,t.width,t.height,this.alpha),this.prevRect=t,this._signalRectChanged&&this._signalRectChanged.dispatch(this))},this.content=e,e.control=this}init(){this._visible=!this.content.classList.contains("Hidden"),this._enabled=!this.content.classList.contains("Disabled"),this._focused="true"==this.content.dataset.focused,this._inputEnabled=!0,this._scale=1,this._rotation=0,this.initElements(),this.initListeners()}addChildControl(e){-1==this.childControlsRefs.indexOf(e)&&this.childControlsRefs.push(e)}removeChildControl(e){const t=this.childControlsRefs.indexOf(e);-1!=t&&this.childControlsRefs.splice(t,1)}setNavigation(e){if("string"!=typeof e){if(this._navigation){if(this._navigation==e)return;this._navigation.detach()}this._navigation=e,e&&this.controlId&&e.attachToControl(this)}else o.Factory.createNavigationElement(this,e)}dispatchGetCenterPointEvent(){const e=this.content.getBoundingClientRect(),t=e.left+e.width/2,i=e.top+e.height/2;this.dispatchExternalEvent(a.ExternalEvent.get_center_point,t,i)}debugPrintNavigationStructure(){if(this._navigation){const e=`{${this._navigation.getDebugNavigationStructure()}}`,t=4e3;for(let i=0;i<e.length;i+=t)this.dispatchExternalEvent(h.NavigationEvent.debug_message,e.substr(i,t))}else{const e=u.searchNearestNavigatableChildControl(this.content);e?e.debugPrintNavigationStructure():console.error(`${this._controlName}.debugPrintNavigationStructure() No navigation element set`)}}handleAction(e,t,i){this.inputEnabled&&(this._navigation?this._navigation.handleAction(e,t,i):console.error(`${this._controlName}.handleAction() No navigation element set`))}addDefinedAction(e,t){this._navigation?(this._navigation.addDefinedAction(e),this._navigation.enableAction(e,t)):console.error(`${this._controlName}.addDefinedAction() No navigation element set`)}enableAction(e,t){this._navigation?this._navigation.enableAction(e,t):console.error(`${this._controlName}.enableAction() No navigation element set`)}setNavigationFocused(e){if(this.navigation)this.navigation.isNavigationReady?this.navigation.setFocused(e):this.navigation.signalNavigationReady.add((()=>{this.navigation.setFocused(e)}));else{const t=u.searchNearestNavigatableChildControl(this.content);t&&t.setNavigationFocused(e)}}setNavigationContainerInternalFocus(e,t){(this.navigation instanceof d.NavigationContainer||this.navigation instanceof p.NavigationItemsGrid||this.navigation instanceof m.NavigationItemsList)&&(this.navigation.internalFocus=e,t&&this.navigation.resetNavigationCursor())}addChildToStage(e){this.content.appendChild(e.content)}removeChildFromStage(e){const{content:t}=e;t&&t.parentElement&&t.parentElement.removeChild(t)}register(e,i,s,n){this._controlPath=e,this._controlName=this.extractControlName(),this._controlId=i,this.drawModelId=`ControlDrawModel_${this._controlId}`,s&&this.addContentToStage(),t.controlsById.set(i,this),this._navigation&&this._navigation.attachToControl(this),n&&(this.content.setAttribute("data-bind-style-transform2d",`{{${this.drawModelId}.transform}}`),this.content.setAttribute("data-bind-style-opacity",`{{${this.drawModelId}.alpha}}`),this.content.classList.add("PositionAbsolute"),this.content.classList.remove("DefaultMargin")),this.setupParentControl(),this.onRegister()}setupParentControl(){this._closestParentControl=u.searchClosestParentControl(this.content),null!=this._closestParentControl&&this._closestParentControl.addChildControl(this)}onRegister(){}destroy(){const{controlId:e,_fullControlPath:i}=this;this.isDestroyed||(this.onDestroy(),this.removeChildrenRefs(),this.removeContentFromStage(),t.controlsById.delete(e),i&&t.controls.delete(i),null!=this._closestParentControl&&this._closestParentControl.removeChildControl(this),this.clearProperties())}clearProperties(){for(const e in this)this[e]=null}onDestroy(){if(this.waitActivateDispose&&(this.waitActivateDispose(),this.waitActivateDispose=null),window.clearTimeout(this.updateTimeout),window.clearInterval(this.resizeInterval),l.TweenMax.killTweensOf(this),this.listeners){for(let e=0;e<this.listeners.length;e++){const{element:t,type:i,listener:s}=this.listeners[e];t.removeEventListener(i,s)}this.listeners=null}this._isListenRectChanged&&(this._isListenRectChanged=!1,this.signalActivate.remove(this.onRectChanged),r.signalScreenResized.remove(this.onRectChanged),this.resizeObserver.disconnect(),this.resizeObserver=null),this._signalActivate&&(this._signalActivate.removeAll(),this._signalActivate=null),this._signalVisibilityChanged&&(this._signalVisibilityChanged.removeAll(),this._signalVisibilityChanged=null),this._signalEnabledChanged&&(this._signalEnabledChanged.removeAll(),this._signalEnabledChanged=null),this._signalFocusedChanged&&(this._signalFocusedChanged.removeAll(),this._signalFocusedChanged=null),this._navigation&&(this._navigation.destroy(),this._navigation=null),this.isDestroyed=!0}removeChildrenRefs(){if(this.childControlsRefs)for(;this.childControlsRefs.length>0;)this.childControlsRefs.shift().destroy()}removeContentFromStage(){if(this._closestParentControl)this._closestParentControl.removeChildFromStage(this);else{const{content:e}=this;e&&e.parentElement&&e.parentElement.removeChild(e)}}addContentToStage(){const{content:e}=this;e.id=this.controlName;const t=u.getControlByPath(this.extractParentPath());t?t.addChildToStage(this):document.body.appendChild(e),this.cacheOwnContent()}cacheOwnContent(){let e=this.content.id,i=this.content.parentElement;for(;i&&""!=i.id&&"root"!=i.id;)e=i.id+"."+e,i=i.parentElement;this._fullControlPath=e,t.controls.set(this._fullControlPath,this),this.cacheContentChildren(this._fullControlPath,this.content.children),e=null}cacheContentChildren(e,i){const s=i.length;for(let n=0;n<s;n++){const s=i[n],a=`${e}.${s.id}`,o=s;o&&o.control&&(t.controls.set(a,o.control),o.control.fullControlPath=a,o.control._closestParentControl||o.control.setupParentControl()),this.cacheContentChildren(a,s.children)}}extractControlName(){const{_controlPath:e}=this;return e?e.substr(e.lastIndexOf(".")+1):""}extractParentPath(){const{_controlPath:e}=this;return e?e.substr(0,e.lastIndexOf(".")):""}initElements(){}registerElements(...e){for(const t of e)if("string"==typeof t)Object(this)[t]=this.searchElement(t);else for(const e in t)Object(this)[e]=this.searchElement(t[e])}registerOptionalElements(...e){for(const t of e)if("string"==typeof t)Object(this)[t]=this.searchOptionalElement(t);else for(const e in t)Object(this)[e]=this.searchOptionalElement(t[e])}registerControls(...e){for(const t of e)if("string"==typeof t)Object(this)[t]=this.searchControl(t);else for(const e in t)Object(this)[e]=this.searchControl(t[e])}registerOptionalControls(...e){for(const t of e)if("string"==typeof t)Object(this)[t]=this.searchOptionalControl(t);else for(const e in t)Object(this)[e]=this.searchOptionalControl(t[e])}searchControl(e,t=null,i=!0){const s=this.searchElement(e,t,i);return s?s.control:null}searchOptionalControl(e,t=null){return this.searchControl(e,t,!1)}searchOptionalElement(e,t=null){return this.searchElement(e,t,!1)}searchElement(e,t=null,i=!0){const{content:s}=this;t||(t=s);const n=e.split(".");for(const a of n)if(!(t=a.startsWith("*")?u.searchChildEndsWith(t,a.substr(1),i):u.searchChild(t,a,i))){i&&console.error(`searchElement: unknown relativeChildId "${e}" in element "${s.id}""`);break}return t}searchParentElement(e,t=!0){const i=u.searchParentElement(this.content,e);return!i&&t&&console.error(`searchParentElement: unknown id "${e}"`),i}searchParentControl(e,t=!0){const i=u.searchParentControl(this.content,e);return!i&&t&&console.error(`searchParentControl: unknown id "${e}"`),i}searchOptionalParentElement(e){return u.searchParentElement(this.content,e)}searchOptionalParentControl(e){return u.searchParentControl(this.content,e)}initListeners(){}addListener(e,t,i=this.content){let s=!1;for(let n=0;n<this.listeners.length;n++){const a=this.listeners[n];if(e==a.type&&t==a.listener&&i==a.element){s=!0;break}}0==s?(this.listeners.push({type:e,listener:t,element:i}),i.addEventListener(e,t)):console.warn(`Allready has listener ${e} in ${this.fullControlPath}`)}removeListener(e,t,i=this.content){for(let s=0;s<this.listeners.length;s++){const n=this.listeners[s];if(e==n.type&&t==n.listener&&i==n.element){i.removeEventListener(e,t),this.listeners.splice(s,1);break}}}dispatchExternalEvent(e,...t){const{_controlId:i}=this;i&&s.engine.trigger(a.externalEvent,e,i,...t)}setAnimatedVisible(e){e?this.show():this.hide()}initVisibility(e){this._visible!=e&&(this._visible=e,this.content&&(e?this.content.classList.remove("Hidden"):this.content.classList.add("Hidden"),this._signalVisibilityChanged&&this._signalVisibilityChanged.dispatch()))}show(){this.visible=!0,this.content&&(this.content.classList.remove("Hide"),this.content.classList.add("Show"))}hide(){this.visible=!1,this.content&&(this.content.classList.remove("Show"),this.content.classList.add("Hide"))}focus(){this.focused||(this._focused=!0,this.content.dataset.focused="true",this._signalFocusedChanged&&this._signalFocusedChanged.dispatch(this))}unfocus(){this.focused&&(this._focused=!1,this.content.dataset.focused="false",this._signalFocusedChanged&&this._signalFocusedChanged.dispatch(this))}hideWithDelay(e){l.TweenMax.to(this,e,{onComplete:()=>{this.visible=!1}})}playAnimationSilent(e){this.playAnimation(e,!1)}playAnimation(e,t=!0){null!=Object(this)[e]?Object(this)[e](t):console.error(`playAnimation: Unable to find animation ${e} in control ${this.controlPath}`)}enableClass(e,t){t?this.content.classList.add(e):this.content.classList.remove(e)}enableInputOf(e,t){t?e.classList.remove("PointerEventsNone"):e.classList.add("PointerEventsNone")}enableInput(){this.inputEnabled=!0}disableInput(){this.inputEnabled=!1}get activated(){return this.content&&(0!=this.content.offsetHeight||0!=this.content.offsetWidth)}get activationPossible(){let e=this.content;do{if(!e)return!1;if(e.control&&!e.control.visible)return this.invisibleParent=e.control,!1;e=e.parentElement}while(e);return!0}get focused(){return this._focused}get navigation(){return this._navigation}get controlPath(){return this._controlPath}set fullControlPath(e){this._fullControlPath=e}get fullControlPath(){return this._fullControlPath}get controlName(){return this._controlName}get controlId(){return this._controlId}get position(){return this.content.style.position}set position(e){this.content.style.position=e}get x(){return this.content.style.leftPX}set x(e){this.content.style.leftPX=e}get y(){return this.content.style.topPX}set y(e){this.content.style.topPX=e}get left(){return this.content.style.left}set left(e){this.content&&(this.content.style.left=e)}get top(){return this.content.style.top}set top(e){this.content&&(this.content.style.top=e)}get bottom(){return this.content.style.bottom}set bottom(e){this.content&&(this.content.style.bottom=e)}get right(){return this.content.style.right}set right(e){this.content&&(this.content.style.right=e)}get width(){return this.content.style.width}set width(e){this.content&&(this.content.style.width="number"==typeof e?`${e}px`:e)}get height(){return this.content.style.height}set height(e){this.content&&(this.content.style.height="number"==typeof e?`${e}px`:e)}get filter(){return this.content.style.filter}set filter(e){this.content&&(this.content.style.filter=e)}get alpha(){if(!this.content)return 0;const{style:e}=this.content;return e.opacity?Number(e.opacity):1}set alpha(e){this.content&&(this.content.style.opacity=String(e))}get opacity(){if(!this.content)return 0;const{style:e}=this.content;return e.opacity?Number(e.opacity):1}set opacity(e){this.content&&(this.content.style.opacity=String(e))}get rotation(){return this._rotation}set rotation(e){this._rotation=e,this.content&&(this.content.style.transform=`rotate(${e}deg)`)}get scale(){return this._scale}set scale(e){this._scale=e,this.content&&(this.content.style.transform=`scale(${e})`)}get visible(){return this._visible}set visible(e){this._visible!=e&&(this._visible=e,this.content&&(e?this.content.classList.remove("Hidden"):this.content.classList.add("Hidden"),this._signalVisibilityChanged&&this._signalVisibilityChanged.dispatch(),this.dispatchExternalEvent(a.ExternalEvent.visibility_changed,e)))}get enabled(){return this._enabled}set enabled(e){this._enabled!=e&&(this._enabled=e,e?this.content.classList.remove("Disabled"):this.content.classList.add("Disabled"),this.inputEnabled=e,this._signalEnabledChanged&&this._signalEnabledChanged.dispatch())}get inputEnabled(){let e=this.content.parentElement;for(;e&&!e.control;)e=e.parentElement;return this._inputEnabled&&(!e||e.control.inputEnabled)}set inputEnabled(e){this._inputEnabled=e,this.enableInputOf(this.content,e)}get offsetHeightVh(){return`${i._pxToVh(this.content.offsetHeight)}vh`}get offsetWidthVh(){return`${i._pxToVh(this.content.offsetWidth)}vh`}get transformXPercent(){return this._transformXPercent}set transformXPercent(e){this._transformXPercent=e,this.content.style.transform=`translateX(${e}%)`}get transformYPercent(){return this._transformYPercent}set transformYPercent(e){this._transformYPercent=e,this.content.style.transform=`translateY(${e}%)`}set controlStyle(e){this.content.setAttribute("style",e)}get closestParentControl(){return this._closestParentControl}get signalActivate(){return this._signalActivate||(this._signalActivate=new n.Signal,this.waitActivate()),this._signalActivate}get signalVisibilityChanged(){return this._signalVisibilityChanged||(this._signalVisibilityChanged=new n.Signal),this._signalVisibilityChanged}get signalEnabledChanged(){return this._signalEnabledChanged||(this._signalEnabledChanged=new n.Signal),this._signalEnabledChanged}get signalFocusedChanged(){return this._signalFocusedChanged||(this._signalFocusedChanged=new n.Signal),this._signalFocusedChanged}get signalRectChanged(){return this._signalRectChanged||(this._signalRectChanged=new n.Signal),this._signalRectChanged}}}.apply(t,s),void 0===n||(e.exports=n)},4260:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(2889)],n=function(e,t,i,s){"use strict";function n(e){let t=e.content.parentElement,i=0;for(;t;)t=t.parentElement,i++;return i}Object.defineProperty(t,"__esModule",{value:!0}),t.searchControlByType=function(e){for(const[t,s]of i.controls)if(s instanceof e)return s;return null},t.searchControlByNavigationType=function(e){for(const[t,s]of i.controls)if(s.navigation instanceof e)return s;return null},t.searchParentElement=function(e,t){let i=e.parentElement;for(;i;){if(i.id==t)return i;i=i.parentElement}return null},t.searchParentControl=function(e,t){let i=e.parentElement;for(;i;){if(i.id==t)return i.control;i=i.parentElement}return null},t.searchClosestParentControl=function(e){let t=e.parentElement;for(;t;){if(t.control)return t.control;t=t.parentElement}return null},t.searchParentControlByType=function(e,t,i=null){let s=e.content.parentElement;for(;s;)if(s.control instanceof t){if(!i||i==s.id)return s.control}else s=s.parentElement;return null},t.searchParentControlByNavigationType=function(e,t,i=null){let s=e.content.parentElement;for(;s;){if(s.control&&s.control.navigation instanceof t&&(!i||i==s.id))return s.control;s=s.parentElement}return null},t.searchNearestNavigatableChildControl=function e(t){const i=t.children,s=i.length;for(let e=0;e<s;e++){const t=i[e].control;if(t&&t.navigation)return t}let a;for(let t=0;t<s;t++){const s=e(i[t]);(!a||s&&n(s)<n(a))&&(a=s)}return a},t.getControlByPath=function(e){if(e){const t=i.controls.get(e);if(t)return t;console.error(`getControlByPath: unknown control path: "${e}"`)}return s.root},t.searchParentControlByModelId=function(e,t,i){let s=e.parentElement;do{if(s){if(s.id==t&&s.control.drawModelId==i)return s;s=s.parentElement}}while(s)},t.searchParentControlByControlId=function(e,t,i){let s=e.parentElement;do{if(s){if(s.id==t&&s.control.controlId==i)return s;s=s.parentElement}}while(s)},t.searchChild=function(e,t,i=!0){const s=e.children,n=s.length;for(let e=0;e<n;e++){const i=s[e];if(i.id==t)return i}return i&&console.error(`searchChild: unknown childId "${t}"`),null},t.searchChildEndsWith=function(e,t,i=!0){const s=e.children,n=s.length;for(let e=0;e<n;e++){const i=s[e];if(i.id.endsWith(t))return i}return i&&console.error(`searchChild: unknown childId "*${t}"`),null}}.apply(t,s),void 0===n||(e.exports=n)},5542:(e,t,i)=>{var s;s=function(e,t){"use strict";var i,s;Object.defineProperty(t,"__esModule",{value:!0}),(s=t.FactoryEvent||(t.FactoryEvent={})).callMethod="callMethod",s.setMember="setMember",s.createControl="createControl",s.registerControl="registerControl",t.externalEvent="external_event",(i=t.ExternalEvent||(t.ExternalEvent={})).value_changed="value_changed",i.visibility_changed="visibility_changed",i.rect_changed="rect_changed",i.edit_started="edit_started",i.edit_applied="edit_applied",i.edit_canceled="edit_canceled",i.edit_confirmed="edit_confirmed",i.animation_started="animation_started",i.animation_finished="animation_finished",i.clicked="clicked",i.right_clicked="right_clicked",i.clicked_outside="clicked_outside",i.mouse_overed="mouse_overed",i.mouse_out="mouse_out",i.mouse_down="mouse_down",i.mouse_up="mouse_up",i.profile_start="profile_start",i.profile_end="profile_end",i.item_selected="item_selected",i.item_overed="item_overed",i.item_unovered="item_unovered",i.item_focused="item_focused",i.item_unfocused="item_unfocused",i.ready="ready",i.restricted="restricted",i.back_action="back_action",i.init_radar_sector="init_radar_sector",i.get_center_point="get_center_point",i.timer_ended="timer_ended",i.expanded_changed="expanded_changed",i.perk_ready="perk_ready",i.checkbox_value_changed="checkbox_value_changed",i.show_item="show_item",i.nav_bar_move_end="nav_bar_move_end",i.post_session_instant_rewards="post_session_instant_rewards",i.post_session_instant_rewards_multiplier="post_session_instant_rewards_multiplier",i.session_rewards="session_rewards",i.task_progressing="task_progressing",i.task_progressed="task_progressed",i.task_completed="task_completed",i.session_progression_shown="session_progression_shown",i.session_progression_xp_gain="session_progression_xp_gain",i.session_progression_level_up="session_progression_level_up",i.season_pass_xp_gain="season_pass_xp_gain",i.season_claim_rewards="season_claim_rewards",i.season_level_up="season_level_up",i.season_xp_reset="season_xp_reset",i.currency_recived="currency_recived",i.item_recived="item_recived",i.close_context_menu="close_context_menu",i.window_show="window_show",i.window_hide="window_hide",i.show_hint="show_hint"}.apply(t,[i,t]),void 0===s||(e.exports=s)},227:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(3008),i(5542),i(8606),i(868),i(2889),i(2044),i(2222)],n=function(e,t,i,s,n,a,o,r,l,h){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.templates={},t.signalEnterFrame=new s.SignalEnterFrame,t.translate=function(e){return e.indexOf("@")>=0?i.engine.translate(e):e};class d{static init(){d.initTemplates(),d.initListeners(),l.DataBinds.registerBindingAttributes(),r.initRoot()}static initTemplates(){const e=document.getElementById("Templates"),i=e.children,s=i.length;for(let e=0;e<s;e++){const s=i[e];t.templates[s.id]=s}e.parentElement.removeChild(e)}static initListeners(){for(const e in n.FactoryEvent)i.engine.on(e,Object(d)[e])}static createChildControl(e,t){const i=d.createContent(e);return i&&(d.createControllers(i),t.appendChild(i)),i.control?i.control:(console.log(`${i.id} has no data-control, templateName = ${e}`),null)}static registerChildControl(e){return e&&d.createControllers(e),e.control}static removeChildControl(e,t){const i=e.content;i&&t.removeChild(i)}static createContent(e){const i=t.templates[e];return i?i.cloneNode(!0):(console.error(`createControl: unknown control template "${e}"`),null)}static createControllers(e){if(h.StartProfile(`createControllers_${e.id}`),e.dataset.control&&d.createController(e),!e.dataset.dontRegisterChildren){const t=e.children,i=t.length;for(let e=0;e<i;e++){const i=t[e];d.createControllers(i)}}e.dataset.control&&e.control.init(),h.StopProfile()}static createController(e){const t=e.dataset.control;let i=o.controlClasses[t];i||(i=o.controlClasses.Control,console.error(`createControl: unknown control class "${t}"`));const s=new i(e);e.dataset.navigation&&d.createNavigationElement(s,e.dataset.navigation)}static createNavigationElement(e,t){let i=o.navigationClasses[t];i||(t="NavigationElement",i=o.navigationClasses.NavigationElement,console.error(`createNavigationElement: unknown navigation element class "${t}"`)),e.content.dataset.navigation=t,e.setNavigation(new i)}}d.createControl=(e,t,i,s)=>{a.controls.get(t)&&console.error(`setControlPath: controlPath "${t}" is already in use`);const n=d.createContent(e);n&&(d.createControllers(n),n.control.register(t,i,!0,s))},d.createChildElement=(e,t)=>{const i=d.createContent(e);if(i)return t.appendChild(i)},d.registerControl=(e,t,i,s)=>{const n=a.controlsById.get(e);n&&(t=`${n.fullControlPath}.${t}`);const o=a.controls.get(t);o?o.register(t,i,!1,s):console.error(`registerControl: unknown control path "${t}"`)},d.callMethod=(e,t,...i)=>{const s=a.controlsById.get(t);s?null!=Object(s)[e]?Object(s)[e](...i):console.error(`callMethod: unknown methodName "${e}" of ${s.controlPath}`):console.error(`callMethod: unknown control id "${t}", method "${e}" won't be called`)},d.setMember=(e,t,i)=>{const s=a.controlsById.get(t);if(s){if("x"==e||"y"==e){const{content:e}=s;e.classList.add("PositionAbsolute"),e.classList.remove("DefaultMargin")}Object(s)[e]=i}else console.error(`setMember: unknown control id "${t}", member"${e}" won't be set`)},t.Factory=d}.apply(t,s),void 0===n||(e.exports=n)},4092:(e,t,i)=>{var s;s=function(e,t){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),(i=t.EDirection||(t.EDirection={}))[void 0]="undefined",i.horizontal="horizontal",i.vertical="vertical",i.bidirectional="bidirectional"}.apply(t,[i,t]),void 0===s||(e.exports=s)},5053:(e,t,i)=>{var s,n;s=[i,t,i(9586),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{get x(){const e=this.content.style.left;return+e.slice(0,e.length-2)*i.vhToPx}set x(e){this.content.style.left=e*i.pxToVh+"vh"}get y(){const e=this.content.style.top;return+e.slice(0,e.length-2)*i.vhToPx}set y(e){this.content.style.top=e*i.pxToVh+"vh"}get xVw(){return this._xVwValue}set xVw(e){this._xVwValue=e,this.content.style.left=`${e}vw`}}t.RelativeControl=n}.apply(t,s),void 0===n||(e.exports=n)},2222:(e,t,i)=>{var s,n;s=[i,t,i(5542),i(8330)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StartProfile=function(e){s.engine.trigger(i.externalEvent,i.ExternalEvent.profile_start,0,e)},t.StopProfile=function(){s.engine.trigger(i.externalEvent,i.ExternalEvent.profile_end,0)}}.apply(t,s),void 0===n||(e.exports=n)},7136:(e,t,i)=>{var s,n;s=[i,t,i(3008),i(4376),i(8606),i(5542),i(227)],n=function(e,t,i,s,n,a,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r extends n.Control{constructor(){super(...arguments),this._text="",this._type="",this.onMouseOver=e=>{this.onMouseOverImpl(e)},this.onMouseOut=e=>{this.onMouseOutImpl(e)},this.onMouseDown=e=>{this.onMouseDownImpl(e)},this.onMouseUp=e=>{this.onMouseUpImpl(e)},this.onClick=e=>{this.onClickImpl(e)}}init(){this._focusOnHover="true"==this.content.dataset.focusOnHover,super.init(),this.focused&&this.content.classList.add("Focused")}focus(){this.focused||(super.focus(),this.content.classList.add("Focused"))}unfocus(){this.focused&&(super.unfocus(),this.content.classList.remove("Focused"))}onRegister(){this.content.setAttribute("data-bind-label",`{{LabelViewModel_${this.controlId}}}`)}updateData(e){this.text=e.text}initElements(){this.label=this.content,this._dataModel={text:""}}initListeners(){this.addListener("mouseover",this.onMouseOver),this.addListener("mouseout",this.onMouseOut),this.addListener("mousedown",this.onMouseDown),this.addListener("click",this.onClick)}onClickImpl(e){this.trigger()}onMouseOverImpl(e){this._enabled&&(this._isMouseOvered=!0,this._focusOnHover&&this.focus(),this.dispatchExternalEvent(a.ExternalEvent.mouse_overed))}onMouseOutImpl(e){this._enabled&&(this._isMouseOvered=!1,this._focusOnHover&&this.unfocus(),this.dispatchExternalEvent(a.ExternalEvent.mouse_out))}onMouseDownImpl(e){this._enabled&&(0==e.button?(this._isMouseDown=!0,this.removeListener("mouseup",this.onMouseUp,window),this.addListener("mouseup",this.onMouseUp,window),this.onPressed(),this.dispatchExternalEvent(a.ExternalEvent.mouse_down)):2==e.button&&this.onRightPressed())}onMouseUpImpl(e){this._isMouseDown=!1,this.removeListener("mouseup",this.onMouseUp,window),this.onReleased(),this.dispatchExternalEvent(a.ExternalEvent.mouse_up)}onRightPressed(){this.dispatchExternalEvent(a.ExternalEvent.right_clicked)}onPressed(){this._signalPressed&&this._signalPressed.dispatch(this)}onReleased(){this._signalReleased&&this._signalReleased.dispatch(this)}trigger(){this.dispatchExternalEvent(a.ExternalEvent.clicked),this._signalClicked&&this._signalClicked.dispatch(this)}onDestroy(){this._signalPressed&&(this._signalPressed.removeAll(),this._signalPressed=null),this._signalReleased&&(this._signalReleased.removeAll(),this._signalReleased=null),this._signalClicked&&(this._signalClicked.removeAll(),this._signalClicked=null),this._dataModel=null,super.onDestroy()}setTriggerAction(e){const t=this._navigation;t&&(t.triggerAction=e)}setType(e){this._type!=e&&(this.content.classList.remove(this._type),this._type=e,this.content.classList.add(this._type))}get dataModel(){return this._dataModel}get text(){return this._text}set text(e){this._text!=e&&(this._text=e,this.dataModel.text=s.replaceUnsupportedTags(o.translate(e)),this.localizedText=this.dataModel.text)}set localizedText(e){this.label.innerHTML=e}get signalPressed(){return this._signalPressed||(this._signalPressed=new i.Signal),this._signalPressed}get signalReleased(){return this._signalReleased||(this._signalReleased=new i.Signal),this._signalReleased}get signalClicked(){return this._signalClicked||(this._signalClicked=new i.Signal),this._signalClicked}}t.Button=r}.apply(t,s),void 0===n||(e.exports=n)},9970:(e,t,i)=>{var s,n;s=[i,t,i(5542),i(3008),i(227),i(8606)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends a.Control{constructor(){super(...arguments),this.onClick=e=>{0==e.button&&this.trigger()}}initElements(){this._dataModel={value:!1},this.focused&&this.content.classList.add("Focused")}focus(){this.focused||(super.focus(),this.content.classList.add("Focused"))}unfocus(){this.focused&&(super.unfocus(),this.content.classList.remove("Focused"))}trigger(){this.userValue=!this.userValue,this.dispatchExternalEvent(i.ExternalEvent.clicked)}initListeners(){this.addListener("click",this.onClick)}get dataModel(){return this._dataModel}get value(){return this.dataModel.value}set value(e){this.setValue(e,!1)}setValue(e,t){const{content:i}=this;this.dataModel.value!=e&&(this.dataModel.value=e,e?i.classList.add("Checked"):i.classList.remove("Checked"),this._signalValueChanged&&this._signalValueChanged.dispatch())}get userValue(){return this.dataModel.value}set userValue(e){this.setValue(e,!0),this.dispatchExternalEvent(i.ExternalEvent.value_changed,e)}get text(){return this._text}set text(e){if(this._text!=e){this._text=e;const{label:t}=this;t.innerHTML=n.translate(e)}}get signalValueChanged(){return this._signalValueChanged||(this._signalValueChanged=new s.Signal),this._signalValueChanged}onDestroy(){this._signalValueChanged&&(this._signalValueChanged.removeAll(),this._signalValueChanged=null),super.onDestroy()}}t.Toggle=o}.apply(t,s),void 0===n||(e.exports=n)},7908:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(3008)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.emptyImageAlias="libs/ui/images/empty.dds";const n={fileName:""};class a extends i.Control{constructor(){super(...arguments),this.onUpdateImage=e=>{this.onUpdateImageImpl(e)}}onRegister(){this.content.setAttribute("data-bind-image",`{{ImageViewModel_${this.controlId}}}`)}updateData(e){this.alias=e.alias}get alias(){return this._alias}set alias(e){this._alias!=e&&(this._alias=e,e.indexOf(".")>0||e.startsWith("$")?this.onUpdateImage({fileName:e}):(e&&console.warn(`Image control ${this.controlName} receive incorrect image ${e}`),this.onUpdateImage(n)),this._signalAliasChanged&&this._signalAliasChanged.dispatch())}get signalAliasChanged(){return this._signalAliasChanged||(this._signalAliasChanged=new s.Signal),this._signalAliasChanged}get signalDataUpdated(){return this._signalDataUpdated||(this._signalDataUpdated=new s.Signal),this._signalDataUpdated}set imageSourceData(e){this._alias!=e.fileName&&(this._alias=e.fileName,this.onUpdateImage(e))}get imageSourceData(){return this.imageData}onUpdateImageImpl(e){this.imageData=e,this._signalDataUpdated&&this._signalDataUpdated.dispatch();const{imageData:t,content:i}=this,{style:s,dataset:n}=i;let a=t.fileName;0!=a.indexOf("libs/ui")&&0!=a.indexOf("levels/")||(a="coui://"+a),"DIV"==i.tagName?(s.backgroundImage=t.fileName?"url("+a+")":"none",s.backgroundRepeat="no-repeat",s.backgroundSize=n.backgroundSize?n.backgroundSize:"contain",s.backgroundPosition=n.backgroundPosition?n.backgroundPosition:"center"):i.src=a}onDestroy(){this.content.removeAttribute("data-bind-image"),this._signalAliasChanged&&(this._signalAliasChanged.removeAll(),this._signalAliasChanged=null),this._signalDataUpdated&&(this._signalDataUpdated.removeAll(),this._signalDataUpdated=null),this._dataModel=null,this.imageData=null,this.content.style.backgroundImage="",super.onDestroy()}}t.ImageControl=a}.apply(t,s),void 0===n||(e.exports=n)},8323:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ImageHandler=class{update(e,t){e.control.updateData(t)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},581:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{}t.VideoControl=s}.apply(t,s),void 0===n||(e.exports=n)},117:(e,t,i)=>{var s,n;s=[i,t,i(7774)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ListItem{get focusable(){return this.enabled&&this.visible}}t.GridItem=s}.apply(t,s),void 0===n||(e.exports=n)},5198:(e,t,i)=>{var s,n;s=[i,t,i(3008),i(5542),i(227),i(8674),i(9586),i(4389),i(6749)],n=function(e,t,i,s,n,a,o,r,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class h extends r.SimpleList{constructor(){super(...arguments),this.itemsKeyArray=[],this.boundItemsCount=8,this.itemsInRow=1,this.disableSelect=!1,this.gridStartIndent=Number(this.content.dataset.gridStartIndent),this.gridEndIndent=Number(this.content.dataset.gridEndIndent),this._firstScroll=!0,this.onCountChange=()=>{this._signalCountChanged&&this._signalCountChanged.dispatch()},this.onScroll=()=>{this.onScrollImpl()},this.onItemsCountChanged=()=>{const{slider:e,items:t}=this;if(!this.activated)return e.visible=!1,void this.signalActivate.add(this.onItemsCountChanged);let i=!0,s=!1;if(t.size>0&&t.forEach((e=>{i&&!e.activated&&(i=!1,e.signalActivate.add(this.onItemsCountChanged)),s=s||e.activated})),s){let t=!1;t=this.isHorizontal?this.container.offsetWidth>0&&this.container.scrollWidth>this.container.offsetWidth+o._vhToPx(1+this.gridStartIndent+this.gridEndIndent):this.container.offsetHeight>0&&this.container.scrollHeight>this.container.offsetHeight+o._vhToPx(1+this.gridStartIndent+this.gridEndIndent),e.visible!=t&&(e.visible=t),this.updateScroll()}else e.visible=!1},this.scrollToElement=(e,t=.5)=>{if(this.isHorizontal&&this.containerWidth<=0||!this.isHorizontal&&this.containerHeight<=0)return;let i;this._firstScroll&&(t=0,this._firstScroll=!1);const s=o._vhToPx((this.gridStartIndent?this.gridStartIndent:0)+1),n=o._vhToPx((this.gridEndIndent?this.gridEndIndent:0)+1);if(this.isHorizontal){const t=Math.ceil(this.container.scrollLeft);e.offsetLeft-s<t?i=Math.max(e.offsetLeft-s,0):e.offsetLeft+s+n+e.offsetWidth>t+this.container.offsetWidth&&(i=Math.min(e.offsetLeft+s+n+e.offsetWidth-this.container.offsetWidth,this.containerWidth))}else{const t=Math.ceil(this.container.scrollTop);e.offsetTop-s<t?i=Math.max(e.offsetTop-s,0):e.offsetTop+s+n+e.offsetHeight>t+this.container.offsetHeight&&(i=Math.min(e.offsetTop+s+n+e.offsetHeight-this.container.offsetHeight,this.containerHeight))}null!=i&&(this._scrollTween&&(this._scrollTween.kill(),this._scrollTween=null),0==t?this.containerScroll=i:this._scrollTween=a.TweenMax.to(this,t,{containerScroll:i,ease:a.Power3.easeOut}))},this.scrollToRelativeValue=(e,t=0)=>{this.slider&&(a.TweenMax.killTweensOf(this.slider),t>0?a.TweenMax.to(this.slider,t,{userRelativeValue:e,ease:a.Power3.easeOut}):this.slider.userRelativeValue=e,this._firstScroll=!1)}}init(){super.init(),this.initStyles()}initElements(){super.initElements(),this.registerOptionalElements({gridStartIndentElement:"container.gridStartIndent",gridEndIndentElement:"container.gridEndIndent"}),this.registerOptionalControls({paginator:"paginator",slider:"slider",sliderWrapper:"sliderWrapper.slider",containerControl:"container"}),this.items=new Map,this.content.dataset.boundItemsCount&&(this.boundItemsCount=+this.content.dataset.boundItemsCount),this.sliderWrapper&&(this.slider=this.sliderWrapper),this.slider&&(this.slider.visible=!1),this.contentContainer&&this.contentContainer.control&&(this.containerControl=this.contentContainer.control),this.content.dataset.disableSelect&&(this.disableSelect="true"==this.content.dataset.disableSelect),this.content.dataset.itemsInRow&&(this.itemsInRow=+this.content.dataset.itemsInRow);const e=this.contentContainer?this.contentContainer.children:this.container.children;for(let t=0;t<e.length;t++){const i=e[t].control,s=Number(e[t].id);i.setup(this,s),this.items.set(s,i),this._signalCountChanged&&this._signalCountChanged.dispatch()}}addSeveralItems(e){super.addSeveralItems(e),this._signalCountChanged&&(this.waitUpdateDispose&&(this.waitUpdateDispose(),this.waitUpdateDispose=null),this.waitUpdateDispose=l.waitSeveralFrames(this.onCountChange))}updateSeveralItems(e,t){super.updateSeveralItems(e,t),this._signalCountChanged&&(this.waitUpdateDispose&&(this.waitUpdateDispose(),this.waitUpdateDispose=null),this.waitUpdateDispose=l.waitSeveralFrames(this.onCountChange))}initStyles(){this.gridStartIndent&&this.gridStartIndentElement&&(this.isHorizontal?(this.gridStartIndentElement.style.width=this.gridStartIndent+"vh",this.gridStartIndentElement.style.height="100%"):(this.gridStartIndentElement.style.height=this.gridStartIndent+"vh",this.gridStartIndentElement.style.width="100%")),this.gridEndIndent&&this.gridEndIndentElement&&(this.isHorizontal?(this.gridEndIndentElement.style.width=this.gridEndIndent+"vh",this.gridEndIndentElement.style.height="100%"):(this.gridEndIndentElement.style.height=this.gridEndIndent+"vh",this.gridEndIndentElement.style.width="100%"))}initListeners(){const{slider:e,paginator:t,content:i}=this;e&&(e.removeMouseWheel(i),e.addMouseWheel(i),e.signalValueChanged.add(this.onScroll),this.signalCountChanged.add(this.onItemsCountChanged)),t&&(t.removeMouseWheel(),t.addMouseWheel(i))}onScrollImpl(){const{slider:e,container:t,_signalScrollValueChanged:i,containerWidth:s,containerHeight:n}=this;e.visible&&(e.isHorizontal?t.scrollLeft=e.relativeValue*s:t.scrollTop=e.relativeValue*n),i&&i.dispatch()}updateScroll(){const{slider:e,items:t,boundItemsCount:i,itemsInRow:s}=this,n=t.size,a=Math.max(Math.ceil(n/s)-i,0);if(e.setMinMax(NaN,a),e.visible=e.visible&&a>0,e.visible){const t=1/a;e.wheelStep=t;const i=e;i&&(i.scrollStep=t),this.alignScroll()}}scrollByDelta(e){this.slider.scrollByDelta(e)}clear(){const{_selectedItem:e,_signalCountChanged:t,_signalItemSelected:i,container:s,items:n}=this;n.size>0&&(super.clear(),this.scrollToBegin(),this.itemsKeyArray=[],this._overedItem=null,this._selectedItem=null,this._firstScroll=!0,this._signalActivate&&this._signalActivate.remove(this.onItemsCountChanged),this._signalCountChanged&&this._signalCountChanged.dispatch())}addItem(e){const{items:t,itemsKeyArray:i,itemTemplateName:s,_signalCountChanged:a}=this,o=this.contentContainer?this.contentContainer:this.container,r=e.id;let l=this.getItemById(r);l?l.update(e):(l=n.Factory.createChildControl(s,o),l.setup(this,r),l.update(e),t.set(r,l),i.push(r),a&&a.dispatch())}removeItemById(e){const{items:t,itemsKeyArray:i,_signalCountChanged:s}=this,n=t.get(e);if(n){const a=i.findIndex((t=>t==e));i.splice(a,1),n.destroy(),t.delete(e),s&&s.dispatch()}else console.warn(`Can't remove element with id ${e}`)}getItemsCount(){return this.itemsKeyArray.length}getSelectedItemId(){const{_selectedItem:e}=this;return e?e.itemId:-1}setSelectedItemById(e,t=!1,i=!1){const{items:s}=this,n=s.get(e);this.setSelectedItem(n,t,i)}unselectCurrentItem(e=!1){this._selectedItem&&(this._selectedItem.unselect(),this._selectedItem=null)}setSelectedItem(e,t=!0,i=!0){if(this.disableSelect)return;const{_selectedItem:n,_signalItemSelected:a}=this;n!=e&&(n&&n.unselect(),this._selectedItem=e,e&&(e.select(),i&&this.dispatchExternalEvent(s.ExternalEvent.item_selected,e.itemId)),a&&a.dispatch(this._selectedItem))}onElementFocused(e){const{_signalItemFocused:t}=this;t&&t.dispatch(e),this.dispatchExternalEvent(s.ExternalEvent.item_focused,e.itemId)}onElementUnfocused(e){const{_signalItemUnfocused:t}=this;t&&t.dispatch(e),this.dispatchExternalEvent(s.ExternalEvent.item_unfocused,e.itemId)}getItemById(e){return this.items.get(e)}getOveredItemId(){const{_overedItem:e}=this;return e?e.itemId:-1}setOveredItem(e){this._overedItem!=e&&(this._overedItem=e,this.dispatchExternalEvent(s.ExternalEvent.item_overed,e.itemId))}clearOveredItem(){const e=this._overedItem?this._overedItem.itemId:0;this.dispatchExternalEvent(s.ExternalEvent.item_unovered,e),this._overedItem=null}enableItemById(e,t){const i=this.getItemById(e);i&&(i.enabled=t)}toggleItemModeById(e,t,i){const s=this.getItemById(e);s&&s.enableClass(t,i)}scrollToBegin(){const{slider:e}=this;e&&(e.userValue=e.min)}scrollToEnd(){const{slider:e}=this;e&&(e.userValue=e.max)}set containerScroll(e){this.isHorizontal?this.container.scrollLeft=e:this.container.scrollTop=e,this.slider&&this.alignScroll(),this._signalScrollValueChanged&&this._signalScrollValueChanged.dispatch()}get containerScroll(){return this.isHorizontal?this.container.scrollLeft:this.container.scrollTop}alignScroll(){const e=this.isHorizontal?this.containerWidth:this.containerHeight;this.slider.setRelativeValueSilent(this.containerScroll/e)}onDestroy(){const{slider:e,paginator:t,content:i}=this;this.waitUpdateDispose&&(this.waitUpdateDispose(),this.waitUpdateDispose=null),e&&(e.signalValueChanged.remove(this.onScroll),this.signalCountChanged.remove(this.onItemsCountChanged),e.removeMouseWheel(i)),t&&t.removeMouseWheel(),this._signalActivate&&this._signalActivate.remove(this.onItemsCountChanged),this._signalCountChanged&&(this._signalCountChanged.removeAll(),this._signalCountChanged=null),this._signalListCleared&&(this._signalListCleared.removeAll(),this._signalListCleared=null),this._signalItemSelected&&(this._signalItemSelected.removeAll(),this._signalItemSelected=null),this._signalItemFocused&&(this._signalItemFocused.removeAll(),this._signalItemFocused=null),this._signalItemUnfocused&&(this._signalItemUnfocused.removeAll(),this._signalItemUnfocused=null),this._signalScrollValueChanged&&(this._signalScrollValueChanged.removeAll(),this._signalScrollValueChanged=null),this.slider&&a.TweenMax.killTweensOf(this.slider),super.onDestroy()}get firstScroll(){return this._firstScroll}get selectionDisabled(){return this.disableSelect}get containerElement(){return this.container}get selectedItem(){return this._selectedItem}get isHorizontal(){if(this.slider)return this.slider.isHorizontal}get containerWidth(){const{container:e}=this;return e.scrollWidth-e.offsetWidth}get containerHeight(){const{container:e}=this;return e.scrollHeight-e.offsetHeight}get signalItemFocused(){return this._signalItemFocused||(this._signalItemFocused=new i.Signal),this._signalItemFocused}get signalItemUnfocused(){return this._signalItemUnfocused||(this._signalItemUnfocused=new i.Signal),this._signalItemUnfocused}get signalItemSelected(){return this._signalItemSelected||(this._signalItemSelected=new i.Signal),this._signalItemSelected}get signalCountChanged(){return this._signalCountChanged||(this._signalCountChanged=new i.Signal),this._signalCountChanged}get signalListCleared(){return this._signalListCleared||(this._signalListCleared=new i.Signal),this._signalListCleared}get signalScrollValueChanged(){return this._signalScrollValueChanged||(this._signalScrollValueChanged=new i.Signal),this._signalScrollValueChanged}}t.ListBox=h}.apply(t,s),void 0===n||(e.exports=n)},7774:(e,t,i)=>{var s,n;s=[i,t,i(227),i(3008),i(943)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.SimpleListItem{constructor(){super(...arguments),this._needScroll=!0,this._focusOnSelect=!0,this.onDestroyTimeout=()=>{this._signalDestroy.dispatch(this),window.clearTimeout(this._destroyId)},this.onMouseOver=()=>{this.onMouseOverImpl()},this.onMouseOut=()=>{this.onMouseOutImpl()},this.onMouseDown=e=>{0==e.button&&this.trigger()}}init(){this._selected=this.content.classList.contains("Selected"),this._focusOnHover="true"==this.content.dataset.focusOnHover,this._selectOnFocus="true"==this.content.dataset.selectOnFocus,this.content.dataset.focusOnSelect&&(this._focusOnSelect="true"==this.content.dataset.focusOnSelect),super.init(),this.focused&&this.content.classList.add("Focused")}setup(e,t){this.parentList=e,this._itemId=t,this.content.id=`${this.content.id}_${t}`,this.onSetupCompleted()}onSetupCompleted(){}update(e){this._dataModel=e,this.updateData()}updateData(){this.text=this.dataModel.text}setDestroyTimeout(e){this._destroyId=window.setTimeout(this.onDestroyTimeout,e)}get itemId(){return this._itemId}get needScroll(){return this._needScroll}initElements(){this.registerOptionalElements("label")}initListeners(){this.addListener("mouseover",this.onMouseOver),this.addListener("mouseout",this.onMouseOut),this.addListener("mousedown",this.onMouseDown)}onMouseOverImpl(){this._isMouseOvered=!0,this.parentList.setOveredItem(this),this._focusOnHover&&(this._needScroll=!1,this.focus(),this._needScroll=!0)}onMouseOutImpl(){this._isMouseOvered=!1,this._focusOnHover&&this.unfocus(),this.parentList.clearOveredItem()}trigger(){this.parentList.setSelectedItem(this)}select(){this.content&&!this.selected&&(this._selected=!0,this.content.classList.add("Selected"),this.onSelect())}onSelect(){}unselect(){this.selected&&(this._selected=!1,this.content.classList.remove("Selected"),this.onUnselect())}onUnselect(){}focus(){this.focused||(super.focus(),this.content.classList.add("Focused"),this.parentList.onElementFocused(this),this._selectOnFocus&&this.select())}unfocus(){this.focused&&(super.unfocus(),this.content.classList.remove("Focused"),this.parentList.onElementUnfocused(this))}onDestroy(){this._signalDestroy&&(this._signalDestroy.removeAll(),this._signalDestroy=null),window.clearTimeout(this._destroyId),this._dataModel=null,super.onDestroy()}get signalDestroy(){return this._signalDestroy||(this._signalDestroy=new s.Signal),this._signalDestroy}getDebugNavigationStructure(){return`"id":${this.controlId},"focusable": "true","focused":${this.focused?"true":"false"},"name":"${this.controlName}"`}get focusOnHover(){return this._focusOnHover}get focusOnSelect(){return this._focusOnSelect}get focusable(){return this.enabled&&this.visible}get selected(){return this._selected}get dataModel(){return this._dataModel}get text(){return this._text}set text(e){this._text!=e&&this.label&&(this._text=e,this.label.innerHTML=i.translate(e))}get listBox(){return this.parentList}}t.ListItem=a}.apply(t,s),void 0===n||(e.exports=n)},3521:(e,t,i)=>{var s,n;s=[i,t,i(2209),i(2993)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.NavigationElement{constructor(){super(),this._internalFocus=!0,this._focusWithoutElements=!1,this.arrangePendingElements=()=>{if(this._pendingElements.size>0){const e=new Set;for(const t of this._pendingElements)t.isNavigationReady&&e.add(t);this.arrangePendingElementsImpl(e);for(const t of e)this._pendingElements.delete(t);for(const e of this._pendingElements)e.signalNavigationReady.add(this.arrangePendingElements);let t=null;if(e.size>0){for(const i of e)i.control.focused&&(t=i);t?this.focusElement(this.findElement(t)):this.focusCurrentOrNearest(),this.updateAvailableActionlist()}}},this._pendingElements=new Set}get internalFocus(){return this._internalFocus}set internalFocus(e){this._internalFocus!=e&&(this._internalFocus=e,e?this.focusCurrentOrNearest():this.unfocusElements(),this.updateAvailableActionlist())}unfocusElements(){const e=this.getCurrentElement();e&&e.setFocused(!1)}hasFocusableElements(){for(const e of this._pendingElements)if(e.focusable)return!0;return!1}getCurrentFocusability(){return super.getCurrentFocusability()&&(this._focusWithoutElements||this.hasFocusableElements())}addPendingElement(e){e&&e.setParentContainer(this)&&(this._pendingElements.add(e),this.onPendingElementAdded(),this.updateFocusable())}destroy(){for(const e of this._pendingElements)e.setParentContainer(null);this._pendingElements.clear(),super.destroy()}getCurrentElement(){return this.getCurrentIndex()?this.getCurrentIndex().element:null}onPendingElementAdded(){this._isNavigationReady&&this.focused&&this.arrangePendingElements()}arrangePendingElementsImpl(e){}addElementImpl(e,t){return!1}removeElementImpl(e){return!1}setCurrentIndex(e){return!1}onElementFocused(e){this.control.dispatchExternalEvent(i.NavigationEvent.focused_element_added,e.controlId),this.updateAvailableActionlist()}onElementUnfocused(e){this.control.dispatchExternalEvent(i.NavigationEvent.focused_element_removed,e.controlId),this.updateAvailableActionlist()}addElement(e,t){if(t&&t.isValid()&&e){if(this._isNavigationReady&&this.focused)return!(!e.setParentContainer(this)||!this.addElementImpl(e,t)||(this.focusCurrentOrNearest(),this.updateAvailableActionlist(),this.updateFocusable(),0));if(e.setParentContainer(this)&&this.addElementImpl(e,t))return this.updateFocusable(),!0}return!1}removeElement(e){let t=!1;this._pendingElements&&this._pendingElements.has(e)&&(this._pendingElements.delete(e),t=!0);const i=this.findElement(e);return this.removeElementAt(i)&&(t=!0),t&&(e.setParentContainer(null),this.updateFocusable()),t}removeElementAt(e){if(e&&e.isValid()&&e.element){const t=e.element;if(this.removeElementImpl(e))return t.setFocused(!1),this._isNavigationReady&&this.focused&&(this.focusCurrentOrNearest(),this.updateAvailableActionlist()),!0}return!1}getElement(e){return null}findElement(e){return null}focusCurrentOrNearest(){return!1}resetNavigationCursor(){}focusElement(e){if(this.hasIndex(e)&&e.element&&e.element.focusable){const t=this.getCurrentElement(),i=e.element;if(t!=i){if(!this.setCurrentIndex(e))return!1;t&&t.setFocused(!1)}if(this.focused)return i.setFocused(!0),!0}return!1}hasIndex(e){return!1}getCurrentIndex(){return null}onElementFocusableChanged(e){this.updateFocusable(),this._isNavigationReady&&this.focused&&(e.focused&&!e.focusable&&e.setFocused(!1),this.focusCurrentOrNearest(),this.updateAvailableActionlist())}onElementFocusChangedExternaly(e,t){t?this.focusable&&(this.internalFocus=!0,this.focused||this.control.focus(),this.focusElement(this.findElement(e))):this.focusCurrentOrNearest()}setFocused(e){this.focused!=e&&(super.setFocused(e),this._isNavigationReady&&(this._pendingElements.size>0&&this.arrangePendingElements(),e?this.focusCurrentOrNearest():this.getCurrentElement()&&this.getCurrentElement().setFocused(!1)))}initNavigationElements(){this._focusWithoutElements="true"==this.content.dataset.focusWithoutElements,"false"==this.content.dataset.internalFocus&&(this.internalFocus=!1),super.initNavigationElements()}updateNavigationReady(){if("true"==this.content.dataset.navigationWaitChildrenReady)for(const e of this._pendingElements)if(!e.isNavigationReady)return e.signalNavigationReady.add((()=>{this.updateNavigationReady()})),!1;return super.updateNavigationReady()}onNavigationReady(){this._pendingElements.size>0&&this.arrangePendingElements(),super.onNavigationReady(),this.focused&&this.focusCurrentOrNearest()}getDebugNavigationStructure(){if(this._pendingElements.size>0){let e=`${super.getDebugNavigationStructure()},"pendingChildren":[`,t=!0;for(const i of this._pendingElements)t?t=!1:e+=",",e+=`{${i.getDebugNavigationStructure()}}`;return e+"]"}return super.getDebugNavigationStructure()}}t.NavigationContainer=n}.apply(t,s),void 0===n||(e.exports=n)},2993:(e,t,i)=>{var s,n;s=[i,t,i(2209),i(4260),i(3521),i(3008)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NavigationElement=class{constructor(){this.onVisibilityChanged=()=>{this.updateFocusable()},this.onEnabledChanged=()=>{this.updateFocusable()},this.onControlFocusChanged=()=>{if(this._isFocused!=this._control.focused){if(!this.focusable&&this._control.focused)return;this._parentContainer&&this._parentContainer.onElementFocusChangedExternaly(this,this._control.focused)}},this.initNavigation=()=>{this.initNavigationElements(),this.checkParent(),this.updateNavigationReady()},this._control=null,this._actions=new Map,this._isFocused=!1,this._isFocusable=!1,this._focusEnabled=!0,this._parentContainer=null,this._isNavigationReady=!1}isRoot(){return!1}get focusEnabled(){return this._focusEnabled}set focusEnabled(e){this._focusEnabled!=e&&(this._focusEnabled=e,this.updateFocusable())}get isNavigationReady(){return this._isNavigationReady}get signalNavigationReady(){return this._signalNavigationReady||(this._signalNavigationReady=new a.Signal),this._signalNavigationReady}attachToControl(e){this._control=e,e.dispatchExternalEvent(i.NavigationEvent.set_navigatable,this.isRoot()),this.registerListeners(),this.attachToNavigationParent(),e.activated?this.initNavigation():e.signalActivate.add(this.initNavigation)}registerListeners(){const{control:e}=this;e.signalVisibilityChanged.add(this.onVisibilityChanged),e.signalEnabledChanged.add(this.onEnabledChanged),e.signalFocusedChanged.add(this.onControlFocusChanged)}detach(){if(this._control){this._control.signalVisibilityChanged.remove(this.onVisibilityChanged),this._control.signalEnabledChanged.remove(this.onEnabledChanged),this._control.signalFocusedChanged.remove(this.onControlFocusChanged),this._control.activated||this._control.signalActivate.remove(this.initNavigation);for(const e of this.getAvailableActionlist())this._control.dispatchExternalEvent(i.NavigationEvent.action_disabled,e);this._control=null}}destroy(){this._control&&this._control.signalActivate.remove(this.initNavigation),this._signalNavigationReady&&(this._signalNavigationReady.removeAll(),this._signalNavigationReady=null),this._parentContainer&&this._parentContainer.removeElement(this),this.detach(),this.clearProperties()}clearProperties(){for(const e in this)this[e]=null}attachToNavigationParent(){if(!this._parentContainer){if(this.content.dataset.navigationParent.startsWith("../")){let e=this.control;for(;this.content.dataset.navigationParent.startsWith("../");)e=e.content.parentElement.control,this.content.dataset.navigationParent=this.content.dataset.navigationParent.substr(3);const t=e.searchControl(this.content.dataset.navigationParent);return void(t&&t.navigation instanceof n.NavigationContainer&&t.navigation.addPendingElement(this))}if(""==this.content.dataset.navigationParent){const e=s.searchParentControlByNavigationType(this._control,n.NavigationContainer);return void(e&&e.navigation.addPendingElement(this))}const e=this._control.searchParentControl(this.content.dataset.navigationParent);e&&e.navigation instanceof n.NavigationContainer&&e.navigation.addPendingElement(this)}}initNavigationElements(){}onNavigationReady(){this._isNavigationReady=!0,this.updateFocusable(),this.updateAvailableActionlist(),this._signalNavigationReady&&(this.signalNavigationReady.dispatch(),this.signalNavigationReady.removeAll())}updateNavigationReady(){return this.onNavigationReady(),!0}checkParent(){this._parentContainer||this.content.dataset.optionalNavigation||console.warn("--\x3eNO PARENT! ",this.name)}enableAction(e,t){this._actions.get(e)?this._actions.get(e).enabled!=t&&(this._actions.get(e).enabled=t,t?this._control.dispatchExternalEvent(i.NavigationEvent.action_enabled,e):this._control.dispatchExternalEvent(i.NavigationEvent.action_disabled,e)):console.warn(`Try to ${t?"enable":"disable"} undefined action ${e} in ${this.name} navigation element`)}findAvailableAction(e){return this._actions.has(e)&&this._actions.get(e).enabled?this._actions.get(e):null}getCurrentFocusability(){return this.focusEnabled&&this.control.visible&&this.control.enabled}updateFocusable(){if(this._control){const e=this.getCurrentFocusability();this._isFocusable!=e&&(this._isFocusable=e,this._parentContainer&&this._parentContainer.onElementFocusableChanged(this))}}handleAction(e,t=NaN,s=NaN){const n=this.findAvailableAction(e);n?n.handler?n.handler(this,t,s):this.control.dispatchExternalEvent(i.NavigationEvent.action_triggered,e):console.error("Logic error. Only available actions should be passed here! Passed action:",e)}get control(){return this._control}get name(){return this._control.controlName}get controlId(){return this._control.controlId}get content(){return this._control.content}get focusable(){return this._isFocusable}get focused(){return this._isFocused}get parentContainer(){return this._parentContainer}getDefinedActionlist(){const e=new Set;for(const t of this._actions.keys())e.add(t);return e}getAvailableActionlist(){const e=new Set;for(const[t,i]of this._actions.entries())i.enabled&&e.add(t);return e}setFocused(e){this._isFocused!=e&&(this._isFocused=e,e?(this._control.focus(),this._control.dispatchExternalEvent(i.NavigationEvent.nav_focused),this._parentContainer&&this._parentContainer.onElementFocused(this)):(this._control.unfocus(),this._control.dispatchExternalEvent(i.NavigationEvent.nav_unfocused),this._parentContainer&&this._parentContainer.onElementUnfocused(this)),this.updateAvailableActionlist())}setParentContainer(e){return this._parentContainer!=e&&(this._parentContainer=e,this.content.dataset.navigationParent=e?e.name:"",!0)}setDefinedActionlist(e){this._actions.clear();for(const t of e)this.addDefinedAction(t)}addDefinedAction(e,t=null){this._actions.has(e)?t&&(this._actions.get(e).handler=t):this._actions.set(e,{enabled:!1,handler:t})}setActionHandler(e,t){return!!this._actions.has(e)&&(this._actions.get(e).handler=t,!0)}removeActionHandler(e){this.setActionHandler(e,null)}computeAvailableActionlist(){return this.getDefinedActionlist()}updateAvailableActionlist(){if(!this._isNavigationReady)return;const e=this.computeAvailableActionlist();for(const[t,i]of this._actions)i.handler&&this.enableAction(t,e.has(t))}getDebugNavigationStructure(){return this.control?`"id":${this.controlId},"focusable":${this.focusable?"true":"false"},"focused":${this.focused?"true":"false"},"name":"${this.name}"`:'"id": "NO CONTROL"'}}}.apply(t,s),void 0===n||(e.exports=n)},2209:(e,t,i)=>{var s;s=function(e,t){"use strict";var i,s;Object.defineProperty(t,"__esModule",{value:!0}),(s=t.NavigationEvent||(t.NavigationEvent={})).set_navigatable="set_navigatable",s.nav_focused="nav_focused",s.nav_unfocused="nav_unfocused",s.focused_element_added="focused_element_added",s.focused_element_removed="focused_element_removed",s.action_enabled="action_enabled",s.action_disabled="action_disabled",s.action_triggered="action_triggered",s.debug_message="debug_message",(i=t.NavigationAction||(t.NavigationAction={})).left="grid_left",i.right="grid_right",i.up="grid_up",i.down="grid_down",i.enter="nav_enter",i.back="nav_back",i.buy="nav_buy",i.customize="nav_customize",i.hero_prev="hero_prev",i.hero_next="hero_next",i.tab_prev="tab_prev",i.tab_next="tab_next",i.subtab_prev="subtab_prev",i.subtab_next="subtab_next",i.page_prev="page_prev",i.page_next="page_next",i.leave_squad="leave_squad",i.find_player="find_player",i.accept="accept",i.reject="reject",i.open_options="open_options",i.exit_game="exit_game",i.toggle_esc_menu="toggle_esc_menu",i.select_next_hero="select_next_hero",i.mute_all="mute_all",i.toggle_ready="toggle_ready",i.search="search",i.open_social="open_social",i.horiz_scroll="horiz_scroll",i.vert_scroll="vert_scroll"}.apply(t,[i,t]),void 0===s||(e.exports=s)},9198:(e,t,i)=>{var s,n;s=[i,t,i(4050)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.NavigationStackContainer{isRoot(){return!0}checkParent(){this._parentContainer&&console.warn("--\x3eROOT MUST HAVE NO PARENT! ",this.name)}}t.NavigationRoot=s}.apply(t,s),void 0===n||(e.exports=n)},2666:(e,t,i)=>{var s;s=function(e,t){"use strict";function i(e,t){for(const i of t)e.add(i);return e}function s(e,t,i){const s=Math.min(e.length,i);if(e.length<i){const s=Array();for(let e=0;e<t;e++)s.push(null);for(;e.length<i;)e.push([...s])}else for(;e.length>i;)e.pop();if(i>0)if(e[0].length<t)for(let i=0;i<s;i++)for(;e[i].length<t;)e[i].push(null);else if(e[0].length>t)for(let i=0;i<s;i++)for(;e[i].length<t;)e[i].pop()}function n(e,t,i,s,n,a){for(let o=i;o<=n;o++)for(let i=s;i<=a;i++)e[i][o]=t}function a(e,t=null){const i=Array();if(e.size>0){let a=1e4,o=1e4,r=-1,l=-1;for(const t of e){const e=t.content.getBoundingClientRect();a=Math.min(a,e.x),o=Math.min(o,e.y),r=Math.max(r,e.x+e.width),l=Math.max(l,e.y+e.height)}t||(t=function(e){const t=Array(),i=Array();for(const s of e){const e=s.content.getBoundingClientRect();t.push(e.width),i.push(e.height)}return{x:Math.min(...t),y:Math.min(...i)}}(e)),(t.x<=0||t.y<=0)&&console.error("Creating grid with zero cell size. Probably elements is not ready yet"),s(i,Math.round((r-a)/t.x),Math.round((l-o)/t.y));for(const s of e){const e=s.content.getBoundingClientRect(),r=Math.round((e.x-a)/t.x),l=Math.round((e.y-o)/t.y);n(i,s,r,l,r+Math.round(e.width/t.x)-1,l+Math.round(e.height/t.y)-1)}}return i}function o(e){const t=new Set;for(const i of e)for(const e of i)t.add(e);return t.delete(null),t}function r(e,t){let i=e.parentElement;for(;i;){if(i==t)return!0;i=i.parentElement}return!1}Object.defineProperty(t,"__esModule",{value:!0}),t.intersection=function(e,t){const i=new Set;for(const s of e)t.has(s)&&i.add(s);return i},t.intersect=function(e,t){for(const i of e)t.has(i)&&e.delete(i);return e},t.union=function(e,t){const i=new Set([...e]);for(const e of t)i.add(e);return i},t.unites=i,t.resizeGrid=s,t.fillGrid=n,t.gridToString=function(e){let t="\n";for(const i of e){for(const e of i){const i=(e?e.name:"null")+"     ";i.substr(8),t+=i+" "}t+="\n"}return t},t.createGrid=a,t.getElementsInGrid=o,t.updateGrid=function(e,t,s=null){const n=i(o(e),t);return 0==n.size?Array():a(n,s)},t.getIndicesSortedFromNearest=function(e,t){const i=Array(),s=2*e>=t?t:-1;let n=1;for(let t=e;t!=s;t+=n,n=n<0?1-n:-1-n)i.push(t);if(s==t)for(let s=2*e-t;s>=0;s--)i.push(s);else for(let s=2*(e+1);s<t;s++)i.push(s);return i},t.zIndexSort=function(e,t){const i=e.content,s=t.content;if(r(i,s))return 1;if(r(s,i))return-1;const n=function(e,t){let i=e.parentElement;for(;i;){if(r(t,i))return i;i=i.parentElement}return null}(i,s);if(n){const e=n.children,t=e.length;for(let n=0;n<t;n++){const t=e[n];if(t==i||r(i,t))return-1;if(t==s||r(s,t))return 1}}return console.warn("zIndexSort failed",i.id,s.id),0}}.apply(t,[i,t]),void 0===s||(e.exports=s)},8487:(e,t,i)=>{var s,n;s=[i,t,i(9490),i(8398),i(2209),i(4260)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends s.NavigationGridContainer{constructor(){super(),this._scrollableParent=null,this.addDefinedAction(n.NavigationAction.left,(e=>{this.internalFocus?e.focusElement(e.findLeftFocusableElementCoord()):this.internalFocus=!0})),this.addDefinedAction(n.NavigationAction.right,(e=>{this.internalFocus?e.focusElement(e.findRightFocusableElementCoord()):this.internalFocus=!0})),this.addDefinedAction(n.NavigationAction.up,(e=>{this.internalFocus?e.focusElement(e.findUpFocusableElementCoord()):this.internalFocus=!0})),this.addDefinedAction(n.NavigationAction.down,(e=>{this.internalFocus?e.focusElement(e.findDownFocusableElementCoord()):this.internalFocus=!0}))}initNavigationElements(){if(super.initNavigationElements(),this.content.dataset.noScrollableParent||(this._scrollableParent=a.searchParentControlByType(this.control,i.Grid)),this._scrollableParent&&"true"==this.content.dataset.stickScroll){const e=this._scrollableParent.isHorizontal?n.NavigationAction.horiz_scroll:n.NavigationAction.vert_scroll;this.addDefinedAction(e,((t,i,s)=>{this._scrollableParent.scrollByDelta(e==n.NavigationAction.horiz_scroll?s:-s)}))}}onElementFocused(e){super.onElementFocused(e),this._scrollableParent&&this._scrollableParent.scrollToElement(e.content)}findLeftFocusableElementCoord(){const e=this.getCurrentIndex();for(let t=e.left-1;t>=0;t--)for(let i=e.top;i<=e.bottom;i++){const e=this.getElementAt(t,i);if(e&&e.focusable){let s=1,n=1;for(;this.getElementAt(t-1,i)==e;)t--,s++;for(;this.getElementAt(t,i+n)==e;)n++;return this.getIndex(t,i,s,n)}}return null}findRightFocusableElementCoord(){const e=this.getCurrentIndex();for(let t=e.right+1;t<this.getGridSize().x;t++)for(let i=e.top;i<=e.bottom;i++){const e=this.getElementAt(t,i);if(e&&e.focusable){let s=1,n=1;for(;this.getElementAt(t+s,i)==e;)s++;for(;this.getElementAt(t,i+n)==e;)n++;return this.getIndex(t,i,s,n)}}return null}findUpFocusableElementCoord(){const e=this.getCurrentIndex();for(let t=e.top-1;t>=0;t--)for(let i=e.left;i<=e.right;i++){const e=this.getElementAt(i,t);if(e&&e.focusable){let s=1,n=1;for(;this.getElementAt(i+s,t)==e;)s++;for(;this.getElementAt(i,t-1)==e;)t--,n++;return this.getIndex(i,t,s,n)}}return null}findDownFocusableElementCoord(){const e=this.getCurrentIndex();for(let t=e.bottom+1;t<this.getGridSize().y;t++)for(let i=e.left;i<=e.right;i++){const e=this.getElementAt(i,t);if(e&&e.focusable){let s=1,n=1;for(;this.getElementAt(i+s,t)==e;)s++;for(;this.getElementAt(i,t+n)==e;)n++;return this.getIndex(i,t,s,n)}}return null}computeAvailableActionlist(){const e=super.computeAvailableActionlist();return this.internalFocus&&this.getCurrentElement()&&(this.findRightFocusableElementCoord()||e.delete(n.NavigationAction.right),this.findDownFocusableElementCoord()||e.delete(n.NavigationAction.down),this.findLeftFocusableElementCoord()||e.delete(n.NavigationAction.left),this.findUpFocusableElementCoord()||e.delete(n.NavigationAction.up)),e}}t.CommonGrid=o}.apply(t,s),void 0===n||(e.exports=n)},177:(e,t,i)=>{var s,n;s=[i,t,i(2209),i(7571),i(6),i(4092),i(9490),i(4260),i(6749)],n=function(e,t,i,s,n,a,o,r,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class h extends n.NavigationListContainer{initNavigationElements(){if("false"!=this.content.dataset.isHorizontal?(this._direction=a.EDirection.horizontal,this._actionHelper=new s.ActionHelperForwardBack(this._actions,i.NavigationAction.right,i.NavigationAction.left)):(this._direction=a.EDirection.vertical,this._actionHelper=new s.ActionHelperForwardBack(this._actions,i.NavigationAction.down,i.NavigationAction.up)),this.addDefinedAction(this._actionHelper.backwardAction,(e=>{this.internalFocus?e.focusElement(e.findPrevFocusableElementCoord()):this.internalFocus=!0})),this.addDefinedAction(this._actionHelper.forwardAction,(e=>{this.internalFocus?e.focusElement(e.findNextFocusableElementCoord()):this.internalFocus=!0})),this.content.dataset.navigationNext&&(this.nextAction=this.content.dataset.navigationNext),this.content.dataset.navigationPrev&&(this.prevAction=this.content.dataset.navigationPrev),super.initNavigationElements(),this.content.dataset.noScrollableParent||(this._scrollableParent=r.searchParentControlByType(this.control,o.Grid)),this._scrollableParent&&"true"==this.content.dataset.stickScroll){const e=this._scrollableParent.isHorizontal?i.NavigationAction.horiz_scroll:i.NavigationAction.vert_scroll;this.addDefinedAction(e,((t,s,n)=>{this._scrollableParent.scrollByDelta(e==i.NavigationAction.horiz_scroll?n:-n)}))}}onElementFocused(e){super.onElementFocused(e),this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this.waitFuncDispose=l.waitSeveralFrames((()=>{this._scrollableParent&&e&&e.control&&this._scrollableParent.scrollToElement(e.content)}))}findPrevFocusableElementCoord(){if(this.getCurrentElement())for(let e=this._navigationCursor-1;e>=0;e--){const t=this.getElementAt(e);if(t&&t.focusable)return this.getIndex(e)}return null}findNextFocusableElementCoord(){if(this.getCurrentElement())for(let e=this._navigationCursor+1;e<this._listData.length;e++){const t=this.getElementAt(e);if(t&&t.focusable)return this.getIndex(e)}return null}computeAvailableActionlist(){const e=super.computeAvailableActionlist();return this.internalFocus&&this.getCurrentElement()&&(this.findPrevFocusableElementCoord()||e.delete(this._actionHelper.backwardAction),this.findNextFocusableElementCoord()||e.delete(this._actionHelper.forwardAction)),e}destroy(){this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),super.destroy()}get direction(){return this._direction}set direction(e){this._direction=e}get nextAction(){return this._actionHelper.forwardAction}set nextAction(e){this._actionHelper.forwardAction=e}get prevAction(){return this._actionHelper.backwardAction}set prevAction(e){this._actionHelper.backwardAction=e}}t.CommonList=h}.apply(t,s),void 0===n||(e.exports=n)},347:(e,t,i)=>{var s,n;s=[i,t,i(4260),i(4092),i(5198),i(2209),i(2666),i(1225)],n=function(e,t,i,s,n,a,o,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class l extends r.NavigationItemsGrid{constructor(){super(),this._actionSelectItem=a.NavigationAction.enter,this._actionLeft=a.NavigationAction.left,this._actionRight=a.NavigationAction.right,this._actionUp=a.NavigationAction.up,this._actionDown=a.NavigationAction.down,this._selectActionEnabled=!0,this.onListBoxFocusableChanged=()=>{this.updateFocusable()},this.updateElementsCount=()=>{const e=this.listBox.getItemsCount(),t=new Set;for(let i=0;i<e;i++){const e=this.listBox.itemsKeyArray[i],s=this.listBox.getItemById(e);s.activated?t.add(s):s.signalActivate.add(this.updateElementsCount)}this._listSize=t.size,this._listSize>0?this._gridData=o.createGrid(t):this._gridData=Array();const i=this.getCurrentElement();if(i&&t.has(i)){const e=this.findElement(i);this._navigationCursor={x:e.x,y:e.y}}if(this._pendingFocusedElement){const e=this.findElement(this._pendingFocusedElement);this.focusElement(e)&&(this._pendingFocusedElement=null)}this.focusCurrentOrNearest(),this.updateAvailableActionlist(),this.updateFocusable()},this.onElementFocused=e=>{e.focusOnSelect&&this.selectEnabled||this.setFocusedElement(e)},this.onListCleared=()=>{this._scrollingElement=null},this.onElementSelected=e=>{e.focusOnSelect&&this.setFocusedElement(e)},this._direction=s.EDirection.bidirectional}registerListeners(){super.registerListeners(),this.listBox=i.searchParentControlByType(this.control,n.ListBox),this.listBox.signalCountChanged.add(this.updateElementsCount),this.listBox.signalListCleared.add(this.onListCleared),this.listBox.signalItemFocused.add(this.onElementFocused),this.listBox.signalItemSelected.add(this.onElementSelected),this.listBox.signalVisibilityChanged.add(this.onListBoxFocusableChanged),this.listBox.signalEnabledChanged.add(this.onListBoxFocusableChanged)}initNavigationElements(){if(this.content.dataset.actionLeft&&(this._actionLeft=this.content.dataset.actionLeft),this.content.dataset.actionRight&&(this._actionRight=this.content.dataset.actionRight),this.content.dataset.actionUp&&(this._actionUp=this.content.dataset.actionUp),this.content.dataset.actionDown&&(this._actionDown=this.content.dataset.actionDown),this.content.dataset.actionSelectItem&&(this._actionSelectItem=this.content.dataset.actionSelectItem),"true"==this.content.dataset.disableActionSelect&&(this.selectEnabled=!1),"true"==this.content.dataset.isHorizontal&&(this._direction=s.EDirection.horizontal),"true"==this.content.dataset.isVertical&&(this._direction=s.EDirection.vertical),"true"==this.content.dataset.stickScroll){const e=this.listBox.isHorizontal?a.NavigationAction.horiz_scroll:a.NavigationAction.vert_scroll;this.addDefinedAction(e,((t,i,s)=>{this.listBox.scrollByDelta(e==a.NavigationAction.horiz_scroll?s:-s)}))}this._direction!=s.EDirection.bidirectional&&this._direction!=s.EDirection.horizontal||(this.addDefinedAction(this._actionLeft,(e=>{this.internalFocus?e.focusElement(e.findLeftFocusableElementCoord()):this.internalFocus=!0})),this.addDefinedAction(this._actionRight,(e=>{this.internalFocus?e.focusElement(e.findRightFocusableElementCoord()):this.internalFocus=!0}))),this._direction!=s.EDirection.bidirectional&&this._direction!=s.EDirection.vertical||(this.addDefinedAction(this._actionUp,(e=>{this.internalFocus?e.focusElement(e.findUpFocusableElementCoord()):this.internalFocus=!0})),this.addDefinedAction(this._actionDown,(e=>{this.internalFocus?e.focusElement(e.findDownFocusableElementCoord()):this.internalFocus=!0}))),this.addDefinedAction(this._actionSelectItem,(e=>{e.triggerCurrentElement()})),super.initNavigationElements(),this.updateListBoxData()}updateListBoxData(){this.updateElementsCount()}focusElement(e){return!(this.listBox.selectedItem&&!this.listBox.selectedItem.activated||!super.focusElement(e)||(this.scrollToElement(e.element),0))}scrollToElement(e){e.needScroll&&this._scrollingElement!=e&&(this._scrollingElement=e,this.listBox.scrollToElement(e.content))}setFocusedElement(e){const t=this.findElement(e);this.focusElement(t)?this.updateAvailableActionlist():this.setPendingFocusedElement(e)}setPendingFocusedElement(e){this._pendingFocusedElement=e}focusCurrentOrNearest(){if(!this.internalFocus)return!1;if(!this._isNavigationReady||!this.focused)return!1;if(this.focusElement(this.getCurrentIndex()))return!0;const e=this.getGridSize();for(let t=0;t<e.x;t++)for(let i=0;i<e.y;i++)if(this.focusElement(this.getIndex(t,i)))return!0;return!1}computeAvailableActionlist(){const e=super.computeAvailableActionlist();return this.internalFocus&&this.getCurrentElement()&&(this.findRightFocusableElementCoord()||e.delete(a.NavigationAction.right),this.findDownFocusableElementCoord()||e.delete(a.NavigationAction.down),this.findLeftFocusableElementCoord()||e.delete(a.NavigationAction.left),this.findUpFocusableElementCoord()||e.delete(a.NavigationAction.up)),this._selectActionEnabled||e.delete(this._actionSelectItem),e}getCurrentFocusability(){return this.focusEnabled&&this.listBox&&this.listBox.visible&&this.listBox.enabled&&this._listSize>0}destroy(){this.listBox&&(this.listBox.signalCountChanged.remove(this.updateElementsCount),this.listBox.signalListCleared.remove(this.onListCleared),this.listBox.signalItemFocused.remove(this.onElementFocused),this.listBox.signalItemSelected.remove(this.onElementSelected),this.listBox.signalVisibilityChanged.remove(this.onListBoxFocusableChanged),this.listBox.signalEnabledChanged.remove(this.onListBoxFocusableChanged)),this._pendingFocusedElement=null,super.destroy()}get selectEnabled(){return this._selectActionEnabled}set selectEnabled(e){this._selectActionEnabled!=e&&(this._selectActionEnabled=e,this.updateAvailableActionlist())}}t.ItemsGridContainer=l}.apply(t,s),void 0===n||(e.exports=n)},1769:(e,t,i)=>{var s,n;s=[i,t,i(4260),i(4092),i(5198),i(7571),i(2209),i(9008)],n=function(e,t,i,s,n,a,o,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const l=e=>e.content.getBoundingClientRect().x,h=e=>e.content.getBoundingClientRect().y;class d extends r.NavigationItemsList{constructor(){super(),this._actionSelectItem=o.NavigationAction.enter,this._selectActionEnabled=!0,this.onListBoxFocusableChanged=()=>{this.updateFocusable()},this.updateElementsCount=()=>{const e=this.listBox.getItemsCount(),t=new Set;for(let i=0;i<e;i++){const e=this.listBox.itemsKeyArray[i],s=this.listBox.getItemById(e);s.activated?t.add(s):s.signalActivate.add(this.updateElementsCount)}const i=this.getCurrentElement();if(this._listData=Array(),t.size>0&&(this._listData.push(...t),this._direction==s.EDirection.horizontal?this._listData.sort(((e,t)=>l(e)-l(t))):this._direction==s.EDirection.vertical&&this._listData.sort(((e,t)=>h(e)-h(t)))),i&&t.has(i)&&(this._navigationCursor=this.findElement(i).index),this._pendingFocusedElement){const e=this.findElement(this._pendingFocusedElement);this.focusElement(e)&&(this._pendingFocusedElement=null)}this.focusCurrentOrNearest(),this.updateAvailableActionlist(),this.updateFocusable()},this.onElementFocused=e=>{this.setFocusedElement(e)},this.onListCleared=()=>{this._scrollingElement=null},this.onElementSelected=e=>{e.focusOnSelect&&this.onElementFocused(e)},this._direction=s.EDirection.undefined}registerListeners(){super.registerListeners(),this.listBox=i.searchParentControlByType(this.control,n.ListBox),this.listBox.signalCountChanged.add(this.updateElementsCount),this.listBox.signalListCleared.add(this.onListCleared),this.listBox.signalItemFocused.add(this.onElementFocused),this.listBox.signalItemSelected.add(this.onElementSelected),this.listBox.signalVisibilityChanged.add(this.onListBoxFocusableChanged),this.listBox.signalEnabledChanged.add(this.onListBoxFocusableChanged)}initNavigationElements(){if(this._focusWithoutElements="true"==this.content.dataset.focusWithoutElements,"false"==this.content.dataset.internalFocus&&(this.internalFocus=!1),"false"!=this.content.dataset.isHorizontal?(this._direction=s.EDirection.horizontal,this._actionHelper=new a.ActionHelperForwardBack(this._actions,o.NavigationAction.right,o.NavigationAction.left)):(this._direction=s.EDirection.vertical,this._actionHelper=new a.ActionHelperForwardBack(this._actions,o.NavigationAction.down,o.NavigationAction.up)),this.content.dataset.actionNext&&(this.nextAction=this.content.dataset.actionNext),this.content.dataset.actionPrev&&(this.prevAction=this.content.dataset.actionPrev),this.content.dataset.actionSelectItem&&(this._actionSelectItem=this.content.dataset.actionSelectItem),"true"==this.content.dataset.disableActionSelect&&(this.selectEnabled=!1),"true"==this.content.dataset.stickScroll){const e=this.listBox.isHorizontal?o.NavigationAction.horiz_scroll:o.NavigationAction.vert_scroll;this.addDefinedAction(e,((t,i,s)=>{this.listBox.scrollByDelta(e==o.NavigationAction.horiz_scroll?s:-s)}))}this.addDefinedAction(this._actionHelper.backwardAction,(e=>{this.internalFocus?e.focusElement(e.findPrevFocusableElementCoord()):this.internalFocus=!0})),this.addDefinedAction(this._actionHelper.forwardAction,(e=>{this.internalFocus?e.focusElement(e.findNextFocusableElementCoord()):this.internalFocus=!0})),this.addDefinedAction(this._actionSelectItem,(e=>{e.triggerCurrentElement()})),super.initNavigationElements(),this.updateListBoxData()}updateListBoxData(){this.updateElementsCount()}focusElement(e){return!(this.listBox.selectedItem&&!this.listBox.selectedItem.activated||!super.focusElement(e)||(this.scrollToElement(e.element),0))}scrollToElement(e){e.needScroll&&this._scrollingElement!=e&&(this._scrollingElement=e,this.listBox.scrollToElement(e.content))}setFocusedElement(e){const t=this.findElement(e);this.focusElement(t)?this.updateAvailableActionlist():this.setPendingFocusedElement(e)}setPendingFocusedElement(e){this._pendingFocusedElement=e}findPrevFocusableElementCoord(){if(this.getCurrentElement())for(let e=this._navigationCursor-1;e>=0;e--){const t=this.getElementAt(e);if(t&&t.focusable)return this.getIndex(e)}return null}findNextFocusableElementCoord(){if(this.getCurrentElement())for(let e=this._navigationCursor+1;e<this._listData.length;e++){const t=this.getElementAt(e);if(t&&t.focusable)return this.getIndex(e)}return null}computeAvailableActionlist(){const e=super.computeAvailableActionlist();return this.internalFocus&&this.getCurrentElement()&&(this.findPrevFocusableElementCoord()||e.delete(this._actionHelper.backwardAction),this.findNextFocusableElementCoord()||e.delete(this._actionHelper.forwardAction)),this._selectActionEnabled||e.delete(this._actionSelectItem),e}hasFocusableElements(){return this.listBox&&this.listBox.visible&&this.listBox.enabled&&this.listBox.getItemsCount()>0}getCurrentFocusability(){return this.focusEnabled&&(this._focusWithoutElements||this.hasFocusableElements())}destroy(){this.listBox&&(this.listBox.signalCountChanged.remove(this.updateElementsCount),this.listBox.signalListCleared.remove(this.onListCleared),this.listBox.signalItemFocused.remove(this.onElementFocused),this.listBox.signalItemSelected.remove(this.onElementSelected),this.listBox.signalVisibilityChanged.remove(this.onListBoxFocusableChanged),this.listBox.signalEnabledChanged.remove(this.onListBoxFocusableChanged)),this._pendingFocusedElement=null,super.destroy()}get selectEnabled(){return this._selectActionEnabled}set selectEnabled(e){this._selectActionEnabled!=e&&(this._selectActionEnabled=e,this.updateAvailableActionlist())}get nextAction(){return this._actionHelper.forwardAction}set nextAction(e){this._actionHelper.forwardAction=e}get prevAction(){return this._actionHelper.backwardAction}set prevAction(e){this._actionHelper.backwardAction=e}}t.ItemsListContainer=d}.apply(t,s),void 0===n||(e.exports=n)},8398:(e,t,i)=>{var s,n;s=[i,t,i(3521),i(1652),i(2666)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends i.NavigationContainer{constructor(){super(),this._gridData=Array(),this._navigationCursor={x:0,y:0}}updateNavigationReady(){if("true"==this.content.dataset.navigationWaitChildrenReady){const e=n.getElementsInGrid(this._gridData);for(const t of e)if(!t.isNavigationReady)return t.signalNavigationReady.add((()=>{this.updateNavigationReady()})),!1}return super.updateNavigationReady()}hasFocusableElements(){if(super.hasFocusableElements())return!0;const e=n.getElementsInGrid(this._gridData);for(const t of e)if(t.focusable)return!0;return!1}destroy(){this.clear(),super.destroy()}arrangePendingElementsImpl(e){if(e.size>0){const t=this.getCurrentElement();if(this._gridData=n.updateGrid(this._gridData,e),t){const e=this.findElement(t);this._navigationCursor={x:e.x,y:e.y}}}}getGridSize(){return this._gridData.length>0?{x:this._gridData[0].length,y:this._gridData.length}:{x:0,y:0}}clear(){const e=n.getElementsInGrid(this._gridData);for(const t of e)this.removeElement(t);this._gridData=Array()}addElementImpl(e,t){const i=t;if(i){const t=this.getGridSize();return(i.right>=t.x||i.bottom>=t.y)&&n.resizeGrid(this._gridData,Math.max(i.right+1,t.x),Math.max(i.bottom+1,t.y)),n.fillGrid(this._gridData,e,i.left,i.top,i.right,i.bottom),!0}return!1}removeElementImpl(e){const t=e;return!(!t||!t.isValid()||(n.fillGrid(this._gridData,null,t.left,t.top,t.right,t.bottom),0))}addElementAt(e,t,i,s=1,n=1){return this.addElement(e,this.getIndex(t,i,s,n))}setCurrentIndex(e){if(this.hasIndex(e)){const t=e;if(this._navigationCursor.x!=t.x||this._navigationCursor.y!=t.y)return this._navigationCursor={x:t.x,y:t.y},!0}return!1}getElementAt(e,t){return this.getElement(this.getIndex(e,t))}getElement(e){if(this.hasIndex(e)){const t=e;return this._gridData[t.y][t.x]}return null}getElementsInArea(e,t,i,s){return this.getElements(this.getIndex(e,t,i,s))}getElements(e){const t=new Set;if(this.hasIndex(e)){const i=e;for(let e=i.left;e<=i.right;e++)for(let s=i.top;s<=i.bottom;s++)t.add(this._gridData[s][e]);t.delete(null)}return t}findElement(e){if(e){const t=this.getGridSize();for(let i=0;i<t.x;i++)for(let s=0;s<t.y;s++)if(this._gridData[s][i]==e){let n=0,a=0;for(let a=i;a<t.x&&this._gridData[s][a]==e;a++,n++);for(let n=s;n<t.y&&this._gridData[n][i]==e;n++,a++);return this.getIndex(i,s,n,a)}}return null}resetNavigationCursor(){this._navigationCursor={x:0,y:0}}focusCurrentOrNearest(){if(!this.internalFocus)return!1;if(!this._isNavigationReady||!this.focused)return!1;if(this.focusElement(this.getCurrentIndex()))return!0;const e=this.getGridSize();for(let t=0;t<e.x;t++)for(let i=0;i<e.y;i++)if(this.focusElement(this.getIndex(t,i)))return!0;return!1}hasIndex(e){const t=e,i=this.getGridSize();return t&&t.isValid()&&t.container==this&&t.right<i.x&&t.bottom<i.y}getIndex(e,t,i=1,n=1){return new s.GridIndex(this,e,t,i,n)}getCurrentIndex(){let e=this.getIndex(this._navigationCursor.x,this._navigationCursor.y);const t=this.getElement(e);if(t){let i=this._navigationCursor.x,s=this._navigationCursor.y;for(;t==this.getElementAt(i-1,this._navigationCursor.y);)i--;for(;t==this.getElementAt(this._navigationCursor.x,s-1);)s--;let n=this._navigationCursor.x-i+1,a=this._navigationCursor.y-s+1;for(;t==this.getElementAt(i+n,this._navigationCursor.y);)n++;for(;t==this.getElementAt(this._navigationCursor.x,s+a);)a++;e=this.getIndex(i,s,n,a)}return e}getDebugNavigationStructure(){if(0==this._gridData.length)return super.getDebugNavigationStructure();let e=`${super.getDebugNavigationStructure()},"cursor":${JSON.stringify(this._navigationCursor)},"children":{`;const t=new Set,i=this.getGridSize();let s=!0;for(let n=0;n<i.x;n++)for(let a=0;a<i.y;a++){const i=this.getElementAt(n,a);null==i||t.has(i)||(t.add(i),s?s=!1:e+=",",e+=`"${n}x${a}":{${i.getDebugNavigationStructure()}}`)}return e+"}"}}t.NavigationGridContainer=a}.apply(t,s),void 0===n||(e.exports=n)},1139:(e,t,i)=>{var s,n;s=[i,t,i(3521),i(159)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.NavigationContainer{constructor(){super(),this._groupData=new Map}updateNavigationReady(){if("true"==this.content.dataset.navigationWaitChildrenReady)for(const e of this._groupData.values())if(!e.isNavigationReady)return e.signalNavigationReady.add((()=>{this.updateNavigationReady()})),!1;return super.updateNavigationReady()}hasFocusableElements(){if(super.hasFocusableElements())return!0;for(const e of this._groupData.values())if(e.focusable)return!0;return!1}destroy(){for(const e of this._groupData.keys())this.removeElementAt(this.getIndex(e));super.destroy()}arrangePendingElementsImpl(e){for(const t of e)this._groupData.set(t.content.id,t);this.focusCurrentOrNearest()}addElementImpl(e,t){const i=t;return!!i&&(this._groupData.set(i.key,e),!0)}removeElementImpl(e){const t=e;return!(!t||!t.isValid())&&this._groupData.delete(t.key)}addElementAt(e,t){return this.addElement(e,this.getIndex(t))}getElementAt(e){return this.getElement(this.getIndex(e))}getElement(e){if(this.hasIndex(e)){const t=e;return this._groupData.get(t.key)}return null}findElement(e){if(e&&this._groupData)for(const[t,i]of this._groupData)if(i==e)return this.getIndex(t);return null}setFocused(e){this.focused!=e&&(super.setFocused(e),e||this.unfocusElements())}focusCurrentOrNearest(){if(!this.internalFocus)return!1;if(!this._isNavigationReady||!this.focused||0==this._groupData.size)return!1;for(const[e,t]of this._groupData)t.setFocused(t.focusable);return!0}unfocusElements(){for(const[e,t]of this._groupData)t.setFocused(!1)}hasIndex(e){const t=e;return t&&t.isValid()&&t.container==this&&this._groupData.has(t.key)}getIndex(e){return new s.KeyIndex(this,e)}getDebugNavigationStructure(){let e=`${super.getDebugNavigationStructure()},"children":{`,t=!0;for(const[i,s]of this._groupData)t?t=!1:e+=",",e+=`"${i}":{${s.getDebugNavigationStructure()}}`;return e+"}"}}t.NavigationGroupContainer=n}.apply(t,s),void 0===n||(e.exports=n)},1225:(e,t,i)=>{var s,n;s=[i,t,i(6749),i(5607),i(2993)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.NavigationElement{constructor(){super(),this._listSize=0,this._internalFocus=!0,this._gridData=Array(),this._navigationCursor={x:0,y:0}}resetNavigationCursor(){this._navigationCursor={x:0,y:0}}focusCurrentOrNearest(){if(!this.internalFocus)return!1;if(!this._isNavigationReady||!this.focused)return!1;if(this.focusElement(this.getCurrentIndex()))return!0;const e=this.getGridSize();for(let t=0;t<e.x;t++)for(let i=0;i<e.y;i++)if(this.focusElement(this.getIndex(t,i)))return!0;return!1}triggerCurrentElement(){const e=this.getCurrentElement();e&&e.trigger()}focusElement(e){if(this.hasIndex(e)&&e.element&&e.element.focusable){const t=this.getCurrentElement(),i=e.element;if(t!=i){if(!this.setCurrentIndex(e))return!1;t&&t.unfocus()}if(this.focused)return i.focus(),!0}return!1}setCurrentIndex(e){return!(!this.hasIndex(e)||this._navigationCursor.x==e.x&&this._navigationCursor.y==e.y||(this._navigationCursor={x:e.x,y:e.y},0))}findLeftFocusableElementCoord(){const e=this.getCurrentIndex();for(let t=e.left-1;t>=0;t--)for(let i=e.top;i<=e.bottom;i++){const e=this.getElementAt(t,i);if(e&&e.focusable){let s=1,n=1;for(;this.getElementAt(t-s,i)==e;)t--,s++;for(;this.getElementAt(t,i+n)==e;)n++;return this.getIndex(t,i,s,n)}}return null}findRightFocusableElementCoord(){const e=this.getCurrentIndex();for(let t=e.right+1;t<this.getGridSize().x;t++)for(let i=e.top;i<=e.bottom;i++){const e=this.getElementAt(t,i);if(e&&e.focusable){let s=1,n=1;for(;this.getElementAt(t+s,i)==e;)s++;for(;this.getElementAt(t,i+n)==e;)n++;return this.getIndex(t,i,s,n)}}return null}findUpFocusableElementCoord(){const e=this.getCurrentIndex();for(let t=e.top-1;t>=0;t--)for(let i=e.left;i<=e.right;i++){const e=this.getElementAt(i,t);if(e&&e.focusable){let s=1,n=1;for(;this.getElementAt(i+s,t)==e;)s++;for(;this.getElementAt(i,t-1)==e;)t--,n++;return this.getIndex(i,t,s,n)}}return null}findDownFocusableElementCoord(){const e=this.getCurrentIndex();for(let t=e.bottom+1;t<this.getGridSize().y;t++)for(let i=e.left;i<=e.right;i++){const e=this.getElementAt(i,t);if(e&&e.focusable){let s=1,n=1;for(;this.getElementAt(i+s,t)==e;)s++;for(;this.getElementAt(i,t+n)==e;)n++;return this.getIndex(i,t,s,n)}}return null}findElement(e){if(e){const t=this.getGridSize();for(let i=0;i<t.x;i++)for(let s=0;s<t.y;s++)if(this._gridData[s][i]==e){let n=0,a=0;for(let a=i;a<t.x&&this._gridData[s][a]==e;a++,n++);for(let n=s;n<t.y&&this._gridData[n][i]==e;n++,a++);return this.getIndex(i,s,n,a)}}return null}getGridSize(){return this._gridData.length>0?{x:this._gridData[0].length,y:this._gridData.length}:{x:0,y:0}}getElementAt(e,t){return this.getElement(this.getIndex(e,t))}getElement(e){return this.hasIndex(e)?this._gridData[e.y][e.x]:null}hasIndex(e){const t=e,i=this.getGridSize();return t&&t.isValid()&&t.container==this&&t.right<i.x&&t.bottom<i.y}getElements(e){const t=new Set;if(this.hasIndex(e)){for(let i=e.left;i<=e.right;i++)for(let s=e.top;s<=e.bottom;s++)t.add(this._gridData[s][i]);t.delete(null)}return t}setFocused(e){this.focused!=e&&(super.setFocused(e),this._isNavigationReady&&(this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this.waitFuncDispose=i.waitSeveralFrames((()=>{e?this.focusCurrentOrNearest():this.unfocusElements()}))))}getIndex(e,t,i=1,n=1){return new s.ItemsGridIndex(this,e,t,i,n)}getCurrentIndex(){let e=this.getIndex(this._navigationCursor.x,this._navigationCursor.y);const t=this.getElement(e);if(t){let i=this._navigationCursor.x,s=this._navigationCursor.y;for(;t==this.getElementAt(i-1,this._navigationCursor.y);)i--;for(;t==this.getElementAt(this._navigationCursor.x,s-1);)s--;let n=this._navigationCursor.x-i+1,a=this._navigationCursor.y-s+1;for(;t==this.getElementAt(i+n,this._navigationCursor.y);)n++;for(;t==this.getElementAt(this._navigationCursor.x,s+a);)a++;e=this.getIndex(i,s,n,a)}return e}getCurrentElement(){return this.getCurrentIndex()?this.getCurrentIndex().element:null}unfocusElements(){const e=this.getCurrentElement();e&&e.unfocus()}destroy(){this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),super.destroy()}get internalFocus(){return this._internalFocus}set internalFocus(e){this._internalFocus!=e&&(this._internalFocus=e,e?this.focusCurrentOrNearest():this.unfocusElements(),this.updateAvailableActionlist())}getDebugNavigationStructure(){return`${super.getDebugNavigationStructure()}, "gridSize": [${this.getGridSize().x}, ${this.getGridSize().y}], "elementsCount": ${this._listSize}, "cursor": [${this._navigationCursor.x}, ${this._navigationCursor.y}]`}}t.NavigationItemsGrid=a}.apply(t,s),void 0===n||(e.exports=n)},9008:(e,t,i)=>{var s,n;s=[i,t,i(6749),i(4092),i(580),i(2993),i(2666)],n=function(e,t,i,s,n,a,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r extends a.NavigationElement{constructor(){super(),this._internalFocus=!0,this._direction=s.EDirection.undefined,this._listData=Array(),this._navigationCursor=0}resetNavigationCursor(){this._navigationCursor=0}focusCurrentOrNearest(){if(!this.internalFocus)return!1;if(!this._isNavigationReady||!this.focused||0==this._listData.length)return!1;const e=this._navigationCursor;for(const t of o.getIndicesSortedFromNearest(e,this._listData.length))if(this.focusElement(this.getIndex(t)))return!0;return!1}triggerCurrentElement(){const e=this.getCurrentElement();e&&e.trigger()}focusElement(e){if(this.hasIndex(e)&&e.element&&e.element.focusable){const t=this.getCurrentElement(),i=e.element;if(t!=i){if(!this.setCurrentIndex(e))return!1;t&&t.unfocus()}if(this.focused)return i.focus(),!0}return!1}setCurrentIndex(e){if(this.hasIndex(e)){const t=e;if(this._navigationCursor!=t.index)return this._navigationCursor=t.index,!0}return!1}findElement(e){return e&&this._listData?this.getIndex(this._listData.indexOf(e)):null}getElementAt(e){return this.getElement(this.getIndex(e))}getElement(e){if(this.hasIndex(e)){const t=e;return this._listData[t.index]}return null}hasIndex(e){const t=e;return t&&t.isValid()&&t.container==this&&t.index<this._listData.length}setFocused(e){this.focused!=e&&(super.setFocused(e),this._isNavigationReady&&(this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this.waitFuncDispose=i.waitSeveralFrames((()=>{e?this.focusCurrentOrNearest():this.unfocusElements()}))))}getIndex(e){return new n.ItemsListIndex(this,e)}getCurrentIndex(){return this.getIndex(this._navigationCursor)}getCurrentElement(){return this.getCurrentIndex()?this.getCurrentIndex().element:null}unfocusElements(){const e=this.getCurrentElement();e&&e.unfocus()}destroy(){this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),super.destroy()}get internalFocus(){return this._internalFocus}set internalFocus(e){this._internalFocus!=e&&(this._internalFocus=e,e?this.focusCurrentOrNearest():this.unfocusElements(),this.updateAvailableActionlist())}getDebugNavigationStructure(){if(0==this._listData.length)return super.getDebugNavigationStructure();let e=`${super.getDebugNavigationStructure()},"cursor":${this._navigationCursor},"children":[`,t=!0;for(const i of this._listData)i&&(t?t=!1:e+=",",e+=`{${i.getDebugNavigationStructure()}}`);return e+"]"}}t.NavigationItemsList=r}.apply(t,s),void 0===n||(e.exports=n)},6:(e,t,i)=>{var s,n;s=[i,t,i(3521),i(9218),i(2666),i(4092)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=e=>e.content.getBoundingClientRect().x,r=e=>e.content.getBoundingClientRect().y;class l extends i.NavigationContainer{constructor(){super(),this._direction=a.EDirection.undefined,this._listData=Array(),this._navigationCursor=0}initNavigationElements(){"true"==this.content.dataset.isHorizontal?this._direction=a.EDirection.horizontal:"false"==this.content.dataset.isHorizontal&&(this._direction=a.EDirection.vertical),super.initNavigationElements()}updateNavigationReady(){if("true"==this.content.dataset.navigationWaitChildrenReady)for(const e of this._listData)if(!e.isNavigationReady)return e.signalNavigationReady.add((()=>{this.updateNavigationReady()})),!1;return super.updateNavigationReady()}hasFocusableElements(){if(super.hasFocusableElements())return!0;for(const e of this._listData)if(e.focusable)return!0;return!1}destroy(){for(;this._listData.length>0;){const e=this.getIndex(this._listData.length-1);this.removeElementAt(e)}this._navigationCursor=null,super.destroy()}getListSize(){return this._listData.length}arrangePendingElementsImpl(e){if(e.size>0){const t=this.getCurrentElement();this._listData.push(...e),this._direction==a.EDirection.horizontal?this._listData.sort(((e,t)=>o(e)-o(t))):this._direction==a.EDirection.vertical&&this._listData.sort(((e,t)=>r(e)-r(t))),t&&(this._navigationCursor=this.findElement(t).index)}}addElementImpl(e,t){const i=t;if(i){if(i.index<this._listData.length){this._listData.push(this._listData[this._listData.length-1]);for(let e=this._listData.length-2;e>i.index;e--)this._listData[e]=this._listData[e-1];this._listData[i.index]=e}else i.index==this._listData.length&&this._listData.push(e);return!0}return!1}removeElementImpl(e){const t=e;if(t&&t.isValid()){const e=this._listData.length-1;if(t.index<=e){for(let i=t.index;i<e;i++)this._listData[i]=this._listData[i+1];return this._listData.pop(),!0}}return!1}addElementAt(e,t){return this.addElement(e,this.getIndex(t))}pushElement(e){return this.addElement(e,this.getIndex(this._listData.length))}setCurrentIndex(e){if(this.hasIndex(e)){const t=e;if(this._navigationCursor!=t.index)return this._navigationCursor=t.index,!0}return!1}getElementAt(e){return this.getElement(this.getIndex(e))}getElement(e){if(this.hasIndex(e)){const t=e;return this._listData[t.index]}return null}findElement(e){return e&&this._listData?this.getIndex(this._listData.indexOf(e)):null}resetNavigationCursor(){this._navigationCursor=0}focusCurrentOrNearest(){if(!this.internalFocus)return!1;if(!this._isNavigationReady||!this.focused||0==this._listData.length)return!1;const e=this._navigationCursor;for(const t of n.getIndicesSortedFromNearest(e,this._listData.length))if(this.focusElement(this.getIndex(t)))return!0;return!1}hasIndex(e){const t=e;return t&&t.isValid()&&t.container==this&&t.index<this._listData.length}getIndex(e){return new s.UnidirectionalIndex(this,e)}getCurrentIndex(){return this.getIndex(this._navigationCursor)}getDebugNavigationStructure(){if(0==this._listData.length)return super.getDebugNavigationStructure();let e=`${super.getDebugNavigationStructure()},"cursor":${this._navigationCursor},"children":[`,t=!0;for(const i of this._listData)i&&(t?t=!1:e+=",",e+=`{${i.getDebugNavigationStructure()}}`);return e+"]"}}t.NavigationListContainer=l}.apply(t,s),void 0===n||(e.exports=n)},4050:(e,t,i)=>{var s,n;s=[i,t,i(2666),i(6)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.NavigationListContainer{focusCurrentOrNearest(){if(!this.internalFocus)return!1;if(!this._isNavigationReady||0==this._listData.length)return!1;for(let e=this._listData.length-1;e>=0;e--)if(this.focusElement(this.getIndex(e)))return!0;return!1}arrangePendingElementsImpl(e){e.size>0&&(this._listData.push(...e),this._listData.sort(i.zIndexSort))}}t.NavigationStackContainer=n}.apply(t,s),void 0===n||(e.exports=n)},4826:(e,t,i)=>{var s,n;s=[i,t,i(2209),i(2993),i(7136),i(9970)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends s.NavigationElement{constructor(){super(),this._triggerAction=i.NavigationAction.enter,this.addDefinedAction(this._triggerAction,(e=>{e.handleTriggerAction()}))}attachToControl(e){e instanceof n.Button||e instanceof a.Toggle?(super.attachToControl(e),this._btn=e,e.content.dataset.navigationAction&&(this.triggerAction=e.content.dataset.navigationAction)):console.error("ButtonElement.attachToControl(). This navigation element must be attached to instance of Button|Toggle control, passed: "+typeof e)}detach(){this._btn=null,super.detach()}get triggerAction(){return this._triggerAction}set triggerAction(e){this._triggerAction!=e&&(this._actions.set(e,this._actions.get(this._triggerAction)),this._actions.get(this._triggerAction).enabled&&(this.control.dispatchExternalEvent(i.NavigationEvent.action_disabled,this._triggerAction),this.control.dispatchExternalEvent(i.NavigationEvent.action_enabled,e)),this._actions.delete(this._triggerAction),this._triggerAction=e)}handleTriggerAction(){this._btn.trigger()}}t.ButtonElement=o}.apply(t,s),void 0===n||(e.exports=n)},3548:(e,t,i)=>{var s,n;s=[i,t,i(2209),i(2993),i(1959)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.NavigationElement{constructor(){super(...arguments),this.toggleEdit=()=>{this._editbox&&this._editbox.toggleEdit()},this.cancelEdit=()=>{this._editbox&&this._editbox.cancelEdit()},this.onEditFocusChanged=()=>{this.updateAvailableActionlist()}}attachToControl(e){e instanceof n.EditBox?(super.attachToControl(e),this._editbox=e,this._editbox.signalEditFocusChanged.add(this.onEditFocusChanged)):console.error("EditBoxElement.attachToControl(). This navigation element must be attached to instance of EditBox control, passed: "+typeof e),"true"!=this.content.dataset.startEditOnFocus&&(this.addDefinedAction(i.NavigationAction.enter,this.toggleEdit),this.addDefinedAction(i.NavigationAction.back,this.cancelEdit))}detach(){this._editbox&&(this._editbox.signalEditFocusChanged.remove(this.onEditFocusChanged),this._editbox=null),super.detach()}computeAvailableActionlist(){const e=this.getDefinedActionlist();return this._editbox&&!this._editbox.isEditFocused()&&e.delete(i.NavigationAction.back),e}}t.EditBoxElement=a}.apply(t,s),void 0===n||(e.exports=n)},952:(e,t,i)=>{var s,n;s=[i,t,i(2209),i(2993),i(7571),i(4028)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends s.NavigationElement{constructor(){super(),this._stickScroll=null,this.onStickScroll=(e,t,s)=>{this._slider.scrollByDelta(this._stickScroll==i.NavigationAction.horiz_scroll?s:-s)},this.onControlChange=()=>{this.updateAvailableActionlist()},this._actionHelper=new n.ActionHelperForwardBack(this._actions,i.NavigationAction.down,i.NavigationAction.up)}attachToControl(e){e instanceof a.Slider?(super.attachToControl(e),this._slider=e,"true"==e.content.dataset.stickScroll&&(this._stickScroll=e.isHorizontal?i.NavigationAction.horiz_scroll:i.NavigationAction.vert_scroll,this.addDefinedAction(this._stickScroll,this.onStickScroll)),e.isHorizontal?(this._actionHelper.forwardAction=i.NavigationAction.right,this._actionHelper.backwardAction=i.NavigationAction.left):(this._actionHelper.forwardAction=i.NavigationAction.down,this._actionHelper.backwardAction=i.NavigationAction.up),e.signalValueChanged.add(this.onControlChange),e.signalRangeChanged.add(this.onControlChange)):console.error("SliderElement.attachToControl(). This navigation element must be attached to instance of Slider control, passed: "+typeof e)}detach(){super.detach(),this._slider&&(this._slider.signalValueChanged.remove(this.onControlChange),this._slider.signalRangeChanged.remove(this.onControlChange),this._slider=null)}initNavigationElements(){this.addDefinedAction(this._actionHelper.backwardAction,(e=>{e._slider.scrollByDelta(-1)})),this.addDefinedAction(this._actionHelper.forwardAction,(e=>{e._slider.scrollByDelta(1)}))}computeAvailableActionlist(){const e=super.computeAvailableActionlist();return this._slider?this._slider.value<=this._slider.min?e.delete(this._actionHelper.backwardAction):this._slider.value>=this._slider.max&&e.delete(this._actionHelper.forwardAction):e.clear(),e}}t.SliderElement=o}.apply(t,s),void 0===n||(e.exports=n)},7571:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ActionHelperForwardBack=class{constructor(e,t,i){this._actionsRef=e,this._forwardAction=t,this._backwardAction=i}get forwardAction(){return this._forwardAction}set forwardAction(e){this._forwardAction!=e&&(this._actionsRef.has(this._forwardAction)&&(this._actionsRef.set(e,this._actionsRef.get(this._forwardAction)),this._actionsRef.delete(this._forwardAction)),this._forwardAction=e)}get backwardAction(){return this._backwardAction}set backwardAction(e){this._backwardAction!=e&&(this._actionsRef.has(this._backwardAction)&&(this._actionsRef.set(e,this._actionsRef.get(this._backwardAction)),this._actionsRef.delete(this._backwardAction)),this._backwardAction=e)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},3591:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BidirectionalIndex=class{constructor(e,t,i){this._container=e,this._x=t,this._y=i}get container(){return this._container}get element(){return this.container.getElement(this)}get x(){return this._x}get y(){return this._y}isValid(){return this._container&&!isNaN(this.x)&&!isNaN(this.y)&&this.x>=0&&this.y>=0}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},1652:(e,t,i)=>{var s,n;s=[i,t,i(3591)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.BidirectionalIndex{constructor(e,t,i,s=1,n=1){super(e,t,i),this._w=s,this._h=n}get left(){return this.x}get right(){return this.x+this._w-1}get top(){return this.y}get bottom(){return this.y+this._h-1}get width(){return this._w}get height(){return this._h}getElementsInArea(){return this.container.getElements(this)}isValid(){return super.isValid()&&!isNaN(this._w)&&!isNaN(this._h)&&this._w>0&&this._h>0}}t.GridIndex=s}.apply(t,s),void 0===n||(e.exports=n)},5607:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ItemsGridIndex=class{constructor(e,t,i,s=1,n=1){this._container=e,this._x=t,this._y=i,this._w=s,this._h=n}isValid(){return this._container&&!isNaN(this.x)&&!isNaN(this.y)&&this.x>=0&&this.y>=0&&!isNaN(this._w)&&!isNaN(this._h)&&this._w>0&&this._h>0}getElementsInArea(){return this.container.getElements(this)}get container(){return this._container}get element(){return this.container.getElement(this)}get x(){return this._x}get y(){return this._y}get left(){return this.x}get right(){return this.x+this._w-1}get top(){return this.y}get bottom(){return this.y+this._h-1}get width(){return this._w}get height(){return this._h}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},580:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ItemsListIndex=class{constructor(e,t){this._container=e,this._index=t}get container(){return this._container}get element(){return this.container.getElement(this)}get index(){return this._index}isValid(){return this._container&&!isNaN(this.index)&&this.index>=0}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},159:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KeyIndex=class{constructor(e,t){this._container=e,this._key=t}get container(){return this._container}get element(){return this.container.getElement(this)}get key(){return this._key}isValid(){return this._container&&this._key.length>0}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},9218:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UnidirectionalIndex=class{constructor(e,t){this._container=e,this._index=t}get container(){return this._container}get element(){return this.container.getElement(this)}get index(){return this._index}isValid(){return this._container&&!isNaN(this.index)&&this.index>=0}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},5427:(e,t,i)=>{var s,n;s=[i,t,i(9586),i(3008),i(8576),i(8606)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends a.Control{init(){super.init(),this.initState(),this.onUpdateStyle(),this.duration=n.Default.duration}onRegister(){this.content.setAttribute("data-bind-progress_bar",`{{ProgressViewModel_${this.controlId}}}`)}updateData(e){this._isDirectChanged=e.directChange,this.value=e.value,e.directChange=!1,this._dataModel={min:this._min,max:this._max,value:this._value,directChange:this._isDirectChanged}}initState(){this._min=0,this._max=100,this._value=this._min,this._prevValue=this._value,this._dataModel={min:this._min,max:this._max,value:this._value,directChange:this._isDirectChanged}}onUpdateStyle(){const{isHorizontal:e,relativeValue:t}=this;e?this.content.style.width=100*t+"%":this.content.style.height=100*t+"%"}get dataModel(){return this._dataModel}get isHorizontal(){return"false"!=this.content.dataset.isHorizontal}get min(){return this._min}set min(e){this._min!=e&&(this._min=e,this.updateRange())}get max(){return this._max}set max(e){this._max!=e&&(this._max=e,this.updateRange())}get prevValue(){return this._prevValue}get value(){return this._value}set value(e){this._value!=e&&this.setValue(e)}setAnimatedValue(e){this.setValue(e,!0)}get isDirectChanged(){return this._isDirectChanged}setDirectValue(e){this._isDirectChanged=!0,this.setValue(e,!1),this._isDirectChanged=!1}get range(){return this.max-this.min}setMinMax(e=Number.NaN,t=Number.NaN){let i;isNaN(e)||this._min==e||(this._min=e,i=!0),isNaN(t)||this._max==t||(this._max=t,i=!0),i&&this.updateRange()}updateRange(){const{_min:e,_max:t,_value:i}=this;isNaN(e)||isNaN(t)||isNaN(i)||(this.setValue(i,!1,!0),this._signalRangeChanged&&this._signalRangeChanged.dispatch())}setValue(e,t=!1,s=!1){if(this._value!=e||s){const{_min:t,_max:s}=this;this._prevValue=this._value,this._value=i.limit(e,t,s),this.onUpdateStyle(),this.updateView(),this._signalValueChanged&&this._prevValue!=this._value&&this._signalValueChanged.dispatch()}}setValueSilent(e,t=!1){if(this._value!=e||t){const{_min:t,_max:s}=this;this._prevValue=this._value,this._value=i.limit(e,t,s),this.onUpdateStyle(),this.updateView()}}get relativeValue(){return i.relative(this._min,this._max,this._value)}get prevRelativeValue(){return i.relative(this._min,this._max,this._prevValue)}setRelativeValue(e,t=!1){const s=i.lerp(this._min,this._max,i.limit(e,0,1));this.setValue(s,t)}setRelativeValueSilent(e){const t=i.lerp(this._min,this._max,i.limit(e,0,1));this.setValueSilent(t)}updateView(){}onDestroy(){this._signalValueChanged&&(this._signalValueChanged.removeAll(),this._signalValueChanged=null),this._signalRangeChanged&&(this._signalRangeChanged.removeAll(),this._signalRangeChanged=null),super.onDestroy()}get signalValueChanged(){return this._signalValueChanged||(this._signalValueChanged=new s.Signal),this._signalValueChanged}get signalRangeChanged(){return this._signalRangeChanged||(this._signalRangeChanged=new s.Signal),this._signalRangeChanged}}t.ProgressBar=o}.apply(t,s),void 0===n||(e.exports=n)},5615:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProgressBarHandler=class{update(e,t){e.control.updateData(t)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},9446:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(9586),i(4028)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.Slider{constructor(){super(...arguments),this.startDecrementPosition=e=>{i.TweenMax.killTweensOf(this),this.stepDecrementPosition()},this.stepDecrementPosition=()=>{const{scrollStep:e}=this,t=s.limit(this.relativeValue-e,0,1);i.TweenMax.to(this,this.duration,{userRelativeValue:t,onComplete:this.stepDecrementPosition,ease:i.Linear.easeNone})},this.startIncrementPosition=e=>{i.TweenMax.killTweensOf(this),this.stepIncrementPosition()},this.stepIncrementPosition=()=>{const{scrollStep:e}=this,t=s.limit(this.relativeValue+e,0,1);i.TweenMax.to(this,this.duration,{userRelativeValue:t,onComplete:this.stepIncrementPosition,ease:i.Linear.easeNone})},this.stopIncrementPosition=e=>{const t=100,s=e==this.decrementButton?Math.floor(this.relativeValue*t)/t:Math.ceil(this.relativeValue*t)/t,n=Math.abs(s-this.relativeValue);i.TweenMax.killTweensOf(this),i.TweenMax.to(this,this.duration*n,{userRelativeValue:s,ease:i.Linear.easeNone})}}initState(){super.initState(),this.scrollStep=.1}initListeners(){super.initListeners();const{decrementButton:e,incrementButton:t}=this;e.signalPressed.add(this.startDecrementPosition),t.signalPressed.add(this.startIncrementPosition),e.signalReleased.add(this.stopIncrementPosition),t.signalReleased.add(this.stopIncrementPosition)}}t.ScrollBar=a}.apply(t,s),void 0===n||(e.exports=n)},4028:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(9586),i(3962),i(5542),i(5427)],n=function(e,t,i,s,n,a,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r extends o.ProgressBar{constructor(){super(...arguments),this.listenScroll=!0,this.onMouseWheel=e=>{this.listenScroll&&(e.stopPropagation(),this.scrollByDelta(e.deltaY))},this.onMouseDown=e=>{if(0==e.button){const{panel:t,track:i,clip:s,isHorizontal:n}=this,{target:a,clientX:o,clientY:r}=e;if(a==t||a==i||a==s){if(a==s){const e=s.getBoundingClientRect();this.thumbOffset=n?e.left-o+e.width/2:e.top-r+e.height/2}else this.thumbOffset=0;this.addListener("mousemove",this.onMouseMove,window),this.addListener("mouseup",this.onMouseUp,window);const e=this.getRelativeValueFromMousePos(o,r);this.setUserRelativeAnimatedValue(e),s.classList.add("Overed")}}},this.onMouseUp=()=>{this.removeListener("mousemove",this.onMouseMove,window),this.removeListener("mouseup",this.onMouseUp,window),this.clip.classList.remove("Overed")},this.onMouseMove=e=>{i.TweenMax.killTweensOf(this),this.userRelativeValue=this.getRelativeValueFromMousePos(e.clientX,e.clientY)}}init(){super.init(),this.focused&&this.content.classList.add("Focused")}initState(){super.initState(),this.wheelStep=.01}initListeners(){this.addListener("wheel",this.onMouseWheel),this.addListener("mousedown",this.onMouseDown)}focus(){this.focused||(super.focus(),this.content.classList.add("Focused"))}unfocus(){this.focused&&(super.unfocus(),this.content.classList.remove("Focused"))}scrollByDelta(e){const{wheelStep:t,relativeValue:i,relativeValueTween:a}=this,o=(e>0?1:-1)*t,r=a&&n.isRunning(a)?Object(a.vars).userRelativeValue:i,l=s.limit(r+o,0,1);l!=r&&(this.relativeValueTween=this.setUserRelativeAnimatedValue(l))}addMouseWheel(e=this.content){this.addListener("wheel",this.onMouseWheel,e)}removeMouseWheel(e=this.content){this.removeListener("wheel",this.onMouseWheel,e)}onUpdateStyle(){const{isHorizontal:e,relativeValue:t,clip:i}=this;e?i.style.left=100*t+"%":i.style.top=100*t+"%"}getRelativeValueFromMousePos(e,t){const{isHorizontal:i,track:n,clip:a}=this,o=n.getBoundingClientRect(),r=a.getBoundingClientRect(),l=i?(e-o.left-r.width/2+this.thumbOffset)/o.width:(t-o.top-r.height/2+this.thumbOffset)/o.height;return s.limit(l,0,1)}set userValue(e){this.setValue(e),this.dispatchExternalEvent(a.ExternalEvent.value_changed,this._value)}setUserAnimatedValue(e){i.TweenMax.to(this,this.duration,{userValue:e})}get userRelativeValue(){return this.relativeValue}set userRelativeValue(e){this.setRelativeValue(e),this.dispatchExternalEvent(a.ExternalEvent.value_changed,this._value)}setUserRelativeAnimatedValue(e){return i.TweenMax.to(this,this.duration,{userRelativeValue:e})}onDestroy(){this.relativeValueTween&&this.relativeValueTween.kill(),super.onDestroy()}}t.Slider=r}.apply(t,s),void 0===n||(e.exports=n)},2889:(e,t,i)=>{var s,n;s=[i,t,i(227),i(8606),i(3008)],n=function(e,t,i,s,n){"use strict";function a(){i.Factory.createControl("Root","root",0,!1),t.root=s.controls.get("root")}function o(){t.signalScreenResized.dispatch()}Object.defineProperty(t,"__esModule",{value:!0}),t.signalScreenResized=new n.Signal,t.createRootComponent=a,t.onResize=o,t.initRoot=function(){a(),window.addEventListener("resize",o),o()}}.apply(t,s),void 0===n||(e.exports=n)},7602:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{onRegister(){this.content.setAttribute("data-bind-class-toggle","AnimationDisable:!{{g_UICVarsViewModel.hudAnimationsAllowed}};")}}t.RootControl=s}.apply(t,s),void 0===n||(e.exports=n)},1959:(e,t,i)=>{var s,n;s=[i,t,i(3008),i(5542),i(851),i(227)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends n.Label{constructor(){super(...arguments),this.isConfirmed=!1,this.startEditOnFocus=!1,this.onInputText=e=>{const{input:t,content:i}=this,n=t.value;this._text=n,i.setAttribute("data-value",n),this._signalValueChanged&&this._signalValueChanged.dispatch(),this.dispatchExternalEvent(s.ExternalEvent.value_changed,n)},this.onEditStarted=e=>{this.isConfirmed=!1,this.focus(),this._prevText=this._text,this.content.classList.add("EditFocused"),this._signalEditFocusChanged&&this._signalEditFocusChanged.dispatch(),this.dispatchExternalEvent(s.ExternalEvent.edit_started)},this.onEditFinished=e=>{this.content.classList.remove("EditFocused"),this._signalEditFocusChanged&&this._signalEditFocusChanged.dispatch();const t=this._prevText==this._text?s.ExternalEvent.edit_canceled:s.ExternalEvent.edit_applied;this.dispatchExternalEvent(t),this.isConfirmed&&this.dispatchExternalEvent(s.ExternalEvent.edit_confirmed)},this.toggleEdit=()=>{this.isEditFocused()?(this.isConfirmed=!0,this.content.blur()):this.content.focus()},this.cancelEdit=()=>{this.isEditFocused()&&(this.userText=this._prevText,this.content.blur())}}get input(){return this.label}initElements(){this.label=this.content,this._text="",this._prevText="",this._dataModel={text:""},this.input.maxLength=+this.content.dataset.maxLength?+this.content.dataset.maxLength:256,this.startEditOnFocus="true"==this.content.dataset.startEditOnFocus,this.focused&&this.content.classList.add("Focused")}initListeners(){const{input:e}=this;this.addListener("input",this.onInputText,e),this.addListener("focus",this.onEditStarted,e),this.addListener("blur",this.onEditFinished,e)}isEditFocused(){return this.content.classList.contains("EditFocused")}focus(){this.startEditOnFocus&&!this.isEditFocused()&&this.content.focus(),this.focused||(super.focus(),this.content.classList.add("Focused"))}unfocus(){this.isEditFocused()&&this.content.blur(),this.focused&&(super.unfocus(),this.content.classList.remove("Focused"))}setText(e,t){if(this._text!=e){this._text=e;const{input:i}=this,s=t&&e?a.translate(e):e;i.value=s,i.setAttribute("value",s),i.setAttribute("data-value",s),this._signalValueChanged&&this._signalValueChanged.dispatch()}}onDestroy(){this._signalValueChanged&&(this._signalValueChanged.removeAll(),this._signalValueChanged=null),this._signalEditFocusChanged&&(this._signalEditFocusChanged.removeAll(),this._signalEditFocusChanged=null),super.onDestroy()}set text(e){this.setText(e,!0)}set localizedText(e){this.setText(e,!1)}get userText(){return this._text}set userText(e){this.text=e,this.dispatchExternalEvent(s.ExternalEvent.value_changed,e)}get signalValueChanged(){return this._signalValueChanged||(this._signalValueChanged=new i.Signal),this._signalValueChanged}get signalEditFocusChanged(){return this._signalEditFocusChanged||(this._signalEditFocusChanged=new i.Signal),this._signalEditFocusChanged}}t.EditBox=o}.apply(t,s),void 0===n||(e.exports=n)},851:(e,t,i)=>{var s,n;s=[i,t,i(3008),i(4376),i(8606),i(227)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends n.Control{constructor(){super(...arguments),this._text=""}onRegister(){this.content.setAttribute("data-bind-label",`{{LabelViewModel_${this.controlId}}}`)}updateData(e){this.text=e.text}initElements(){this.label=this.content,this._dataModel={text:""}}get dataModel(){return this._dataModel}get text(){return this._text}set text(e){this._text=e,this.dataModel.text=s.replaceUnsupportedTags(a.translate(e)),this.localizedText=this.dataModel.text,this._signalValueChanged&&this._signalValueChanged.dispatch()}set localizedText(e){this.label.innerHTML=e}get signalValueChanged(){return this._signalValueChanged||(this._signalValueChanged=new i.Signal),this._signalValueChanged}onDestroy(){this.content.removeAttribute("data-bind-label"),this._signalValueChanged&&(this._signalValueChanged.removeAll(),this._signalValueChanged=null),this._dataModel=null,super.onDestroy()}}t.Label=o}.apply(t,s),void 0===n||(e.exports=n)},8516:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LabelHandler=class{update(e,t){e.control.updateData(t)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},8576:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{}i.duration=.25,i.disabledAlpha=.5,t.Default=i}.apply(t,[i,t]),void 0===s||(e.exports=s)},7801:(e,t,i)=>{var s,n;s=[i,t,i(7136)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Button{onRegister(){}}t.ButtonModelless=s}.apply(t,s),void 0===n||(e.exports=n)},9541:(e,t,i)=>{var s,n;s=[i,t,i(7136)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Button{constructor(){super(...arguments),this.removeClickAnimation=()=>{window.clearTimeout(this.clickAnimationTimeout),this.content.classList.remove("Click")}}initElements(){super.initElements(),this.registerOptionalElements("label"),this.content.dataset.clickAnimationDuration&&!isNaN(+this.content.dataset.clickAnimationDuration)?this.clickAnimationDuration=+this.content.dataset.clickAnimationDuration:this.clickAnimationDuration=300}trigger(){this.content.classList.add("Click"),window.clearTimeout(this.clickAnimationTimeout),this.clickAnimationTimeout=window.setTimeout(this.removeClickAnimation,this.clickAnimationDuration),super.trigger()}onDestroy(){window.clearTimeout(this.clickAnimationTimeout),super.onDestroy()}}t.DefaultButton=s}.apply(t,s),void 0===n||(e.exports=n)},8613:(e,t,i)=>{var s,n;s=[i,t,i(5773)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.SelectableButton{initElements(){}onRegister(){}}t.EmptySelectableButton=s}.apply(t,s),void 0===n||(e.exports=n)},9546:(e,t,i)=>{var s,n;s=[i,t,i(9541)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.DefaultButton{initElements(){super.initElements(),this.registerElements({label:"wrapper.label"}),this._dataModel={text:""}}}t.PatternButton=s}.apply(t,s),void 0===n||(e.exports=n)},3222:(e,t,i)=>{var s,n;s=[i,t,i(7801)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ButtonModelless{addCommon(){this.content.classList.add("Common")}removeCommon(){this.content.classList.remove("Common")}addUncommon(){this.content.classList.add("Uncommon")}removeUncommon(){this.content.classList.remove("Uncommon")}addRare(){this.content.classList.add("Rare")}removeRare(){this.content.classList.remove("Rare")}addEpic(){this.content.classList.add("Epic")}removeEpic(){this.content.classList.remove("Epic")}addLegendary(){this.content.classList.add("Legendary")}removeLegendary(){this.content.classList.remove("Legendary")}removeRarity(){this.content.classList.remove("Common"),this.content.classList.remove("Uncommon"),this.content.classList.remove("Rare"),this.content.classList.remove("Epic"),this.content.classList.remove("Legendary")}}t.RarityButton=s}.apply(t,s),void 0===n||(e.exports=n)},5773:(e,t,i)=>{var s,n;s=[i,t,i(7136)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Button{init(){this._selected=this.content.classList.contains("Selected"),this._selectOnFocus="true"==this.content.dataset.selectOnFocus,super.init()}initElements(){super.initElements(),this.registerElements("label"),this.enableInputOf(this.label,!1)}select(){this.selected||(this._selected=!0,this.content.classList.add("Selected"),this._selectOnFocus&&this.focus(),this.onSelect())}onSelect(){}unselect(){this.selected&&(this._selected=!1,this.content.classList.remove("Selected"),this._selectOnFocus&&this.unfocus(),this.onUnselect())}onUnselect(){}focus(){this.focused||(super.focus(),this._selectOnFocus&&this.select())}unfocus(){this.focused&&(super.unfocus(),this._selectOnFocus&&this.unselect())}get selected(){return this._selected}}t.SelectableButton=s}.apply(t,s),void 0===n||(e.exports=n)},9633:(e,t,i)=>{var s,n;s=[i,t,i(8613)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.EmptySelectableButton{initElements(){this.registerElements({label:"wrapper.label"}),this._dataModel={text:""},this.enableInputOf(this.label,!1)}}t.SelectablePatternButton=s}.apply(t,s),void 0===n||(e.exports=n)},1353:(e,t,i)=>{var s,n;s=[i,t,i(7774)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ListItem{initElements(){this.registerControls("checkbox"),this.registerElements({label:"wrapper.label"})}select(){super.select(),this.checkbox.value=!0}unselect(){super.unselect(),this.checkbox.value=!1}focus(){this.focused||(this.parentList.setSelectedItem(this),super.focus())}}t.PatternButtonComboBoxItem=s}.apply(t,s),void 0===n||(e.exports=n)},8558:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(4260),i(5542),i(2889),i(3008),i(6749)],n=function(e,t,i,s,n,a,o,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class l extends i.Control{constructor(){super(...arguments),this._expanded=!1,this.onItemSelect=e=>{if(e){const{selected:t}=this;this.selectTimeout=window.setTimeout((()=>{t.text=e.text}),0),this.hideList()}},this.checkScrollVisibility=()=>{const e=this.contentContainer.content.scrollHeight,t=this.listBox.content.scrollHeight;this.slider.visible=e>t},this.onMouseDown=e=>{const t=Object(e.target);t&&(s.searchParentControlByControlId(t,this.content.id,this.controlId)||this.hideList())}}initElements(){this.registerElements({container:"wrapper.listBox.container"}),this.registerControls({listBox:"wrapper.listBox",selected:"wrapper.selected",contentContainer:"wrapper.listBox.container",slider:"wrapper.listBox.slider"}),this.slider.visible=!1,this.slider.listenScroll=!1,this.focused&&this.content.classList.add("Focused")}initListeners(){this.listBox.signalItemSelected.add(this.onItemSelect)}focus(){this.focused||(super.focus(),this.content.classList.add("Focused"))}unfocus(){this.focused&&(super.unfocus(),this.content.classList.remove("Focused"))}hideList(){this._expanded&&(a.root.removeListener("mousedown",this.onMouseDown),this.content.classList.remove("ShowList"),this.listBox.visible=!1,this.contentContainer.visible=!1,this._expanded=!1,this.slider.listenScroll=!1,this._signalExpandChanged&&this._signalExpandChanged.dispatch(),this.dispatchExternalEvent(n.ExternalEvent.expanded_changed,this._expanded))}showList(){this._expanded||(a.root.addListener("mousedown",this.onMouseDown),this.content.classList.add("ShowList"),this.listBox.visible=!0,this.contentContainer.visible=!0,this._expanded=!0,this.slider.listenScroll=!0,this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this.waitFuncDispose=r.waitSeveralFrames(this.checkScrollVisibility),this._signalExpandChanged&&this._signalExpandChanged.dispatch(),this.dispatchExternalEvent(n.ExternalEvent.expanded_changed,this._expanded))}onDestroy(){this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this._signalExpandChanged&&(this._signalExpandChanged.removeAll(),this._signalExpandChanged=null),this.listBox.signalItemSelected.remove(this.onItemSelect),window.clearTimeout(this.selectTimeout),super.onDestroy()}get signalExpandChanged(){return this._signalExpandChanged||(this._signalExpandChanged=new o.Signal),this._signalExpandChanged}get expanded(){return this._expanded}}t.Dropdown=l}.apply(t,s),void 0===n||(e.exports=n)},7053:(e,t,i)=>{var s,n;s=[i,t,i(4130),i(5773)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.SelectableButton{select(){this.content.classList.remove("Missed"),super.select(),i.signalKeyBindSelctionChanged.dispatch(this)}unselect(){super.unselect(),i.signalKeyBindSelctionChanged.dispatch(this)}missed(){this.content.classList.add("Missed")}removeMissed(){this.content.classList.remove("Missed")}}t.KeyBind=n}.apply(t,s),void 0===n||(e.exports=n)},282:(e,t,i)=>{var s,n;s=[i,t,i(851)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Label{set localizedText(e){this.label.textContent=e}}t.NoTagsLabel=s}.apply(t,s),void 0===n||(e.exports=n)},5758:(e,t,i)=>{var s,n;s=[i,t,i(851)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Label{initElements(){super.initElements(),this.registerElements("label1","label2"),this.maxLength=Number(this.content.dataset.maxLength)}set localizedText(e){"0"==e&&(e=""),this.label1.innerHTML="".padStart(this.maxLength-e.length,"0"),this.label2.innerHTML=e||""}}t.ZeroPaddedLabel=s}.apply(t,s),void 0===n||(e.exports=n)},9490:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606),i(9586),i(6749)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends s.Control{constructor(){super(...arguments),this.defaultTileWidth=130,this.defaultTileHeight=130,this.tileWidth=this.defaultTileWidth,this.tileHeight=this.defaultTileHeight,this.gridStartIndent=Number(this.content.dataset.gridStartIndent),this.gridEndIndent=Number(this.content.dataset.gridEndIndent),this.onScroll=()=>{const{container:e,slider:t,containerWidth:i,containerHeight:s}=this;t.isHorizontal?e.scrollLeft=t.relativeValue*i:e.scrollTop=t.relativeValue*s},this.onMouseWheel=e=>{const{slider:t,tileWidth:i,tileHeight:s,containerWidth:n,containerHeight:a}=this;this.isHorizontal?t.wheelStep=i/n:t.wheelStep=s/a,t.onMouseWheel(e)},this.scrollToAnchor=e=>{const t=this.searchElement(e);this.scrollToElement(t,!0)},this.scrollToElement=(e,t=!1,s=.5)=>{if(this.slider&&i.TweenMax.killTweensOf(this.slider),0==e.offsetHeight)return this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this._elementScrollTo=e,void(this.waitFuncDispose=a.waitSeveralFrames(this.waitElementScrollToReady));if(this._elementScrollTo=null,this.isHorizontal&&0==this.containerWidth||!this.isHorizontal&&0==this.containerHeight)return;let o;const r=this.gridStartIndent?n._vhToPx(this.gridStartIndent):0,l=this.gridEndIndent?n._vhToPx(this.gridEndIndent):0;if(this.isHorizontal){const i=e.getBoundingClientRect(),s=Math.ceil(i.left),n=Math.ceil(this.content.getBoundingClientRect().left),a=Math.ceil(this.container.scrollLeft),h=Math.ceil(s-n+a);h-r<a||t?o=(h-r)/this.containerWidth:h+l+e.offsetWidth>a+this.container.offsetWidth&&(o=(h+l+e.offsetWidth-this.container.offsetWidth)/this.containerWidth)}else{const i=e.getBoundingClientRect(),s=Math.ceil(i.top),n=Math.ceil(this.content.getBoundingClientRect().top),a=Math.ceil(this.container.scrollTop),h=Math.ceil(s-n+a);h-r<a||t?o=(h-r)/this.containerHeight:h+l+e.offsetHeight>a+this.container.offsetHeight&&(o=(h+l+e.offsetHeight-this.container.offsetHeight)/this.containerHeight)}null!=o&&(o=Math.max(Math.min(o,1),0),this.scrollToRelativeValue(o,s))},this.waitElementScrollToReady=()=>{this._elementScrollTo&&0!=this._elementScrollTo.offsetHeight&&this.scrollToElement(this._elementScrollTo)},this.scrollToRelativeValue=(e,t=0)=>{i.TweenMax.killTweensOf(this.slider),i.TweenMax.to(this.slider,t,{userRelativeValue:e,ease:i.Power3.easeOut})},this.scrollToBegin=()=>{this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this.scrollToRelativeValue(0)},this.checkScrollVisibility=()=>{a.waitSeveralFrames((()=>{this.container.scrollHeight>this.content.scrollHeight?this.sliderWrapper.classList.remove("Hidden"):this.sliderWrapper.classList.add("Hidden")}))}}init(){super.init(),this.initStyles()}initElements(){this.registerElements("container","sliderWrapper"),this.registerOptionalElements({gridStartIndentElement:"container.gridStartIndent",gridEndIndentElement:"container.gridEndIndent"}),this.registerControls({slider:"sliderWrapper.slider"})}initListeners(){const{slider:e}=this;e.removeMouseWheel(),e.signalValueChanged.add(this.onScroll),this.content.dataset.tileWidth&&(this.tileWidth=Number(this.content.dataset.tileWidth)),this.content.dataset.tileHeight&&(this.tileHeight=Number(this.content.dataset.tileHeight)),this.addListener("wheel",this.onMouseWheel)}initStyles(){this.gridStartIndent&&this.gridStartIndentElement&&(this.isHorizontal?this.gridStartIndentElement.style.width=this.gridStartIndent+"vh":this.gridStartIndentElement.style.height=this.gridStartIndent+"vh"),this.gridEndIndent&&this.gridEndIndentElement&&(this.isHorizontal?this.gridEndIndentElement.style.width=this.gridEndIndent+"vh":this.gridEndIndentElement.style.height=this.gridEndIndent+"vh")}scrollByDelta(e){const{slider:t,tileWidth:i,tileHeight:s,containerWidth:n,containerHeight:a}=this;this.isHorizontal?t.wheelStep=i/n:t.wheelStep=s/a,t.scrollByDelta(e)}get containerWidth(){const{container:e}=this;return e.scrollWidth-e.offsetWidth}get containerHeight(){const{container:e}=this;return e.scrollHeight-e.offsetHeight}get isHorizontal(){return this.slider.isHorizontal}onDestroy(){this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this.slider.signalValueChanged.remove(this.onScroll),super.onDestroy()}}t.Grid=o}.apply(t,s),void 0===n||(e.exports=n)},1318:(e,t,i)=>{var s,n;s=[i,t,i(227),i(5198),i(6749)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.ListBox{constructor(){super(...arguments),this.blankContainersInfo=[],this.blankItemTemplate=this.content.dataset.blankItem?this.content.dataset.blankItem:null}addBlankItems(e){const t=this.blankContainersInfo.length>0?this.blankContainersInfo[this.blankContainersInfo.length-1].blankID:0,s=this.contentContainer?this.contentContainer:this.container;for(let n=1;n<=e;n++){const e=this.blankItemTemplate?i.Factory.createContent(this.blankItemTemplate):document.createElement("div"),a=t+n;e.id=`blankItem_${a}`,s.appendChild(e),this.blankContainersInfo.push({blankContainer:e,item:null,blankID:a})}}clear(){const{items:e,_selectedItem:t,_signalCountChanged:i}=this;e.size>0&&(e.forEach((e=>{e.destroy()})),e.clear()),this.clearBlankContainers(),this.itemsKeyArray=[],this._overedItem=null,this._firstScroll=!0,t&&(this._selectedItem=null),this.scrollToBegin(),i&&i.dispatch()}clearBlankContainers(){for(let e=0;e<this.blankContainersInfo.length;e++){const t=this.blankContainersInfo[e];if(!t.item)break;n.removeChildren(t.blankContainer),t.item=null}}removeBlankContainers(){this.clear(),this.container.childElementCount>0&&n.removeChildren(this.container),this.blankContainersInfo=[]}addItem(e){const{items:t,itemsKeyArray:i,_signalCountChanged:s}=this,n=e.id;let a=this.getItemById(n);if(a)a.update(e);else{let o;for(let e=0;e<this.blankContainersInfo.length;e++){const t=this.blankContainersInfo[e];if(!t.item){o=t;break}}o||(this.addBlankItems(1),o=this.blankContainersInfo[this.blankContainersInfo.length-1]),a=this.createNewItem(o.blankContainer,e),a.setup(this,n),a.update(e),t.set(n,a),this.itemTemplateName&&e.view_path!=this.itemTemplateName||i.push(n),o.item=a,s&&s.dispatch()}}createNewItem(e,t){return""==t.view_path&&(t.view_path=this.itemTemplateName),i.Factory.createChildControl(t.view_path,e)}}t.ItemsGrid=a}.apply(t,s),void 0===n||(e.exports=n)},4389:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(227),i(6749)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends i.Control{initElements(){this.registerElements("container"),this.registerOptionalElements({contentContainer:"container.contentContainer"}),this.items=new Map,this.itemTemplateName=this.content.dataset.item}clear(){const{items:e}=this;if(e.size>0){const t=this.contentContainer?this.contentContainer:this.container;e.forEach((e=>{e.destroy()})),e.clear(),n.removeChildren(t)}}addItem(e){const{items:t,itemTemplateName:i}=this,n=this.contentContainer?this.contentContainer:this.container,a=e.id;let o=this.getItemById(a);o?o.update(e):(o=s.Factory.createChildControl(i,n),o.update(e),t.set(a,o))}addSeveralItems(e){for(let t=0;t<e.length;t++)this.addItem(e[t])}updateSeveralItems(e,t){const i=Math.max(this.items.size,e.length);for(let s=0;s<i;s++)if(s<e.length)this.addItem(e[s]);else if(t){const e=this.getItemById(s+1);e&&e.clear()}}getItemById(e){return this.items.get(e)}removeItemById(e){const{items:t}=this;this.getItemById(e).destroy(),t.delete(e)}onDestroy(){this.clear(),super.onDestroy()}}t.SimpleList=a}.apply(t,s),void 0===n||(e.exports=n)},943:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{update(e){}clear(){}}t.SimpleListItem=s}.apply(t,s),void 0===n||(e.exports=n)},8518:(e,t,i)=>{var s,n;s=[i,t,i(227),i(4389)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.SimpleList{constructor(){super(...arguments),this.lifetime=1e3,this.boundItemsCount=1,this.removeFirstElement=()=>{const e=this.items.keys().next().value;this.removeItemById(e)},this.destroyItem=e=>{const{items:t,container:s}=this,n=e;n.signalDestroy.remove(this.destroyItem),i.Factory.removeChildControl(n,s),t.delete(n.itemId)}}addItem(e){const{items:t,itemTemplateName:s}=this,n=this.contentContainer?this.contentContainer:this.container,a=e.id;if(t.has(a))return;const o=i.Factory.createChildControl(s,n);o.content.id=`${s}_${a}`,o.update(e),o.setDestroyTimeout(this.lifetime),o.signalDestroy.add(this.destroyItem),t.set(a,o),this.items.size>this.boundItemsCount&&this.removeFirstElement()}removeItemById(e){const{items:t}=this,i=t.get(e);i.signalDestroy.remove(this.destroyItem),t.delete(e),i.destroy()}}t.MessageScroller=n}.apply(t,s),void 0===n||(e.exports=n)},2423:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{constructor(){super(...arguments),this._hasScrollListener=!1,this.onMouseWheel=e=>{e.stopPropagation(),this.scrollByDelta(e.deltaY)}}initElements(){this.registerControls("arrowLeft","arrowRight")}addMouseWheel(e=this.content){this._hasScrollListener||(this.addListener("wheel",this.onMouseWheel,e),this._hasScrollListener=!0,this._scrollContainer=e)}removeMouseWheel(){this._hasScrollListener&&this._scrollContainer&&(this.removeListener("wheel",this.onMouseWheel,this._scrollContainer),this._hasScrollListener=!1,this._scrollContainer=null)}scrollByDelta(e){e>0&&this.arrowRight.enabled?this.arrowRight.trigger():e<0&&this.arrowLeft.enabled&&this.arrowLeft.trigger()}onDestroy(){this.removeMouseWheel(),super.onDestroy()}}t.Paginator=s}.apply(t,s),void 0===n||(e.exports=n)},6771:(e,t,i)=>{var s,n;s=[i,t,i(5427)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ProgressBar{initElements(){this.canvas=this.searchElement("clip")}setValue(e,t=!1){super.setValue(e,t),this.drawCircleCrosshair(e)}drawCircleCrosshair(e){const t=this.canvas.getContext("2d"),i=this.canvas.width/2,s=this.canvas.height/2;t.clearRect(0,0,this.canvas.width,this.canvas.height),t.beginPath(),t.arc(i,s,25,0,2*Math.PI,!1),t.lineWidth=2,t.strokeStyle="#FF2626",t.stroke(),t.beginPath(),t.arc(i,s,25,0,2*e*Math.PI,!1),t.lineWidth=2.5,t.lineCap="round",t.strokeStyle="#FF2626",t.stroke()}}t.CircleProgressBar=s}.apply(t,s),void 0===n||(e.exports=n)},7798:(e,t,i)=>{var s,n;s=[i,t,i(5427)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ProgressBar{constructor(){super(...arguments),this.onUpdateStyle=()=>{const{isHorizontal:e,relativeValue:t,clip:i}=this;i&&(e?i.style.width=100*t+"%":i.style.height=100*t+"%")}}initElements(){this.registerElements("clip")}}t.DefaultProgressBar=s}.apply(t,s),void 0===n||(e.exports=n)},7515:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(7798)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.DefaultProgressBar{constructor(){super(...arguments),this.duration=.25,this._isAnimated=!0}initElements(){super.initElements(),this.registerControls("damageBg"),this.registerElements({progressClip:"clip"}),this.progressClip.style.width="0%",this.damageBg.content.style.opacity="0"}updateView(){this._isDirectChanged?this.updateWithoutAnim():this._value<this._prevValue?this.animDamage():this._value>this._prevValue&&this.animRegen()}updateWithoutAnim(){this.updateHorizontalView()}animDamage(){this.newPosition=100*this.relativeValue,this._isAnimated?i.TweenMax.to(this.progressClip.style,this.duration,{ease:i.Linear.easeNone,width:`${this.newPosition}%`}):window.setTimeout((()=>{this.progressClip.style.width=`${this.newPosition}%`}),this.duration)}animRegen(){this.newPosition=100*this.relativeValue,this._isAnimated?i.TweenMax.to(this.progressClip.style,this.duration,{ease:i.Linear.easeNone,width:`${this.newPosition}%`}):window.setTimeout((()=>{this.progressClip.style.width=`${this.newPosition}%`}),this.duration)}updateHorizontalView(){i.TweenMax.killTweensOf(this.progressClip.style),this.newPosition=100*this.relativeValue,this.progressClip.style.width=`${this.newPosition}%`}set isAnimated(e){this._isAnimated=e}get isAnimated(){return this._isAnimated}}t.EntityHealthBar=n}.apply(t,s),void 0===n||(e.exports=n)},9157:(e,t,i)=>{var s,n;s=[i,t,i(9446)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ScrollBar{initElements(){this.registerElements({panel:"slider",track:"slider.track",clip:"slider.track.clip"}),this.registerControls("decrementButton","incrementButton")}}t.DefaultScrollBar=s}.apply(t,s),void 0===n||(e.exports=n)},4606:(e,t,i)=>{var s,n;s=[i,t,i(4028)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Slider{initElements(){this.panel=this.content,this.registerElements("track",{clip:"track.clip"})}}t.DefaultSlider=s}.apply(t,s),void 0===n||(e.exports=n)},475:(e,t,i)=>{var s,n;s=[i,t,i(4028),i(9586)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.Slider{constructor(){super(...arguments),this.onMouseWheel=e=>{},this.onMouseDown=e=>{if(0==e.button){e.stopPropagation();const{panel:t,track:i,clip:s}=this,{target:n,clientX:a,clientY:o}=e;if(n==t||n==i||n==s){this.addListener("mousemove",this.onMouseMove,window),this.addListener("mouseup",this.onMouseUp,window);const e=this.getRelativeValueFromMousePos(a,o);this.setUserRelativeAnimatedValue(e),s.classList.add("Overed")}}},this.onUpdateStyle=()=>{const{isHorizontal:e,relativeValue:t,clip:i}=this;e?i.style.width=100*t+"%":i.style.height=100*t+"%"}}initState(){super.initState(),this.wheelStep=.01}initElements(){this.panel=this.content,this.registerElements("track",{clip:"track.clip"})}getRelativeValueFromMousePos(e,t){const{isHorizontal:i,track:n}=this,a=n.getBoundingClientRect(),o=i?(e-a.left)/a.width:(t-a.top)/a.height;return Math.ceil(100*s.limit(o,0,1))/100}onDestroy(){this.relativeValueTween&&this.relativeValueTween.kill(),super.onDestroy()}}t.FillingSlider=n}.apply(t,s),void 0===n||(e.exports=n)},7947:(e,t,i)=>{var s,n;s=[i,t,i(4606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.DefaultSlider{onRegister(){}}t.SliderModelless=s}.apply(t,s),void 0===n||(e.exports=n)},4597:(e,t,i)=>{var s,n;s=[i,t,i(5542),i(227),i(851)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=3600,o=86400;var r;!function(e){e.Digital="Digital",e.String="String"}(r=t.TimerFormat||(t.TimerFormat={}));class l extends n.Label{constructor(){super(...arguments),this._time=0,this._prefix="",this.days="",this.hours="",this.minutes="",this.tickTimer=()=>{window.clearTimeout(this.timeoutID),this._time-=1,this.setTime(this._time),this._time<0?(this._time=0,this.dispatchExternalEvent(i.ExternalEvent.timer_ended)):this.timeoutID=window.setTimeout(this.tickTimer,1e3)}}initElements(){super.initElements(),this.content.dataset.format&&(this.format=this.content.dataset.format),this.getLocalizations()}getLocalizations(){this.days=s.translate("@timer_day"),this.hours=s.translate("@timer_hour"),this.minutes=s.translate("@timer_minute")}get text(){return this._text}set text(e){this._text=e,this.localizedText=this._text,this._signalValueChanged&&this._signalValueChanged.dispatch()}set localizedText(e){window.clearTimeout(this.timeoutID),this.dataModel.text=e,""!=e?(this._time=+e,this.setTime(this._time),this.timeoutID=window.setTimeout(this.tickTimer,1e3)):this.label.innerHTML=""}setTime(e){this.label.innerHTML=this.format==r.Digital?this.getTimeDigital(e):this.getTimeString(e)}getTimeString(e){const{days:t,hours:i,prefix:s}=this,n=Math.max(0,Math.floor(e/a)),r=Math.max(0,Math.floor(e%a/60)),l=Math.max(0,Math.floor(e%60/1));if(e>=o){const n=Math.floor(e%o/a),r=(e-e%o)/o;return n>0?`${s}${r} ${t} ${n} ${i}`:`${s}${r} ${t}`}return n>0?`${s}${n}:${r<10?"0":""}${r}:${l<10?"0":""}${l}`:`${s}${r<10?"0":""}${r}:${l<10?"0":""}${l}`}getTimeDigital(e){const{days:t,hours:i,prefix:s}=this;let n="";if(e>=o){const r=Math.floor(e%o/a),l=(e-e%o)/o;n=r>0?`${s}${l} ${t} ${r} ${i}`:`${s}${l} ${t}`}else{const t=(e-e%a)/a,i=Math.max(0,Math.floor(e%a/60)),o=Math.max(0,Math.floor(e%60/1));n=`${s}${(t<10?"0":"")+`${t}`}:${(i<10?"0":"")+`${i}`}:${(o<10?"0":"")+`${o}`}`}return n}get prefix(){return this.content.dataset.prefix&&""==this._prefix&&(this._prefix=`${s.translate(this.content.dataset.prefix)} `),this._prefix}onDestroy(){window.clearTimeout(this.timeoutID),super.onDestroy()}}t.DefaultTimer=l}.apply(t,s),void 0===n||(e.exports=n)},4041:(e,t,i)=>{var s,n;s=[i,t,i(227),i(4597)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=3600,a=86400;class o extends s.DefaultTimer{constructor(){super(...arguments),this.days="",this.hours="",this.minutes=""}initElements(){super.initElements(),this.getLocalizations()}getLocalizations(){this.days=i.translate("@timer_day"),this.hours=i.translate("@timer_hour"),this.minutes=i.translate("@timer_minute")}getTimeString(e){const{days:t,hours:i,minutes:s,prefix:o}=this;let r="";if(e>=a){const s=Math.floor(e%a/n),l=(e-e%a)/a;r=s>0?`${o}${l} ${t} ${s} ${i}`:`${o}${l} ${t}`}else if(e>=n){const t=Math.floor(e%n/60),a=(e-e%n)/n;r=t>0?`${o}${a} ${i} ${t} ${s}`:`${o}${a} ${i}`}else if(e>=60)r=`${o}${Math.floor(e/60)} ${s}`;else{const t=Math.max(0,Math.floor(e/1));r=`${o}00:${(t<10?"0":"")+`${t}`}`}return r}}t.ExpireTimer=o}.apply(t,s),void 0===n||(e.exports=n)},508:(e,t,i)=>{var s,n;s=[i,t,i(4597)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.DefaultTimer{getTimeString(e){return super.getTimeString(Math.min(3599,e))}}t.MinutesTimer=s}.apply(t,s),void 0===n||(e.exports=n)},6323:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{constructor(){super(...arguments),this.onSliderValueChanged=()=>{const{output:e,slider:t}=this;e.scrollMessages(!1,t.relativeValue)},this.onInputVisibilityChanged=()=>{this.updateMessages(),this.updateSlider()},this.updateMessages=()=>{const{content:e,input:t}=this;t.visible?e.classList.add("ShowMessages"):e.classList.remove("ShowMessages")},this.updateSlider=()=>{const{input:e,output:t,slider:i}=this;i.visible=e.visible&&t.scrollHeight<0,i.visible&&(i.wheelStep=1/t.messagesCount,i.setRelativeValue(1))}}initElements(){this.registerControls("input","output");const{input:e}=this;this.slider=e.slider}initListeners(){const{input:e,output:t,slider:i}=this;i.signalValueChanged.add(this.onSliderValueChanged),e.signalVisibilityChanged.add(this.onInputVisibilityChanged),t.signalMessageAdded.add(this.updateSlider)}}t.Chat=s}.apply(t,s),void 0===n||(e.exports=n)},9201:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{constructor(){super(...arguments),this.onVisibilityChanged=()=>{this.visible?this.editBox.content.focus():this.content.focus()}}initElements(){this.registerControls({editBox:"panel.labels.editBox",slider:"slider"});const{slider:e,content:t}=this;e.removeMouseWheel(t),e.addMouseWheel(t),this.editBox.focus()}initListeners(){this.signalVisibilityChanged.add(this.onVisibilityChanged)}onDestroy(){const{slider:e,content:t}=this;e.removeMouseWheel(t),this.signalVisibilityChanged.remove(this.onVisibilityChanged),super.onDestroy()}}t.ChatInput=s}.apply(t,s),void 0===n||(e.exports=n)},1357:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(6749),i(227),i(3008),i(851)],n=function(e,t,i,s,n,a,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r extends o.Label{constructor(){super(...arguments),this.signalMessageAdded=new a.Signal,this._messagesCount=0,this.messageInnerID=0,this.addItem=e=>{const{messageTemplate:t,messages:s,signalMessageAdded:a}=this,o=t.cloneNode(!0);o.innerHTML='<p id="wrapper" cohinline>'+e+"</p>",o.id=`ChatMessage_${this.messageInnerID}`,this.messageInnerID+=1,s.appendChild(o),this._messagesCount++;const r=()=>{if(0!=o.offsetHeight||0!=o.offsetWidth){n.signalEnterFrame.remove(r),this.scrollMessages();const{style:e}=o;e.opacity="0",i.TweenMax.to(e,.25,{opacity:"1"}),i.TweenMax.to(e,.25,{delay:5.75,opacity:"0"}),a.dispatch()}};n.signalEnterFrame.add(r)},this.scrollMessages=(e=!0,t=1)=>{const{scrollHeight:s}=this,n=`translateY(${t*s}px)`,a=e?.3:0;i.TweenMax.killTweensOf(this),i.TweenMax.to(this,a,{messagesTransform:n})}}initElements(){this.messageTemplate=n.Factory.createContent("ChatMessage"),this.registerElements("messages"),this.signalActivate.add((()=>{this.scrollMessages(!1)}))}clear(){const{messages:e}=this;this._messagesCount=0,s.removeChildren(e)}set text(e){""!=e&&this.addItem(e)}get scrollHeight(){const{messages:e,content:t}=this;return t.offsetHeight-e.offsetHeight}get messagesCount(){return this._messagesCount}get messagesTransform(){return this.messages.style.transform}set messagesTransform(e){this.messages.style.transform=e}}t.ChatOutput=r}.apply(t,s),void 0===n||(e.exports=n)},3573:(e,t,i)=>{var s,n;s=[i,t,i(6323)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Chat{constructor(){super(...arguments),this.messageDuration=2e3}init(){super.init(),this.testMessages()}testMessages(){const e=["<span class='ChatOwnMessage'>[my name]: ${str}</span>","<span class='ChatTeamMessage'>[teammate]: </span> ${str}","[my name]: <span class='ChatTeamMessage'>${str}</span>","[system]: Regular message ${str}","<span class='ChatWarningMessage'>Warning message ${str}</span>","Service message ${str}"];setInterval((()=>{const t=Math.ceil(Math.random()*e.length)-1,i=e[t].replace("${str}","text");this.output.addItem(i)}),this.messageDuration)}}t.TestChat=s}.apply(t,s),void 0===n||(e.exports=n)},3840:(e,t,i)=>{var s,n;s=[i,t,i(7136)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Button{initElements(){super.initElements(),this.registerControls({_label:"label"})}set localizedText(e){this._label.text=e}}t.AutoScrollingButton=s}.apply(t,s),void 0===n||(e.exports=n)},518:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(851),i(6749)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.Label{constructor(){super(...arguments),this.startDelay=2.5,this.endDelay=.2,this.opacityDuration=.2,this.moveEnd=()=>{this.content&&(i.TweenMax.killTweensOf(this),this.content.style.opacity="","Horizontal"==this.direction?(this.scrollLeft=0,this.content.scrollWidth-1>this.content.offsetWidth&&i.TweenMax.to(this,this.content.scrollWidth/60,{scrollLeft:this.content.scrollWidth,ease:i.Linear.easeNone,delay:this.startDelay,onComplete:this.moveStart})):(this.scrollTop=0,this.content.scrollHeight-1>this.content.offsetHeight&&i.TweenMax.to(this,this.content.scrollHeight/20,{scrollTop:this.content.scrollHeight,ease:i.Linear.easeNone,delay:this.startDelay,onComplete:this.moveStart})))},this.moveStart=()=>{i.TweenMax.killTweensOf(this),this.content.style.opacity="1",i.TweenMax.to(this,this.opacityDuration,{opacity:"0",delay:this.endDelay,onComplete:()=>{this.scrollLeft=0,this.scrollTop=0,i.TweenMax.to(this,this.opacityDuration,{opacity:"1",onComplete:this.moveEnd})}})}}initElements(){super.initElements(),this.direction=this.content.dataset.direction,"Horizontal"==this.direction?(this.content.style.whiteSpace="nowrap",this.content.style.overflowX="scroll"):this.content.style.overflowY="scroll",this.signalActivate.add(this.moveEnd)}get scrollLeft(){return this.content.scrollLeft}set scrollLeft(e){this.content.scrollLeft=e}get scrollTop(){return this.content.scrollTop}set scrollTop(e){this.content.scrollTop=e}set localizedText(e){super.localizedText=e,i.TweenMax.killTweensOf(this),this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this.waitFuncDispose=n.waitSeveralFrames(this.moveEnd)}onDestroy(){i.TweenMax.killTweensOf(this),this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this.signalActivate.remove(this.moveEnd),super.onDestroy()}}t.AutoScrollingLabel=a}.apply(t,s),void 0===n||(e.exports=n)},2484:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{constructor(){super(...arguments),this.showDuration=.5,this.hideDuration=.5,this.showDelay=0,this.hideDelay=0,this.removeShowAnimated=()=>{this.content.classList.remove("ShowAnimated"),this.enabled=!0}}init(){super.init(),this.content.dataset.showDuration&&(this.showDuration=+this.content.dataset.showDuration),this.content.dataset.hideDuration&&(this.hideDuration=+this.content.dataset.hideDuration),this.content.dataset.showDelay&&(this.showDelay=+this.content.dataset.showDelay),this.content.dataset.hideDelay&&(this.hideDelay=+this.content.dataset.hideDelay)}show(){this.disableInput(),super.show(),this.dispatchExternalEventAnimationStarted("show"),i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,this.showDuration,{alpha:0,filter:"blur(14px)"},{alpha:1,filter:"blur(0px)",delay:this.showDelay,onComplete:()=>{this.enableInput(),this.dispatchExternalEventAnimationFinished("show")}})}showAnimated(){this.enabled=!1,this.content.classList.add("ShowAnimated"),window.clearTimeout(this.showTimeout),this.showTimeout=window.setTimeout(this.removeShowAnimated,1e3*this.showDuration)}hide(){this.disableInput(),this.dispatchExternalEventAnimationStarted("hide"),i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,this.hideDuration,{alpha:1,filter:"blur(0px)"},{alpha:0,filter:"blur(14px)",delay:this.hideDelay,onComplete:()=>{super.hide(),this.dispatchExternalEventAnimationFinished("hide")}})}onDestroy(){window.clearTimeout(this.showTimeout),super.onDestroy()}}t.DefaultScreen=n}.apply(t,s),void 0===n||(e.exports=n)},9814:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{show(){this.visible=!0,i.TweenMax.fromTo(this.content.style,.3,{opacity:"0",transform:"translate(-5vh)"},{opacity:"1",transform:"translate(0vh)"})}hide(){this.visible=!1}addLocked(){this.content.classList.add("Locked")}removeLocked(){this.content.classList.remove("Locked")}}t.EquipmentPanelBlock=n}.apply(t,s),void 0===n||(e.exports=n)},7135:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8674),i(6771)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.CircleProgressBar{initElements(){this.canvasElement=this.searchElement("clip"),this.registerControls({label:"label"})}setValue(e,t=!1){super.setValue(e,t),this.drawCircleCrosshair(e)}drawCircleCrosshair(e){const t=this.canvasElement.getContext("2d"),i=this.canvasElement.width/2,s=this.canvasElement.height/2;t.clearRect(0,0,this.canvasElement.width,this.canvasElement.height),t.beginPath(),t.arc(i,s,40,0,2*Math.PI,!1),t.lineWidth=5,t.strokeStyle="#FFF",t.stroke(),t.beginPath(),t.arc(i,s,40,0,2*e*Math.PI,!1),t.lineWidth=5,t.lineCap="round",t.strokeStyle="#1d86ff",t.stroke()}startTimer(){s.TweenMax.fromTo(this,this.max-this.value,{ease:i.Linear.easeNone,value:this.value/this.max},{ease:i.Linear.easeNone,value:this.max/this.max})}killTimer(){s.TweenMax.killTweensOf(this)}}t.EquipmentPanelBlockTimer=a}.apply(t,s),void 0===n||(e.exports=n)},7007:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(7136)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Button{constructor(){super(...arguments),this.tweenDuration=.3,this.parentElement=null,this.isMouseMoveActive=!1,this.handleMouseMove=e=>{if(this.prevEventX!=e.x||this.prevEventY!=e.y){const t=(e.x-this.rect.left-this.content.offsetWidth/2)/this.content.offsetWidth,s=(e.y-this.rect.top-this.content.offsetHeight/2)/this.content.offsetHeight,n=this.image,a=5*t,o=5*s;i.TweenMax.to(n.content.style,this.tweenDuration,{transform:`translate(${-1*a-50}%, ${-1*o-50}%)`}),this.prevEventX=e.x,this.prevEventY=e.y}}}onRegister(){}initElements(){super.initElements(),this.registerControls({image:"wrapper.weaponImage"})}setupParentControl(){super.setupParentControl(),this.parentElement=this.searchOptionalParentElement("heroEquipmentContainer")}onMouseOverImpl(e){this.focus(),super.onMouseOverImpl(e)}onMouseOutImpl(e){this.unfocus(),super.onMouseOutImpl(e)}focus(){this.focused||(super.focus(),this.parentElement&&(this.rect=this.elementPositionOnScreen(this.content),this.image.content.style.width="120%",this.image.content.style.height="120%",this.isMouseMoveActive||(this.addListener("mousemove",this.handleMouseMove),this.isMouseMoveActive=!0)))}unfocus(){this.focused&&(super.unfocus(),this.parentElement&&(this.isMouseMoveActive&&(this.removeListener("mousemove",this.handleMouseMove),this.isMouseMoveActive=!1),this.image.content.style.backgroundSize="contain",this.image.content.style.width="100%",this.image.content.style.height="100%",i.TweenMax.to(this.image.content.style,this.tweenDuration,{transform:"translate(-50%, -50%)"})))}elementPositionOnScreen(e){const t=e.getBoundingClientRect(),i=window.pageXOffset||document.documentElement.scrollLeft,s=window.pageYOffset||document.documentElement.scrollTop;return{top:t.top+s,left:t.left+i}}addCurrent(){this.content.classList.add("Current")}removeCurrent(){this.content.classList.remove("Current")}addLocked(){this.content.classList.add("Locked")}removeLocked(){this.content.classList.remove("Locked")}select(){this.content.classList.add("Selected"),this.focus()}unselect(){this.content.classList.remove("Selected")}addOpened(){this.content.classList.add("Opened")}removeOpened(){this.content.classList.remove("Opened")}addEmpty(){this.content.classList.add("Empty")}removeEmpty(){this.content.classList.remove("Empty")}addWeaponSize(){this.content.classList.add("equipment-panel-button-weapon-item")}removeWeaponSize(){this.content.classList.remove("equipment-panel-button-weapon-item")}removeCustomStyles(){this.removeCurrent(),this.removeLocked(),this.unselect(),this.removeOpened(),this.removeEmpty()}onDestroy(){this.parentElement&&this.isMouseMoveActive&&this.removeListener("mousemove",this.handleMouseMove),super.onDestroy()}}t.EquipmentPanelButton=n}.apply(t,s),void 0===n||(e.exports=n)},484:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(7136)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Button{onRegister(){}initElements(){super.initElements(),this.visible=!1}show(){const e=this.visible?this.opacity:0;this.disableInput(),super.show(),i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,.3,{opacity:e},{opacity:1,onComplete:()=>{this.enableInput()}})}hide(){this.disableInput(),i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,.3,{opacity:this.opacity},{opacity:0,onComplete:()=>{super.hide()}})}}t.EquipmentPanelCustomizationButton=n}.apply(t,s),void 0===n||(e.exports=n)},7049:(e,t,i)=>{var s,n;s=[i,t,i(8613)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.EmptySelectableButton{addCurrent(){this.content.classList.add("Current")}removeCurrent(){this.content.classList.remove("Current")}addLocked(){this.content.classList.add("Locked")}removeLocked(){this.content.classList.remove("Locked")}select(){this.selected||(super.select(),this.content.classList.add("Current"))}unselect(){this.selected&&(super.unselect(),this.content.classList.remove("Current"))}addOpened(){this.content.classList.add("Opened")}removeOpened(){this.content.classList.remove("Opened")}addEmpty(){this.content.classList.add("Empty")}removeEmpty(){this.content.classList.remove("Empty")}}t.EquipmentPanelWeaponTypeButton=s}.apply(t,s),void 0===n||(e.exports=n)},8513:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{constructor(){super(...arguments),this.fadeInDuration=.5,this.fadeOutDuration=.3}init(){super.init(),this.visible=!1}fadeIn(){this.visible=!0,i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,this.fadeInDuration,{alpha:0},{alpha:1,onComplete:()=>{this.dispatchExternalEventAnimationFinished("fadeIn")}})}fadeOut(){this.visible=!0,i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,this.fadeOutDuration,{alpha:1},{alpha:0,onComplete:()=>{this.visible=!1,this.dispatchExternalEventAnimationFinished("fadeOut")}})}}t.Fader=n}.apply(t,s),void 0===n||(e.exports=n)},5255:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerElements({itemContainer1:"itemContainer1",item1:"itemContainer1.item",itemContainer2:"itemContainer2",item2:"itemContainer2.item"})}onRegister(){this.viewModelName=`FlippableItemViewModel_${this.controlId}`,this.itemContainer1.setAttribute("data-bind-class-toggle",`Show:{{${this.viewModelName}.value1Show}};Hide:!{{${this.viewModelName}.value1Show}};`),this.item1.setAttribute("data-bind-class-toggle",`Blinking:{{${this.viewModelName}.value1Blinking}};`),this.item1.setAttribute("data-bind-value",`{{${this.viewModelName}.value1}}`),this.itemContainer2.setAttribute("data-bind-class-toggle",`Show:{{${this.viewModelName}.value2Show}};Hide:!{{${this.viewModelName}.value2Show}};`),this.item2.setAttribute("data-bind-class-toggle",`Blinking:{{${this.viewModelName}.value2Blinking}};`),this.item2.setAttribute("data-bind-value",`{{${this.viewModelName}.value2}}`)}}t.FlippableItem=s}.apply(t,s),void 0===n||(e.exports=n)},3102:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{enableButtons(){this.content.classList.remove("Controller")}disableButtons(){this.content.classList.add("Controller")}}t.GeneralHints=s}.apply(t,s),void 0===n||(e.exports=n)},2202:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{constructor(){super(...arguments),this.aminationDuration=.2,this.showDelay=.2,this.hideDelay=7}initElements(){this.content.style.opacity="0"}show(){super.show(),i.TweenMax.killTweensOf(this),i.TweenMax.to(this,this.aminationDuration,{alpha:1,delay:this.showDelay})}hide(){i.TweenMax.killTweensOf(this),i.TweenMax.to(this,this.aminationDuration,{alpha:0,onComplete:()=>{this.visible=!1}})}hideWithDelay(){i.TweenMax.to(this,this.aminationDuration,{alpha:0,delay:this.hideDelay,onComplete:()=>{this.visible=!1}})}}t.Hint=n}.apply(t,s),void 0===n||(e.exports=n)},3820:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{initElements(){this._label=this.searchControl("label"),this._label.content.style.opacity="0","right"==this.content.dataset.direction?(this._label.transformXPercent=-100,this._labelAnimationStart=0,this._labelAnimationEnd=-100):"left"==this.content.dataset.direction&&(this._label.transformXPercent=100,this._labelAnimationStart=0,this._labelAnimationEnd=100)}show(){this._label.visible=!0,i.TweenMax.killTweensOf(this._label),i.TweenMax.to(this._label,.2,{transformXPercent:this._labelAnimationStart,opacity:1})}hide(){i.TweenMax.to(this._label,.2,{transformXPercent:this._labelAnimationEnd,opacity:0,delay:2,onComplete:()=>{this._label.visible=!1}})}hideWithDelay(){i.TweenMax.to(this._label,.2,{transformXPercent:this._labelAnimationEnd,opacity:0,delay:7,onComplete:()=>{this._label.visible=!1}})}}t.InfoButton=n}.apply(t,s),void 0===n||(e.exports=n)},214:(e,t,i)=>{var s,n;s=[i,t,i(9970)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Toggle{initElements(){super.initElements(),this.registerElements("mark"),this.registerOptionalElements("label")}set value(e){e?this.mark.classList.add("Checked"):this.mark.classList.remove("Checked"),this.setValue(e,!1)}}t.Mark=s}.apply(t,s),void 0===n||(e.exports=n)},6716:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(4050),i(4260),i(8606),i(5542)],n=function(e,t,i,s,n,a,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r extends a.Control{constructor(){super(...arguments),this.linkToNavigationParent=()=>{if(this._navigation&&!this._navigation.parentContainer){const e=n.searchParentControlByNavigationType(this,s.NavigationStackContainer);e&&e.navigation.pushElement(this._navigation)}}}initElements(){this.registerElements("container")}onRegister(){super.onRegister(),this.signalActivate.add(this.linkToNavigationParent)}setNavigation(e){super.setNavigation(e),this.activated&&this.linkToNavigationParent()}show(){const{container:e}=this;this.isOpened=!0,this.visible=!0,this.enableInputOf(e,!1),i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,.2,{opacity:0},{opacity:1,onComplete:()=>{this.enableInputOf(e,!0)}}),this.closestParentControl&&this.closestParentControl.dispatchExternalEvent(o.ExternalEvent.window_show)}hide(){const{container:e}=this;this.isOpened&&(this.isOpened=!1,this.enableInputOf(e,!1),i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,.2,{opacity:1},{opacity:0,onComplete:()=>{this.visible=!1}}),this.closestParentControl&&this.closestParentControl.dispatchExternalEvent(o.ExternalEvent.window_hide))}}t.ModalWindow=r}.apply(t,s),void 0===n||(e.exports=n)},3468:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerElements({icon:"bodyWrapper.icon",background:"background",name:"bodyWrapper.nameWrapper.name",clan:"bodyWrapper.nameWrapper.clan"})}onRegister(){this.dataModelName=`PlayerNameplateViewModel_${this.controlId}`,this.icon.setAttribute("data-bind-style-background-image-url",`{{${this.dataModelName}.icon}}`),this.background.setAttribute("data-bind-style-background-image-url",`{{${this.dataModelName}.background}}`),this.name.setAttribute("data-bind-value",`{{${this.dataModelName}.name}}`),this.clan.setAttribute("data-bind-value",`{{${this.dataModelName}.clan}}`)}}t.Nameplate=s}.apply(t,s),void 0===n||(e.exports=n)},7940:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(3468)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Nameplate{onRegister(){super.onRegister(),i.engine.createJSModel(this.dataModelName,{icon:"coui://libs/ui/images/nameplates/icons/player_logo_npa.png",background:"coui://libs/ui/images/nameplates/backgrounds/placeholder2_npa.png",name:"SUPER_GAMER_UNREAL_COOL [ERT]",clan:"CLAN NAME"}),i.engine.updateWholeModel(window[this.dataModelName]),i.engine.synchronizeModels()}}t.TestNameplate=n}.apply(t,s),void 0===n||(e.exports=n)},2194:(e,t,i)=>{var s,n;s=[i,t,i(6749),i(8606),i(5542)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.Control{constructor(){super(...arguments),this.tweenDuration=1,this.coefs=[1,3,5,7],this.targets=[{x:0,y:0},{x:0,y:0},{x:0,y:0},{x:0,y:0}],this.images=[],this.onMouseOver=e=>{this.prevEventX=e.x,this.prevEventY=e.y,this.addListener("mousemove",this.handleMouseMove)},this.onMouseOut=e=>{this.removeListener("mousemove",this.handleMouseMove),this.handleMouseMove(e)},this.handleMouseMove=e=>{if(this.prevEventX!=e.x||this.prevEventY!=e.y){const t=this.content.getBoundingClientRect(),i=(e.x-t.left)/this.content.offsetWidth,s=(e.y-t.top)/this.content.offsetHeight;this.translateImages(i,s),this.prevEventX=e.x,this.prevEventY=e.y,e.x<t.left||e.x>t.left+this.content.offsetWidth||e.y<t.top||e.y>t.top+this.content.offsetHeight?this.focused&&(super.unfocus(),this.content.classList.remove("Focused"),this.dispatchExternalEvent(n.ExternalEvent.mouse_out)):this.focused||(super.focus(),this.content.classList.add("Focused"),this.dispatchExternalEvent(n.ExternalEvent.mouse_overed))}}}initElements(){super.initElements(),this.registerElements("wrapper"),this.images[0]=this.searchElement("wrapper.content.imageContainer.image1"),this.images[1]=this.searchElement("wrapper.content.imageContainer.image2"),this.images[2]=this.searchElement("wrapper.content.imageContainer.image3"),this.images[3]=this.searchElement("wrapper.content.imageContainer.image4"),this.focused&&this.content.classList.add("Focused")}setupParentControl(){super.setupParentControl(),this.resizeImage(),this.parentGrid=this.searchOptionalParentControl("grid");const e=i.getChildIndex(this.content);this.wrapper.style.animationDelay=`-${.2-.07*e}s`}initListeners(){this.addListener("mouseover",this.onMouseOver),this.addListener("mouseout",this.onMouseOut)}resizeImage(){for(let e=0;e<this.images.length;e++)this.images[e].style.transform=`translate(${this.targets[e].x}%, ${this.targets[e].y}%)`}translateImages(e,t){for(let i=0;i<this.images.length;i++){const s=this.targets[i],n=this.coefs[i]*e,a=this.coefs[i]*t*.5;s.x=n,s.y=a,this.images[i].style.transform=`translate(-${n}%, -${a}%)`}}focus(){this.focused||(super.focus(),this.content.classList.add("Focused"),this.translateImages(1,.5),this.parentGrid&&this.parentGrid.scrollToElement(this.content))}unfocus(){this.focused&&(super.unfocus(),this.content.classList.remove("Focused"),this.translateImages(0,.5))}default(){this.content.classList.remove("Small"),this.content.classList.remove("Large")}small(){this.content.classList.remove("Large"),this.content.classList.add("Small")}large(){this.content.classList.remove("Small"),this.content.classList.add("Large")}}t.ParallaxButton=a}.apply(t,s),void 0===n||(e.exports=n)},9533:(e,t,i)=>{var s,n;s=[i,t,i(7774)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ListItem{initElements(){super.initElements(),this.registerElements({image:"wrapper.innerWrapper.image",currencyIcon:"wrapper.innerWrapper.currencyIcon",price:"wrapper.innerWrapper.price",fireMode:"wrapper.innerWrapper.fireMode"})}updateData(){this.image.style.backgroundImage=`url(${this._dataModel.image})`,this.currencyIcon.style.backgroundImage=`url(${this._dataModel.currencyIcon})`,this.price.innerHTML=`${this._dataModel.price}`,this.fireMode.style.backgroundImage=`url(${this._dataModel.fireMode})`}}t.PostSessionArmoryWeaponItem=s}.apply(t,s),void 0===n||(e.exports=n)},9662:(e,t,i)=>{var s,n;s=[i,t,i(227),i(7774)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.ListItem{initElements(){super.initElements(),this.registerElements({image:"wrapper.innerWrapper.image",unlocks:"unlocks"})}updateData(){this.image.style.backgroundImage=`url(${this._dataModel.image})`,this._dataModel.rewards.forEach(((e,t)=>{const s=i.Factory.createChildElement("PostSessionUnlockItem",this.unlocks);s.id="PostSessionUnlockItem_"+(t+1),this.searchElement("wrapper.image",s).style.backgroundImage=`url(${e.image})`}))}}t.PostSessionHeroItem=n}.apply(t,s),void 0===n||(e.exports=n)},6348:(e,t,i)=>{var s,n;s=[i,t,i(227),i(7774)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.ListItem{initElements(){super.initElements(),this.registerElements({image:"wrapper.innerWrapper.image",title:"wrapper.innerWrapper.title",level:"wrapper.innerWrapper.levelWrapper.level",progressBar:"wrapper.innerWrapper.levelWrapper.progressBar.clip",unlocks:"unlocks"})}updateData(){this.image.style.backgroundImage=`url(${this._dataModel.image})`,this.title.innerHTML=i.translate(`${this._dataModel.title}`),this.level.innerHTML=`${this._dataModel.level}`,this.progressBar.style.width=`${this._dataModel.progress}%`,this._dataModel.rewards.forEach(((e,t)=>{const s=i.Factory.createChildElement("PostSessionUnlockItem",this.unlocks);s.id="PostSessionUnlockItem_"+(t+1),this.searchElement("wrapper.image",s).style.backgroundImage=`url(${e.image})`,this.searchElement("wrapper.title",s).innerHTML=i.translate(e.title)}))}}t.PostSessionWeaponItem=n}.apply(t,s),void 0===n||(e.exports=n)},9096:(e,t,i)=>{var s,n;s=[i,t,i(6749),i(117)],n=function(e,t,i,s){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Currency="currency",e.Outfit="outfit",e.BodyPaint="body_paint",e.LegsPaint="legs_paint",e.FaceAccessory="face_accessory",e.FacePaint="face_paint",e.FaceStyle="face_style",e.Gloves="gloves",e.HeadGear="head_gear",e.Skin="skin",e.Modification="modification",e.GachaBox="gacha_box"}(n=t.EItemType||(t.EItemType={}));class a extends s.GridItem{constructor(){super(...arguments),this.rarity="",this.amountText=""}initElements(){super.initElements(),this.registerElements({label:"label",image:"innerMask.image"}),this.registerOptionalElements({parentIcon:"innerMask.parentIcon"})}updateData(){const{_dataModel:e,content:t,image:s,label:a,parentIcon:o}=this;if("empty"==e.type)return void this.clear();this.enabled=!0,this.content.classList.remove("Empty"),this.content.classList.remove("NoRarity");const r=i.capitalize(e.rarity);this.rarity!=r&&(this.rarity&&t.classList.remove(this.rarity),this.rarity=r,t.classList.add(this.rarity)),e.isLocked?t.classList.add("Locked"):t.classList.remove("Locked"),""!=e.image&&(s.style.backgroundImage=`url(${e.image})`),o&&(""==e.parentIcon?o.classList.add("Hidden"):o.classList.remove("Hidden"),o.style.backgroundImage=""!=e.parentIcon?`url(${e.parentIcon})`:"");let l="";switch((e.amount&&e.type==n.Currency||e.amount>1)&&(l=`x${e.amount}`),this.amountText!=l&&(this.amountText=l,a.innerHTML=this.amountText),s.style.backgroundSize="",s.style.backgroundPositionX="1",s.style.backgroundPositionY="",e.type){case n.Outfit:s.style.backgroundSize="cover",s.style.backgroundPositionY="0%";break;case n.BodyPaint:s.style.backgroundSize="cover",s.style.backgroundPositionX="100%";break;case n.LegsPaint:case n.FaceAccessory:case n.FacePaint:case n.FaceStyle:case n.HeadGear:case n.Skin:s.style.backgroundSize="cover"}}clear(){this.content.classList.add("Empty"),this.content.classList.add("NoRarity"),this.enabled=!1,this.image.style.backgroundImage="",this.label.innerHTML="",this.amountText="",this.parentIcon&&(this.parentIcon.style.backgroundImage=""),this.rarity&&(this.content.classList.remove(this.rarity),this.rarity=""),this.content.classList.remove("Locked")}onSelect(){this.parentList&&this.parentList.setSelectedItem(this)}get selected(){return this._selected}}t.RarityItem=a}.apply(t,s),void 0===n||(e.exports=n)},3676:(e,t,i)=>{var s,n;s=[i,t,i(4260),i(5879),i(4197)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.RarityWeapon{onSetupCompleted(){super.onSetupCompleted(),this.parent=i.searchParentControlByType(this,s.WeaponCustomization),this.parent&&(this.parentPanel=this.parent.itemsPanel)}updateData(){super.updateData(),this.parent&&this.parent.onSlotUpdated()}}t.AttachmentSlot=a}.apply(t,s),void 0===n||(e.exports=n)},4197:(e,t,i)=>{var s,n;s=[i,t,i(6749),i(4260),i(117),i(5542),i(205)],n=function(e,t,i,s,n,a,o){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),(r=t.EItemType||(t.EItemType={})).Item="Item",r.Currency="Currency",r.BattlePassRewardItem="BattlePassRewardItem";class l extends n.GridItem{constructor(){super(...arguments),this.rarity="",this.showHint=()=>{this.parentList.dispatchExternalEvent(a.ExternalEvent.show_hint,this.itemId),this.parentPanel&&this.parentPanel.showHint(this)}}initElements(){super.initElements(),this.registerElements({image:"innerMask.image"}),this.registerOptionalElements("equippedWeaponIcon","progressWrapper","recentIcon",{level:"progressWrapper.level",progress:"progressWrapper.progressBar.clip"})}onSetupCompleted(){super.onSetupCompleted(),this.parentPanel=s.searchParentControlByType(this,o.WeaponCustomizationItemsPanel)}updateData(){const{_dataModel:e,content:t,level:s,progress:n,progressWrapper:a,image:o,equippedWeaponIcon:r,recentIcon:l}=this,h=i.capitalize(e.rarity);if(e.isLocked?t.classList.add("Locked"):t.classList.remove("Locked"),e.isEmpty?t.classList.add("Empty"):t.classList.remove("Empty"),e.isEquipped?t.classList.add("Equipped"):t.classList.remove("Equipped"),this.enabled=e.isEnabled,this.rarity!=h&&(this.rarity&&t.classList.remove(this.rarity),this.rarity=h,t.classList.add(this.rarity)),""!=e.image?o.style.backgroundImage=`url(${e.image})`:o.style.backgroundImage="none",r&&(""!=e.equippedWeapon?r.style.backgroundImage=`url(${e.equippedWeapon})`:r.style.backgroundImage="none"),a)if(e.level){const t=`${e.level}`;s.innerHTML!=t&&(s.innerHTML=t),n.style.width=100*e.progress+"%",a.classList.remove("Hidden")}else a.classList.add("Hidden");l&&(e.isRecent?l.classList.remove("Hidden"):l.classList.add("Hidden"))}trigger(){this.parentList.dispatchExternalEvent(a.ExternalEvent.item_selected,this.itemId)}onMouseOverImpl(){this._isMouseOvered=!0,this.waitHoverFuncDispose&&(this.waitHoverFuncDispose(),this.waitHoverFuncDispose=null),this.waitHoverFuncDispose=i.waitSeveralFrames((()=>{this.focusOnHover&&(this._needScroll=!1,this.focus(),this._needScroll=!0)}))}onMouseOutImpl(){this._isMouseOvered=!1,this.checkItemkOut()}checkItemkOut(){this.waitUnhoverFuncDispose&&(this.waitUnhoverFuncDispose(),this.waitUnhoverFuncDispose=null),this.waitUnhoverFuncDispose=i.waitSeveralFrames((()=>{this.parentPanel&&this.parentPanel.hasActiveHint(this)||super.onMouseOutImpl()}))}select(){this.selected||(this._selected=!0,this.content.classList.add("Selected"))}unselect(){this.selected&&(this.content.classList.remove("Selected"),this._selected=!1)}focus(){this.focused||(window.clearTimeout(this.showHintTimeout),this.showHintTimeout=window.setTimeout(this.showHint,200),this.parentList.dispatchExternalEvent(a.ExternalEvent.item_overed,this.itemId),super.focus())}unfocus(){this.focused&&(window.clearTimeout(this.showHintTimeout),this.parentPanel&&this.parentPanel.showHint(null),this.parentList.dispatchExternalEvent(a.ExternalEvent.item_unovered,this.itemId),super.unfocus())}onDestroy(){this.waitUnhoverFuncDispose&&(this.waitUnhoverFuncDispose(),this.waitUnhoverFuncDispose=null),window.clearTimeout(this.showHintTimeout),super.onDestroy()}get isMouseOvered(){return this._isMouseOvered}get dataModel(){return this._dataModel}}t.RarityWeapon=l}.apply(t,s),void 0===n||(e.exports=n)},541:(e,t,i)=>{var s,n;s=[i,t,i(851),i(6749)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.Label{get text(){return this._text}set text(e){const t=s.capitalize(e);switch(this.content.classList.remove(this._text),t){case"Common":case"Uncommon":case"Rare":case"Epic":case"Legendary":this._text=t,this.content.classList.add(this._text);break;default:""!=t&&console.warn(`Invalid rarity value received: "${e}" in control ${this.controlPath}`)}}}t.Rarity=n}.apply(t,s),void 0===n||(e.exports=n)},5959:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(2484)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.DefaultScreen{constructor(){super(...arguments),this.boundItemsCount=12,this.rewardTimeouts=[]}initElements(){this.registerControls("video","rewards"),this.registerElements({rewardsList:"rewards.rewardsList",rewardsContainer:"rewards.rewardsList.container.contentContainer"}),this.rewardsList.dataset.boundItemsCount&&(this.boundItemsCount=+this.rewardsList.dataset.boundItemsCount),this.video.show=()=>{this.video.visible=!0,i.TweenMax.to(this.video,.05,{alpha:1})},this.video.hide=()=>{const{video:e}=this;i.TweenMax.to(e,.1,{alpha:0,ease:i.Power1.easeIn,onComplete:()=>{e.visible=!1,e.dispatchExternalEventAnimationFinished("hide")}})},this.rewards.show=()=>{this.rewards.visible=!0,i.TweenMax.fromTo(this.rewards,.4,{alpha:0},{alpha:1});const e=this.rewardsContainer.children;for(let t=0;t<e.length;t++){const i=e[t].control.content,s=.1*(t+1)*1e3;t<=this.boundItemsCount?this.rewardTimeouts.push(window.setTimeout((()=>{i.style.opacity="1",i.style.animationPlayState="running"}),s)):(i.style.animationName="none",i.style.opacity="1")}}}onDestroy(){this.rewardTimeouts.forEach((e=>{window.clearTimeout(e)})),super.onDestroy()}}t.RewardsUnlock=n}.apply(t,s),void 0===n||(e.exports=n)},8459:(e,t,i)=>{var s,n;s=[i,t,i(5542),i(227),i(9541),i(6749)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends n.DefaultButton{constructor(){super(...arguments),this.showDuration=5e3,this.showNextItem=(e=!0)=>{const{currentItem:t,itemsCount:s}=this;this.currentItem>=0&&(this.contentContainer.style.transition=""),window.clearTimeout(this.bannerTimeout),this.currentItem=t+1<s?t+1:0,this.contentContainer.style.transform=`translateX(${100*-this.currentItem}%)`,this.dispatchExternalEvent(i.ExternalEvent.show_item,this.currentItem+1),this.updatePaginator(),e&&(this.bannerTimeout=window.setTimeout(this.showNextItem,this.showDuration))}}initElements(){this.registerControls("paginator"),this.registerElements({contentContainer:"wrapper.content.container",buttonsContainer:"paginator.buttons"})}onRegister(){}updateBanner(){if(this.itemsCount=this.contentContainer.childElementCount,a.removeChildren(this.buttonsContainer),this.buttons=[],this.currentItem=-1,this.itemsCount>1){for(let e=0;e<this.itemsCount;e++){const t=s.Factory.createChildControl("ScrollingBannerButton",this.buttonsContainer);t.content.id=`paginatorButton${e+1}`,this.buttons[this.buttons.length]=t}this.showNextItem(!1)}else this.dispatchExternalEvent(i.ExternalEvent.show_item,1)}updatePaginator(){this.buttons.forEach(((e,t)=>{t==this.currentItem?e.select():e.unselect()}))}reset(){this.contentContainer.style.transition="none",this.currentItem=-1,this.itemsCount>1&&this.showNextItem()}play(){this.itemsCount>1&&(this.bannerTimeout=window.setTimeout(this.showNextItem,this.showDuration/2))}stop(){window.clearTimeout(this.bannerTimeout)}onMouseOverImpl(e){super.onMouseOverImpl(e),this.stop()}onMouseOutImpl(e){super.onMouseOutImpl(e),this.play()}onDestroy(){window.clearTimeout(this.bannerTimeout),super.onDestroy()}}t.ScrollingBanner=o}.apply(t,s),void 0===n||(e.exports=n)},4673:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{setPremium(){this.content.classList.add("Premium")}reset(){this.content.classList.remove("Premium")}}t.SeasonPassProgressWidget=s}.apply(t,s),void 0===n||(e.exports=n)},1485:(e,t,i)=>{var s,n;s=[i,t,i(227),i(7774),i(6749),i(3008)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.taskHintUpdatePosition=new a.Signal;class o extends s.ListItem{constructor(){super(...arguments),this.updatePosition=e=>{if(this.parentList.visible=!!e,e){const t=e.content.getBoundingClientRect(),i=this.taskWidget.getBoundingClientRect(),s=Math.round(i.top-t.top-t.height/2);this.parentList.containerElement&&(this.parentList.containerElement.style.transform=`translateY(${-s}px)`)}}}initElements(){this.registerElements({mainCondition:"wrapper.mainCondition",mainDescription:"wrapper.mainCondition.contentWrapper.info.titleContainer.titleWrapper.description",additionalConditionContainer:"wrapper.additionalConditionsContainer",checkMark:"wrapper.mainCondition.contentWrapper.info.titleContainer.mark"}),this.mainDescription=i.Factory.registerChildControl(this.searchElement("wrapper.mainCondition.contentWrapper.info.titleContainer.titleWrapper.description"))}onSetupCompleted(){super.onSetupCompleted(),this.taskWidget=this.searchParentElement("task_widget",!1),this.taskWidget||(this.taskWidget=this.searchParentElement("tasks_panel",!1))}initListeners(){super.initListeners(),t.taskHintUpdatePosition.add(this.updatePosition)}updateData(){this.updateRarity(),this.setupMainCondition(),this.addAddtionaConditionAsElement(this._dataModel.conditions)}updateRarity(){const e=n.capitalize(this._dataModel.rarity.toLowerCase());this.currentRarity&&this.currentRarity!=e&&this.content.classList.remove(this.currentRarity),this.currentRarity=e,this.content.classList.add(this.currentRarity)}setupMainCondition(){const e=this._dataModel,t=this.mainCondition,s=this.mainDescription,n="contentWrapper.info.progressLabelContainer.maxValue",a=this.searchElement("contentWrapper.info.progressBarContainer.progressBar",this.mainCondition),o=this.searchElement("contentWrapper.info.progressBarContainer.progressBar.clip",this.mainCondition),r=this.searchElement("contentWrapper.info.progressLabelContainer.currentValue",t);if(a.classList.remove("Hidden"),this.searchElement("contentWrapper.info.titleContainer.titleWrapper.name",t).innerHTML=i.translate(e.name),s.localizedText=i.translate(e.description),this.searchElement(n,t).innerHTML=`${e.conditions.length}`,e.conditions.length>1){let t=0,i=0;for(let s=0;s<e.conditions.length;s++)t+=e.conditions[s].currentValue,i+=e.conditions[s].maxValue;o.style.width=t/i*100+"%",r.innerHTML=`${e.completedConditionCount}`,e.completedConditionCount==e.conditions.length?this.checkMark.classList.remove("Hidden"):this.checkMark.classList.add("Hidden")}else e.conditions.length>0&&(o.style.width=e.conditions[0].currentValue/e.conditions[0].maxValue*100+"%",r.innerHTML=`${e.conditions[0].currentValue}`,this.searchElement(n,t).innerHTML=`${e.conditions[0].maxValue}`,e.conditions[0].currentValue!==e.conditions[0].maxValue?this.checkMark.classList.add("Hidden"):this.checkMark.classList.remove("Hidden"));this.content.classList.add("Selected")}addAddtionaConditionAsElement(e){if(n.removeChildren(this.additionalConditionContainer),e.length>1)for(let t=0;t<e.length;t++){const s=e[t],n=i.Factory.createChildElement("TaskAdditionalCondition",this.additionalConditionContainer);n.id=`item_${t}`,this.setupCondition(n,s)}}setupCondition(e,t){const s="contentWrapper.info.titleContainer.mark";this.searchElement("contentWrapper.info.titleContainer.titleWrapper.description",e).innerHTML=i.translate(t.description),this.searchElement("contentWrapper.info.progressBarContainer.progressBar.clip",e).style.width=t.currentValue/t.maxValue*100+"%",this.searchElement("contentWrapper.info.progressLabelContainer.currentValue",e).innerHTML=`${t.currentValue}`,this.searchElement("contentWrapper.info.progressLabelContainer.maxValue",e).innerHTML=`${t.maxValue}`,t.currentValue!==t.maxValue?this.searchElement(s,e).classList.add("Hidden"):this.searchElement(s,e).classList.remove("Hidden")}onDestroy(){t.taskHintUpdatePosition.removeAll(),super.onDestroy()}}t.TaskWidgetHint=o}.apply(t,s),void 0===n||(e.exports=n)},6497:(e,t,i)=>{var s,n;s=[i,t,i(227),i(117),i(6749),i(1485)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends s.GridItem{constructor(){super(...arguments),this.rarity=""}initElements(){this.registerElements("wrapper",{typeIcons:"wrapper.info.titleWrapper.typeIcons",name:"wrapper.info.titleWrapper.name",progress:"wrapper.info.progressBar.clip",progressLabel:"wrapper.info.progressLabel",mainReward:"wrapper.reward.mainReward",mainRewardImage:"wrapper.reward.mainReward.image",mainRewardAmount:"wrapper.reward.mainReward.amount",additionalRewards:"wrapper.reward.additionalRewards"}),this.description=i.Factory.registerChildControl(this.searchElement("wrapper.info.titleWrapper.description",this.content))}onSetupCompleted(){this.content.style.animationDelay=.02*(this._itemId-1)+"s"}updateData(){const{_dataModel:e}=this;this.rarity&&this.content.classList.remove(this.rarity),this.rarity=n.capitalize(e.rarity),this.content.classList.add(this.rarity),"Empty"==this.rarity?(this.content.classList.add("Empty"),this.wrapper.classList.add("Hidden")):(this.content.classList.remove("Empty"),this.wrapper.classList.remove("Hidden")),0==e.rewards.length&&(this.mainRewardImage.style.backgroundImage="",this.mainRewardAmount.innerHTML="");let t="";for(let i=0;i<e.rewards.length;i++){const s=e.rewards[i];0==i?(this.mainRewardImage.style.backgroundImage=`url(${s.image})`,this.mainRewardAmount.innerHTML=`${s.amount}`):t+=`<div id="item${i}" class="task-widget-item__additional-reward" style="background-image:url(${s.image})"></div>`}if(this.additionalRewards.innerHTML=t,e.types){let t="";for(let i=0;i<e.types.length;i++)t+=`<div id="type${i+1}" class="task-widget-item__title-icon" style="background-image:url(${e.types[i]})"></div>`;this.typeIcons.innerHTML=t}this.name.innerHTML=i.translate(e.name),this.description.text=e.text,this.progress.style.width=e.currentProgress/e.requiredProgress*100+"%",this.progressLabel.innerHTML=`${e.completedTasks}/${e.totalTasks}`,this._dataModel.animated&&n.restartAllAnimations(this.content)}focus(){this.focused||(super.focus(),a.taskHintUpdatePosition.dispatch(this))}unfocus(){this.focused&&(super.unfocus(),a.taskHintUpdatePosition.dispatch())}select(e=!0){}unselect(e=!0){}}t.TaskWidgetItem=o}.apply(t,s),void 0===n||(e.exports=n)},4154:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{setWhite(){this.reset(),this.content.classList.add("White3")}setYellow(){this.reset(),this.content.classList.add("Yellow")}reset(){this.content.classList.remove("White3"),this.content.classList.remove("Yellow")}}t.TaskWidgetTitleBackground=s}.apply(t,s),void 0===n||(e.exports=n)},7303:(e,t,i)=>{var s,n;s=[i,t,i(7798)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.DefaultProgressBar{setValue(e,t=!1,i=!1){super.setValue(e,t,i),this.clip.style.opacity=e>0?"1":"0"}}t.TintedProgressBar=s}.apply(t,s),void 0===n||(e.exports=n)},8878:(e,t,i)=>{var s,n;s=[i,t,i(851),i(227)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.Label{set text(e){super.text=e,Object(this.label.parentElement.parentElement).control.searchElement("clip.textWrapper."+this.label.id).innerHTML=s.translate(e)}}t.TintedProgressBarLabel=n}.apply(t,s),void 0===n||(e.exports=n)},2067:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){super.initElements(),this.registerElements("description",{image:"wrapper.image",title:"wrapper.title"})}update(e){this._dataModel=e,this.image.style.backgroundImage=`url(${this._dataModel.image})`,this.title.innerHTML=`${this._dataModel.title}`,this.description.innerHTML=`${this._dataModel.description}`}}t.WeaponPerkItem=s}.apply(t,s),void 0===n||(e.exports=n)},8057:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{constructor(){super(...arguments),this._blankInc=32,this._blankCount=0,this._freeBlanks=[]}onRegister(){super.onRegister(),this.addBlankItems(this._blankInc)}addBlankItems(e){const t=this.content,i=this._blankCount+e;for(;this._blankCount<=i;this._blankCount++){const e=document.createElement("div");e.id=`blank_${this._blankCount}`,e.classList.add("HudIconsBlank"),t.appendChild(e),this._freeBlanks.push(e)}}addChildToStage(e){0==this._freeBlanks.length&&this.addBlankItems(this._blankInc),this._freeBlanks.pop().appendChild(e.content)}removeChildFromStage(e){this._freeBlanks.push(e.content.parentElement),super.removeChildFromStage(e)}}t.HudIcons=s}.apply(t,s),void 0===n||(e.exports=n)},4258:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){super.initElements(),this.registerElements({stasis:"stasis"})}onRegister(){const e=`AbilitiesPanelModel_${this.controlId}`;this.content.setAttribute("data-bind-class-toggle",`Invader:{{${e}.isInvader}};`),this.stasis.setAttribute("data-bind-class-toggle",`Hidden:!{{${e}.isStasis}};`)}}t.AbilitiesPanel=s}.apply(t,s),void 0===n||(e.exports=n)},8989:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){super.initElements(),this.registerElements({wrapper:"wrapper",progress:"wrapper.progress.clip",image:"wrapper.image",timer:"wrapper.timer.label",slot1:"wrapper.slots.wrapper.slot1",slot1Clip:"wrapper.slots.wrapper.slot1.clip",slot2:"wrapper.slots.wrapper.slot2",slot2Clip:"wrapper.slots.wrapper.slot2.clip",slot3:"wrapper.slots.wrapper.slot3",slot3Clip:"wrapper.slots.wrapper.slot3.clip"})}onRegister(){const e=`AbilityStaticModel_${this.controlId}`,t=`AbilityStateModel_${this.controlId}`,i=`AbilityFrequentModel_${this.controlId}`,s=`AbilityAnimationModel_${this.controlId}`;this.content.setAttribute("data-bind-class",`{{${t}.state}}`),this.wrapper.setAttribute("data-bind-animation-restart",`{{${s}.blink}}`),this.progress.setAttribute("data-bind-style-height",`100 - ({{${i}.progress}} > 100 ? 100 : {{${i}.progress}}) + "%"`),this.timer.setAttribute("data-bind-value",`({{${i}.progress}} > 100 ? 100 : {{${i}.progress}})`),this.image.setAttribute("data-bind-style-background-image-url",`{{${e}.icon}}`),this.image.setAttribute("data-bind-animation-restart",`{{${s}.useRestricted}}`),this.slot1.setAttribute("data-bind-class-toggle",`Hidden:{{${e}.chargeCount}} == 1`),this.slot1.setAttribute("data-bind-class",`{{${i}.progress}} < 100 ? "Filling" : "Ready"`),this.slot1Clip.setAttribute("data-bind-style-width",`({{${i}.progress}} > 100 ? 100 : {{${i}.progress}}) + "%"`),this.slot2.setAttribute("data-bind-class-toggle",`Hidden:{{${e}.chargeCount}} < 2`),this.slot2.setAttribute("data-bind-class",`{{${i}.progress}} < 200 ? "Filling" : "Ready"`),this.slot2Clip.setAttribute("data-bind-style-width",`({{${i}.progress}} > 200 ? 100 : {{${i}.progress}} - 100) + "%"`),this.slot3.setAttribute("data-bind-class-toggle",`Hidden:{{${e}.chargeCount}} < 3`),this.slot3.setAttribute("data-bind-class",`{{${i}.progress}} < 300 ? "Filling" : "Ready"`),this.slot3Clip.setAttribute("data-bind-style-width",`({{${i}.progress}} < 200 ? 0 : {{${i}.progress}} - 200) + "%"`)}}t.AbilitiesPanelAbility=s}.apply(t,s),void 0===n||(e.exports=n)},35:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){super.initElements(),this.registerElements({progress:"wrapper.mask.progress.clip",boost:"wrapper.mask.progress.clip.boost.clip",image:"wrapper.image",timer:"wrapper.timer.label"})}onRegister(){const e=`AbilityStaticModel_${this.controlId}`,t=`AbilityStateModel_${this.controlId}`,i=`AbilityFrequentModel_${this.controlId}`,s=`AbilityAnimationModel_${this.controlId}`,n=`AbilityBoostModel_${this.controlId}`;this.content.setAttribute("data-bind-class",`{{${t}.state}}`),this.boost.setAttribute("data-bind-style-width",`100 - {{${n}.progress}} + "%"`),this.boost.setAttribute("data-bind-animation-restart",`{{${n}.progress}}`),this.progress.setAttribute("data-bind-style-width",`{{${i}.progress}} + "%"`),this.timer.setAttribute("data-bind-value",`{{${i}.progress}}`),this.image.setAttribute("data-bind-style-background-image-url",`{{${e}.icon}}`),this.image.setAttribute("data-bind-animation-restart",`{{${s}.useRestricted}}`)}}t.AbilitiesPanelUltimate=s}.apply(t,s),void 0===n||(e.exports=n)},4917:(e,t,i)=>{var s,n;s=[i,t,i(227),i(8606),i(6749)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.Control{constructor(){super(...arguments),this.onWaitActivate1=()=>{const e=this.searchElement("abilities_panel");e.setAttribute("data-control","TestAbilitiesPanelScreen"),this.abilitiesPanel=i.Factory.registerChildControl(e),this.stasisBtn.addEventListener("click",(()=>{this.abilitiesPanel.stasisToggle()}));const t=this.abilitiesPanel.searchElement("ultimate");t.setAttribute("data-control","TestAbilitiesPanelUltimate"),this.ultimate=i.Factory.registerChildControl(t),this.setFillingUltimateBtn.addEventListener("click",(()=>{this.ultimate.setFilling()})),this.setReadyUltimateBtn.addEventListener("click",(()=>{this.ultimate.setReady()})),this.setUsedUltimateBtn.addEventListener("click",(()=>{this.ultimate.setUsed()})),this.addProgressUltimateBtn.addEventListener("click",(()=>{this.ultimate.addProgress()})),this.useRestrictedUltimateBtn.addEventListener("click",(()=>{this.ultimate.useRestricted()}));const s=this.abilitiesPanel.searchElement("ability2");s.setAttribute("data-control","TestAbilitiesPanelAbility"),this.ability2=i.Factory.registerChildControl(s),this.setFillingAbilitiesBtn.addEventListener("click",(()=>{this.ability2.setFilling()})),this.setReadyAbilitiesBtn.addEventListener("click",(()=>{this.ability2.setReady()})),this.addProgressAbilitiesBtn.addEventListener("click",(()=>{this.ability2.addProgress()})),this.useRestrictedAbilitiesBtn.addEventListener("click",(()=>{this.ability2.useRestricted()}))}}init(){super.init(),this.registerElements({stasisBtn:"buttons1.stasisBtn",setUsedUltimateBtn:"buttons2.setUsedBtn",setFillingUltimateBtn:"buttons2.setFillingBtn",setReadyUltimateBtn:"buttons2.setReadyBtn",addProgressUltimateBtn:"buttons2.addProgressBtn",useRestrictedUltimateBtn:"buttons2.useRestrictedBtn",setFillingAbilitiesBtn:"buttons3.setFillingBtn",setReadyAbilitiesBtn:"buttons3.setReadyBtn",addProgressAbilitiesBtn:"buttons3.addProgressBtn",useRestrictedAbilitiesBtn:"buttons3.useRestrictedBtn"}),n.waitSeveralFrames(this.onWaitActivate1)}}t.TestAbilitiesPanel=a}.apply(t,s),void 0===n||(e.exports=n)},8047:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(8989)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.AbilitiesPanelAbility{init(){super.init(),this.onRegister()}onRegister(){this.staticModel=`TestAbility_AbilityStaticModel_${this.controlId}`,this.stateModel=`TestAbility_AbilityStateModel_${this.controlId}`,this.frequentModel=`TestAbility_AbilityFrequentModel_${this.controlId}`,this.animationModel=`TestAbility_AbilityAnimationModel_${this.controlId}`,this.content.setAttribute("data-bind-class",`{{${this.stateModel}.state}}=='Used' ? 'Ready' : {{${this.stateModel}.state}}`),this.content.setAttribute("data-bind-animation-restart-all",`{{${this.animationModel}.blink}}`),this.progress.setAttribute("data-bind-style-height",`100 - ({{${this.frequentModel}.progress}} > 100 ? 100 : {{${this.frequentModel}.progress}}) + "%"`),this.timer.setAttribute("data-bind-value",`({{${this.frequentModel}.progress}} > 100 ? 100 : {{${this.frequentModel}.progress}}) + "%"`),this.image.setAttribute("data-bind-style-background-image-url",`{{${this.staticModel}.icon}}`),this.image.setAttribute("data-bind-animation-restart",`{{${this.animationModel}.useRestricted}}`),this.slot1.setAttribute("data-bind-class-toggle",`Hidden:{{${this.staticModel}.chargeCount}} == 1`),this.slot1.setAttribute("data-bind-class",`{{${this.frequentModel}.progress}} < 100 ? "Filling" : "Ready"`),this.slot1Clip.setAttribute("data-bind-style-width",`({{${this.frequentModel}.progress}} > 100 ? 100 : {{${this.frequentModel}.progress}}) + "%"`),this.slot2.setAttribute("data-bind-class-toggle",`Hidden:{{${this.staticModel}.chargeCount}} < 2`),this.slot2.setAttribute("data-bind-class",`{{${this.frequentModel}.progress}} < 200 ? "Filling" : "Ready"`),this.slot2Clip.setAttribute("data-bind-style-width",`({{${this.frequentModel}.progress}} > 200 ? 100 : {{${this.frequentModel}.progress}} - 100) + "%"`),this.slot3.setAttribute("data-bind-class-toggle",`Hidden:{{${this.staticModel}.chargeCount}} < 3`),this.slot3.setAttribute("data-bind-class",`{{${this.frequentModel}.progress}} < 300 ? "Filling" : "Ready"`),this.slot3Clip.setAttribute("data-bind-style-width",`({{${this.frequentModel}.progress}} < 200 ? 0 : {{${this.frequentModel}.progress}} - 200) + "%"`),i.engine.createJSModel(this.stateModel,{state:"Filling"}),i.engine.createJSModel(this.staticModel,{icon:"coui://libs/ui/images/kill_log/weapons_grenade_kill_log_npa.dds:spg10_icon",chargeCount:3}),i.engine.createJSModel(this.frequentModel,{progress:50}),i.engine.createJSModel(this.animationModel,{blink:!1,useRestricted:!1}),i.engine.updateWholeModel(window[this.stateModel]),i.engine.synchronizeModels(),i.engine.updateWholeModel(window[this.staticModel]),i.engine.synchronizeModels(),i.engine.updateWholeModel(window[this.frequentModel]),i.engine.synchronizeModels(),i.engine.updateWholeModel(window[this.animationModel]),i.engine.synchronizeModels()}setFilling(){window[this.stateModel].state="Filling",i.engine.updateWholeModel(window[this.stateModel]),i.engine.synchronizeModels()}setReady(){window[this.stateModel].state="Ready",i.engine.updateWholeModel(window[this.stateModel]),i.engine.synchronizeModels()}setUsed(){window[this.stateModel].state="Used",i.engine.updateWholeModel(window[this.stateModel]),i.engine.synchronizeModels()}addProgress(){window[this.frequentModel].progress+=Math.ceil(10*Math.random()),window[this.frequentModel].progress>100&&(window[this.frequentModel].progress=0),i.engine.updateWholeModel(window[this.frequentModel]),i.engine.synchronizeModels()}useRestricted(){window[this.animationModel].useRestricted=!0,i.engine.updateWholeModel(window[this.animationModel]),i.engine.synchronizeModels(),window[this.animationModel].useRestricted=!1}}t.TestAbilitiesPanelAbility=n}.apply(t,s),void 0===n||(e.exports=n)},758:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(4258)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.AbilitiesPanel{init(){super.init(),this.onRegister()}onRegister(){this.viewModelName=`Test_AbilityPanelModel_${this.controlId}`,this.content.setAttribute("data-bind-class-toggle",`Invader:{{${this.viewModelName}.isInvader}};`),this.stasis.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.viewModelName}.isStasis}};`),i.engine.createJSModel(this.viewModelName,{isStasis:!1,isInvader:!1})}stasisToggle(){window[this.viewModelName].isStasis=!window[this.viewModelName].isStasis,i.engine.updateWholeModel(window[this.viewModelName]),i.engine.synchronizeModels()}}t.TestAbilitiesPanelScreen=n}.apply(t,s),void 0===n||(e.exports=n)},9070:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(35)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.AbilitiesPanelUltimate{init(){super.init(),this.onRegister()}onRegister(){this.staticModel=`TestUltimate_AbilityStaticModel_${this.controlId}`,this.stateModel=`TestUltimate_AbilityStateModel_${this.controlId}`,this.frequentModel=`TestUltimate_AbilityFrequentModel_${this.controlId}`,this.animationModel=`TestUltimate_AbilityAnimationModel_${this.controlId}`,this.boostViewModelName=`TestUltimate_AbilityBoostModel_${this.controlId}`,this.content.setAttribute("data-bind-class",`{{${this.stateModel}.state}}`),this.boost.setAttribute("data-bind-style-width",`100 - {{${this.boostViewModelName}.progress}} + "%"`),this.boost.setAttribute("data-bind-animation-restart",`{{${this.boostViewModelName}.progress}}`),this.progress.setAttribute("data-bind-style-width",`{{${this.frequentModel}.progress}} + "%"`),this.timer.setAttribute("data-bind-value",`{{${this.frequentModel}.progress}} + "%"`),this.image.setAttribute("data-bind-style-background-image-url",`{{${this.staticModel}.icon}}`),this.image.setAttribute("data-bind-animation-restart",`{{${this.animationModel}.useRestricted}}`),i.engine.createJSModel(this.stateModel,{state:"Filling"}),i.engine.createJSModel(this.staticModel,{icon:"coui://libs/ui/images/kill_log/weapons_ult_kill_log_npa.dds:hs01_icon"}),i.engine.createJSModel(this.frequentModel,{progress:20}),i.engine.createJSModel(this.boostViewModelName,{progress:0}),i.engine.createJSModel(this.animationModel,{useRestricted:!1}),i.engine.updateWholeModel(window[this.stateModel]),i.engine.synchronizeModels(),i.engine.updateWholeModel(window[this.staticModel]),i.engine.synchronizeModels(),i.engine.updateWholeModel(window[this.frequentModel]),i.engine.synchronizeModels(),i.engine.updateWholeModel(window[this.animationModel]),i.engine.synchronizeModels(),document.onkeydown=e=>{73==e.keyCode&&this.setFilling(),79==e.keyCode&&this.setReady(),80==e.keyCode&&this.addProgress(),219==e.keyCode&&this.useRestricted()}}setFilling(){window[this.stateModel].state="Filling",i.engine.updateWholeModel(window[this.stateModel]),i.engine.synchronizeModels()}setReady(){window[this.stateModel].state="Ready",i.engine.updateWholeModel(window[this.stateModel]),i.engine.synchronizeModels()}setUsed(){window[this.stateModel].state="Used",i.engine.updateWholeModel(window[this.stateModel]),i.engine.synchronizeModels()}addProgress(){window[this.boostViewModelName].progress=window[this.frequentModel].progress,window[this.frequentModel].progress+=Math.ceil(10*Math.random()),window[this.frequentModel].progress>100&&(window[this.frequentModel].progress=0),i.engine.updateWholeModel(window[this.boostViewModelName]),i.engine.synchronizeModels(),i.engine.updateWholeModel(window[this.frequentModel]),i.engine.synchronizeModels()}useRestricted(){window[this.animationModel].useRestricted=!0,i.engine.updateWholeModel(window[this.animationModel]),i.engine.synchronizeModels(),window[this.animationModel].useRestricted=!1}}t.TestAbilitiesPanelUltimate=n}.apply(t,s),void 0===n||(e.exports=n)},1900:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerOptionalElements({armorBar:"wrapper.armor",armorDamageBar:"wrapper.armor.wrapper.damageBar",armorProgressBar:"wrapper.armor.wrapper.progressBar",armorMarker:"wrapper.armor.marker",healthDamageBar:"wrapper.health.wrapper.damageBar",healthProgressBar:"wrapper.health.wrapper.progressBar",healthArmor:"wrapper.health.wrapper.armor",healthShield:"wrapper.health.wrapper.shield",healthMarker:"wrapper.health.wrapper.marker",segment:"wrapper.health.wrapper.segments.segment",name:"wrapper.name"})}onRegister(){this.staticViewModelName=`AiHealthBarStaticViewModel_${this.controlId}`,this.armorViewModelName=`AiHealthBarArmorViewModel_${this.controlId}`,this.healthViewModelName=`AiHealthBarHealthViewModel_${this.controlId}`,this.content.setAttribute("data-bind-style-z-index",`{{${this.staticViewModelName}.zIndex}}`),this.armorBar&&this.armorBar.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.staticViewModelName}.isArmorVisible}}`),this.armorProgressBar&&(this.armorProgressBar.setAttribute("data-bind-style-width",`{{${this.armorViewModelName}.armorProgressBar}} + "%"`),this.armorDamageBar.setAttribute("data-bind-style-width",`{{${this.armorViewModelName}.armorDamageBar}} + "%"`),this.armorDamageBar.setAttribute("data-bind-animation-restart",`{{${this.armorViewModelName}.armorDamageBar}}`),this.armorMarker.setAttribute("data-bind-style-left",`{{${this.armorViewModelName}.armorProgressBar}} + "%"`)),this.healthProgressBar.setAttribute("data-bind-style-width",`{{${this.healthViewModelName}.healthProgressBar}} + "%"`),this.healthProgressBar.setAttribute("data-bind-style-background-color",`{{${this.staticViewModelName}.healthColor}}`),this.healthDamageBar.setAttribute("data-bind-style-width",`{{${this.healthViewModelName}.healthDamageBar}} + "%"`),this.healthDamageBar.setAttribute("data-bind-animation-restart",`{{${this.healthViewModelName}.healthDamageBar}}`),this.healthDamageBar.setAttribute("data-bind-style-background-color",`{{${this.staticViewModelName}.healthColor}}`),this.healthMarker.setAttribute("data-bind-style-left",`{{${this.healthViewModelName}.healthProgressBar}} + "%"`),this.healthArmor&&this.healthArmor.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.healthViewModelName}.isArmorEnabled}}`),this.healthShield&&this.healthShield.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.healthViewModelName}.isInvulnerable}}`),this.segment.setAttribute("data-bind-for",`iter:{{${this.staticViewModelName}.segments}}`),this.segment.setAttribute("data-bind-style-left",'{{iter}} + "%"'),this.name&&this.name.setAttribute("data-bind-value",`{{${this.staticViewModelName}.text}}`)}}t.AiHealthBar=s}.apply(t,s),void 0===n||(e.exports=n)},4534:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(1900)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.AiHealthBar{constructor(){super(...arguments),this._progress=0}onRegister(){super.onRegister(),i.engine.createJSModel(this.staticViewModelName,{zIndex:0,text:"Behemoth",healthColor:"#58baff",isArmorVisible:!0,segments:[{position:50},{position:80}]}),i.engine.createJSModel(this.armorViewModelName,{armorDamageBar:100,armorProgressBar:50}),i.engine.createJSModel(this.healthViewModelName,{healthDamageBar:100,healthProgressBar:100,isArmorEnabled:!1,isInvulnerable:!1}),this.updateModels()}animateProgressBar(){setInterval((()=>{this._progress+=.1,this._progress>100&&(this._progress=0),window[this.healthViewModelName].healthProgressBar=this._progress,window[this.healthViewModelName].healthDamageBar=this._progress,this.updateModels()}),1e3/60)}damageOnClick(){window.onclick=()=>{const e=Math.ceil(10*Math.random());window[this.armorViewModelName].armorProgressBar>=0&&(window[this.armorViewModelName].armorDamageBar=window[this.armorViewModelName].armorProgressBar,window[this.armorViewModelName].armorProgressBar-=e,window[this.armorViewModelName].armorProgressBar<0&&(window[this.armorViewModelName].armorProgressBar=0)),window[this.armorViewModelName].armorProgressBar<=0&&(window[this.healthViewModelName].healthDamageBar=window[this.healthViewModelName].healthProgressBar,window[this.healthViewModelName].healthProgressBar-=e,window[this.healthViewModelName].healthProgressBar<0&&(window[this.healthViewModelName].healthProgressBar=0)),this.updateModels()}}updateModels(){i.engine.updateWholeModel(window[this.staticViewModelName]),i.engine.updateWholeModel(window[this.armorViewModelName]),i.engine.updateWholeModel(window[this.healthViewModelName]),i.engine.synchronizeModels()}}t.TestAiHealthBar=n}.apply(t,s),void 0===n||(e.exports=n)},9322:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerElements({progress:"progressbar.clip",label:"label"})}onRegister(){this.drawModelName=`CaptureProgressViewModel_${this.controlId}`,this.progress.setAttribute("data-bind-style-width",`{{${this.drawModelName}.progressValue}} + '%'`),this.label.setAttribute("data-bind-value",`{{${this.drawModelName}.label}}`)}}t.CaptureProgress=s}.apply(t,s),void 0===n||(e.exports=n)},600:(e,t,i)=>{var s,n;s=[i,t,i(7908),i(7554)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.ImageControl{initElements(){this.registerElements("image")}onUpdateImageImpl(e){this.imageData=e;const{imageData:t}=this,{style:n,dataset:a}=this.image;let o=t.fileName;0==o.indexOf("libs/ui")&&(o="coui://"+o);const r=""!=t.fileName?"url("+o+")":"none";""!=e.fileName&&n.backgroundImage!=r&&(window.clearTimeout(this.warningTimeout),this.content.classList.add("Warning"),this.warningTimeout=window.setTimeout((()=>{this.content.classList.remove("Warning")}),5e3)),n.backgroundImage=r,n.backgroundRepeat="no-repeat",n.backgroundSize=a.backgroundSize?a.backgroundSize:"contain",n.backgroundPosition=a.backgroundPosition?a.backgroundPosition:"center",""==e.fileName||e.fileName==i.emptyImageAlias?(this.content.classList.add("Empty"),window.clearTimeout(this.warningTimeout),this.content.classList.remove("Warning")):(this.content.classList.remove("Empty"),this.content.dataset.sendSignal&&s.signalContaminationIncreased.dispatch(this))}onDestroy(){window.clearTimeout(this.warningTimeout),super.onDestroy()}}t.ContaminationIcon=n}.apply(t,s),void 0===n||(e.exports=n)},7554:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(3008)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.signalContaminationIncreased=new s.Signal;class n extends i.Control{constructor(){super(...arguments),this.showWarning=()=>{window.clearTimeout(this.hideTimeout),this.modifier.classList.remove("Hide"),this.modifier.classList.add("Show"),this.hideTimeout=window.setTimeout(this.hideWarning,4e3)},this.hideWarning=()=>{window.clearTimeout(this.hideTimeout),this.modifier.classList.remove("Show"),this.modifier.classList.add("Hide")}}initElements(){this.registerElements({modifier:"wrapper.modifierContainer"})}initListeners(){t.signalContaminationIncreased.add(this.showWarning)}onDestroy(){t.signalContaminationIncreased.remove(this.showWarning),window.clearTimeout(this.hideTimeout),super.onDestroy()}}t.ContaminationPanel=n}.apply(t,s),void 0===n||(e.exports=n)},4413:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){super.initElements(),this.registerElements({default:"default",defaultItem1:"default.itemWrapper1.item",defaultItem2:"default.itemWrapper2.item",defaultItem3:"default.itemWrapper3.item",defaultItem4:"default.itemWrapper4.item",circle:"circle",innerCircle:"circle.innerCircle.innerCircleWhite",run:"run",grenadeLauncher:"grenadeLauncher",sniperRifle:"sniperRifle",sniperRifleItem1:"sniperRifle.itemWrapper1.item",sniperRifleItem2:"sniperRifle.itemWrapper2.item",shotgun:"shotgun",shotgunItem1:"shotgun.itemWrapper1.item",shotgunItem2:"shotgun.itemWrapper2.item",shotgunItem3:"shotgun.itemWrapper3.item",shotgunItem4:"shotgun.itemWrapper4.item",minigun:"minigun",minigunItem1:"minigun.itemWrapper1.item",minigunItem2:"minigun.itemWrapper2.item",pistol:"pistol",pistolItem1:"pistol.itemWrapper1.item",pistolItem2:"pistol.itemWrapper2.item",pistolItem3:"pistol.itemWrapper3.item",additional1:"additional1",additional1Item1:"additional1.itemWrapper1.item",additional1Item2:"additional1.itemWrapper2.item",additional2:"additional2",additional2Item1:"additional2.itemWrapper1.item",additional2Item2:"additional2.itemWrapper2.item",additional2Item3:"additional2.itemWrapper3.item",additional2Item4:"additional2.itemWrapper4.item",semiAutoSniper:"semiAutoSniper",semiAutoSniperItem1:"semiAutoSniper.itemWrapper1.item",semiAutoSniperItem2:"semiAutoSniper.itemWrapper2.item",semiAutoSniperItem3:"semiAutoSniper.itemWrapper3.item",semiAutoSniperItem4:"semiAutoSniper.itemWrapper4.item",boltActionSniper:"boltActionSniper",subMashineGun1:"subMashineGun1",subMashineGun1Item1:"subMashineGun1.itemWrapper1.item",subMashineGun1Item2:"subMashineGun1.itemWrapper2.item",subMashineGun1Item3:"subMashineGun1.itemWrapper3.item",subMashineGun2:"subMashineGun2",subMashineGun2Item1:"subMashineGun2.itemWrapper1.item",subMashineGun2Item2:"subMashineGun2.itemWrapper2.item",subMashineGun2Item3:"subMashineGun2.itemWrapper3.item",subMashineGun3:"subMashineGun3",subMashineGun3Item1:"subMashineGun3.itemWrapper1.item",subMashineGun3Item2:"subMashineGun3.itemWrapper2.item",subMashineGun3Item3:"subMashineGun3.itemWrapper3.item",semiAutoShotgun:"semiAutoShotgun",semiAutoShotgunItem1:"semiAutoShotgun.itemWrapper1.item",semiAutoShotgunItem2:"semiAutoShotgun.itemWrapper2.item",semiAutoShotgunItem3:"semiAutoShotgun.itemWrapper3.item",semiAutoShotgunItem4:"semiAutoShotgun.itemWrapper4.item",pumpShotgun:"pumpShotgun",pumpShotgunItem1:"pumpShotgun.itemWrapper1.item",pumpShotgunItem2:"pumpShotgun.itemWrapper2.item",pumpShotgunItem3:"pumpShotgun.itemWrapper3.item",pumpShotgunItem4:"pumpShotgun.itemWrapper4.item",burstAR:"burstAR",burstARItem1:"burstAR.itemWrapper1.item",burstARItem2:"burstAR.itemWrapper2.item",semiAutoHandgun:"semiAutoHandgun",semiAutoHandgunItem1:"semiAutoHandgun.itemWrapper1.item",semiAutoHandgunItem2:"semiAutoHandgun.itemWrapper2.item",semiAutoHandgunItem3:"semiAutoHandgun.itemWrapper3.item",revolvers:"revolvers",revolversItem1:"revolvers.itemWrapper1.item",revolversItem2:"revolvers.itemWrapper2.item",revolversItem3:"revolvers.itemWrapper3.item"})}onRegister(){this.default.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 1;Reloading:{{HUDCrosshairViewModel_${this.controlId}.isReloading}};NotReloading:!{{HUDCrosshairViewModel_${this.controlId}.isReloading}};`),this.defaultItem1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.defaultItem2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.defaultItem3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.defaultItem4.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.circle.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 2`),this.innerCircle.setAttribute("data-bind-style-width",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 - 1 + "vh"`),this.innerCircle.setAttribute("data-bind-style-height",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 - 1 + "vh"`),this.run.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 3`),this.grenadeLauncher.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 4`),this.sniperRifle.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 5`),this.sniperRifleItem1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.2 + "vh"`),this.sniperRifleItem2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.2 + "vh"`),this.shotgun.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 6`),this.shotgunItem1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1.1 + "vh"`),this.shotgunItem2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1.1 + "vh"`),this.shotgunItem3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1.1 + "vh"`),this.shotgunItem4.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1.1 + "vh"`),this.minigun.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 7`),this.minigunItem1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.2 + "vh"`),this.minigunItem2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.2 + "vh"`),this.pistol.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 8`),this.pistolItem1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + 0.8 + "vh"`),this.pistolItem2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + 0.8 + "vh"`),this.pistolItem3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + 0.8 + "vh"`),this.additional1.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 9`),this.additional1Item1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.2 + "vh"`),this.additional1Item2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.2 + "vh"`),this.additional2.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 10`),this.additional2Item1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.2 + "vh"`),this.additional2Item2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.additional2Item3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.2 + "vh"`),this.additional2Item4.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.semiAutoSniper.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 11`),this.semiAutoSniperItem1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.4 + "vh"`),this.semiAutoSniperItem2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.4 + "vh"`),this.semiAutoSniperItem3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.4 + "vh"`),this.semiAutoSniperItem4.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.4 + "vh"`),this.boltActionSniper.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 12`),this.subMashineGun1.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 13`),this.subMashineGun1Item1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.subMashineGun1Item2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.subMashineGun1Item3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.subMashineGun2.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 14`),this.subMashineGun2Item1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.subMashineGun2Item2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.subMashineGun2Item3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.subMashineGun3.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 15`),this.subMashineGun3Item1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.subMashineGun3Item2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.subMashineGun3Item3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.semiAutoShotgun.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 16`),this.semiAutoShotgunItem1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1.6 + "vh"`),this.semiAutoShotgunItem2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1.6 + "vh"`),this.semiAutoShotgunItem3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1.6 + "vh"`),this.semiAutoShotgunItem4.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1.6 + "vh"`),this.pumpShotgun.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 17`),this.pumpShotgunItem1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1 + "vh"`),this.pumpShotgunItem2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1 + "vh"`),this.pumpShotgunItem3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1 + "vh"`),this.pumpShotgunItem4.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -1 + "vh"`),this.burstAR.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 18`),this.burstARItem1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.8 + "vh"`),this.burstARItem2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.8 + "vh"`),this.semiAutoHandgun.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 19`),this.semiAutoHandgunItem1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.2 + "vh"`),this.semiAutoHandgunItem2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.2 + "vh"`),this.semiAutoHandgunItem3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + -0.2 + "vh"`),this.revolvers.setAttribute("data-bind-class-toggle",`NonVisual:{{HUDCrosshairViewModel_${this.controlId}.skinId}} != 20`),this.revolversItem1.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.revolversItem2.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`),this.revolversItem3.setAttribute("data-bind-style-bottom",`{{HUDCrosshairViewModel_${this.controlId}.spread}} * 100 / 2 + "vh"`)}}t.Crosshair=s}.apply(t,s),void 0===n||(e.exports=n)},6206:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(6749)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.Control{constructor(){super(...arguments),this.hitProgressElements=[],this.feedbackItems=[]}initElements(){this.registerElements({hitTemplate:"hitTemplate",weakPointHitTemplate:"weakPointHitTemplate",notWeakPointHitTemplate:"notWeakPointHitTemplate",killTemplate:"killTemplate",shieldHitTemplate:"shieldPointHitTemplate",shieldBreakTemplate:"shieldPointBreakTemplate",invulnerableHitTemplate:"invulnerableTemplate"}),this.hitProgressElements[0]=this.searchElement("hitTemplate.content.topContainer.leftContainer.hitProgress_1.clip"),this.hitProgressElements[1]=this.searchElement("hitTemplate.content.topContainer.rightContainer.hitProgress_2.clip"),this.hitProgressElements[2]=this.searchElement("hitTemplate.content.bottomContainer.leftContainer.hitProgress_3.clip"),this.hitProgressElements[3]=this.searchElement("hitTemplate.content.bottomContainer.rightContainer.hitProgress_4.clip"),this.feedbackItems=[this.hitTemplate,this.weakPointHitTemplate,this.notWeakPointHitTemplate,this.killTemplate,this.shieldHitTemplate,this.shieldBreakTemplate,this.invulnerableHitTemplate],this.feedbackItems.forEach((e=>{this.content.appendChild(e)}))}playCssAnimation(e){this.currentAnimated&&this.currentAnimated!=e&&s.stopAllAnimations(this.currentAnimated),s.restartAllAnimations(e),this.currentAnimated=e}hit(e=1,t=!1){const i=.3+.7*e;t?this.hitTemplate.classList.add("Headshot"):this.hitTemplate.classList.remove("Headshot"),this.hitProgressElements.forEach((e=>{e.style.width=100*i+"%"})),this.playCssAnimation(this.hitTemplate)}weakPointHit(){this.playCssAnimation(this.weakPointHitTemplate)}notWeakPointHit(){this.playCssAnimation(this.notWeakPointHitTemplate)}shieldHit(){this.playCssAnimation(this.shieldHitTemplate)}shieldBreak(){this.playCssAnimation(this.shieldBreakTemplate)}invulnerableHit(){this.playCssAnimation(this.invulnerableHitTemplate)}kill(){this.playCssAnimation(this.killTemplate)}}t.HitFeedback=n}.apply(t,s),void 0===n||(e.exports=n)},3706:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerElements({leftBarWrapper:"pieProgressbar.leftMask.barWrapper",rightBarWrapper:"pieProgressbar.rightMask.barWrapper"})}onRegister(){this.leftBarWrapper.setAttribute("data-bind-style-transform-rotate",`{{CircleProgressViewModel_${this.controlId}.progress}} > 180 ? {{CircleProgressViewModel_${this.controlId}.progress}} : 180`),this.leftBarWrapper.setAttribute("data-bind-style-opacity",`{{CircleProgressViewModel_${this.controlId}.progress}} < 180 ? 0 : 1`),this.rightBarWrapper.setAttribute("data-bind-style-transform-rotate",`{{CircleProgressViewModel_${this.controlId}.progress}} < 180 ? {{CircleProgressViewModel_${this.controlId}.progress}} : 180`),this.rightBarWrapper.setAttribute("data-bind-style-opacity",`{{CircleProgressViewModel_${this.controlId}.progress}} > 0 ? 1 : 0`),this.rightBarWrapper.setAttribute("data-bind-style-background-color",`{{CircleProgressViewModel_${this.controlId}.progress}} < 180 ? 'transparent' : '#e2e7e8'`)}}t.ReloadingProgress=s}.apply(t,s),void 0===n||(e.exports=n)},6721:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(227)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.Control{initElements(){this.registerElements("container")}clearDamageFeedback(){this.container.innerHTML=""}makeDamageFeedback(e){const t=s.Factory.createChildControl("DamageFeedbackItem",this.container);t.rotation=e,t.lifetime=1500}}t.DamageFeedback=n}.apply(t,s),void 0===n||(e.exports=n)},2392:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{onDestroy(){window.clearTimeout(this.destroyTimeout),super.onDestroy()}get rotation(){return this._rotation}set rotation(e){this._rotation=e,this.content.style.transform=`rotate(${e}deg)`}set lifetime(e){this.visible=!0,window.clearTimeout(this.destroyTimeout),this.destroyTimeout=window.setTimeout((()=>{this.destroy()}),e)}}t.DamageFeedbackItem=s}.apply(t,s),void 0===n||(e.exports=n)},6300:(e,t,i)=>{var s,n;s=[i,t,i(9664),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{constructor(){super(...arguments),this.isAnimationEnd=!0,this.showEncounterComplitionDuration=3500,this.showDescriptionDuration=5e3,this.hideEncounterComplitionDuration=1e3,this.restartAnimation=()=>{(new i.AnimationRestartAllHandler).update(this.content,!0)},this.showDescrition=()=>{this.content.classList.add("ShowDescription")},this.hideEncounterComplition=()=>{this.content.classList.add("HideAnimation")},this.resetState=()=>{this.visible=!1,this.content.classList.remove("ShowDescription"),this.content.classList.remove("HideAnimation"),this.isAnimationEnd=!0}}initElements(){this.registerElements({title:"completion.title",text:"completion.text",description:"description"})}onRegister(){this.viewModelName=`EncounterCompletionViewModel_${this.controlId}`,this.title.setAttribute("data-bind-value",`{{${this.viewModelName}.title}}`),this.text.setAttribute("data-bind-value",`{{${this.viewModelName}.text}}`),this.description.setAttribute("data-bind-html",`{{${this.viewModelName}.description}}`)}get visible(){return this._visible}set visible(e){super.visible=e,e&&this.isAnimationEnd&&(this.isAnimationEnd=!1,this.restartAnimation(),this.timer1=window.setTimeout(this.showDescrition,this.showEncounterComplitionDuration),this.timer2=window.setTimeout(this.hideEncounterComplition,this.showEncounterComplitionDuration+this.showDescriptionDuration),this.timer3=window.setTimeout(this.resetState,this.showEncounterComplitionDuration+this.showDescriptionDuration+this.hideEncounterComplitionDuration))}onDestroy(){super.onDestroy(),clearTimeout(this.timer1),clearTimeout(this.timer2),clearTimeout(this.timer3)}}t.EncounterCompletion=n}.apply(t,s),void 0===n||(e.exports=n)},9384:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(6300)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.EncounterCompletion{onRegister(){this.viewModelName=`TestModel_${this.controlId}`,this.title.setAttribute("data-bind-value",`{{${this.viewModelName}.title}}`),this.text.setAttribute("data-bind-value",`{{${this.viewModelName}.text}}`),this.description.setAttribute("data-bind-html",`{{${this.viewModelName}.description}}`),i.engine.createJSModel(this.viewModelName,{title:"SHIPWRECK",text:"THE ENCOUNTER IS OVER",description:"You have <span>successfully</span> completed the challenge.<div></div>Earned items added to the <span>list of prizes</span>"}),i.engine.updateWholeModel(window[this.viewModelName]),i.engine.synchronizeModels(),document.addEventListener("click",(()=>{this.visible=!0}))}}t.TestEncounterCompletion=n}.apply(t,s),void 0===n||(e.exports=n)},4507:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerElements({progress:"progress.mask.clip",progressPrevious:"progress.mask.clipPrevious",progressPreviousEndCap:"progress.mask.clipPreviousEndCap",payload:"payload",point:"points.point",timer:"wrapper.timer",overtimeProgress:"wrapper.overtimeProgress",overtimeProgressClip:"wrapper.overtimeProgress.clip",overtimeProgressRemainder:"wrapper.overtimeProgress.clipRemainder"})}onRegister(){this.staticModel=`EscortProgressStaticViewModel_${this.controlId}`,this.dynamicModel=`EscortProgressDynamicViewModel_${this.controlId}`,this.overtimeModel=`EscortOvertimeViewModel_${this.controlId}`,this.timerModel=`EscortTimerViewModel_${this.controlId}`,this.progress.setAttribute("data-bind-style-width",`{{${this.dynamicModel}.progress}} + "%"`),this.progressPrevious.setAttribute("data-bind-style-width",`{{${this.dynamicModel}.progressPrevious}} + "%"`),this.progressPreviousEndCap.setAttribute("data-bind-class-toggle",`Hidden:{{${this.dynamicModel}.progressPrevious}} < 100`),this.payload.setAttribute("data-bind-style-left",`{{${this.dynamicModel}.progress}} + "%"`),this.payload.setAttribute("data-bind-class",`{{${this.dynamicModel}.payloadType}}`),this.point.setAttribute("data-bind-for",`iter:{{${this.staticModel}.points}}`),this.point.setAttribute("data-bind-style-left",'{{iter.position}} + "%"'),this.point.setAttribute("data-bind-class-toggle","Opened:{{iter.isPassed}}"),this.timer.setAttribute("data-bind-value",`{{${this.timerModel}.timer}}`),this.overtimeProgress.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.overtimeModel}.isOvertimeProgress}}`),this.overtimeProgressClip.setAttribute("data-bind-style-width",`{{${this.overtimeModel}.overtimeProgress}} + "%"`),this.overtimeProgressRemainder.setAttribute("data-bind-style-width",`(100-{{${this.overtimeModel}.overtimeProgress}}) + "%"`)}}t.EscortPanel=s}.apply(t,s),void 0===n||(e.exports=n)},2023:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(4507)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.EscortPanel{constructor(){super(...arguments),this._progress=0,this._progressPrevious=50,this._overtimeProgress=100}onRegister(){super.onRegister(),i.engine.createJSModel(this.staticModel,{points:[{position:30,isPassed:!1},{position:60,isPassed:!1},{position:90,isPassed:!1}]}),i.engine.createJSModel(this.dynamicModel,{progress:10,progressPrevious:100,payloadType:"Moving",timer:"Overtime",overtimeProgress:10,isOvertimeProgress:!0}),setInterval((()=>{this.animateProgress(),this.animatePoints(),this.animateOvertimeProgress(),this.updateModels()}),1e3/60)}animateProgress(){this._progress+=.3,this._progress>100&&(this._progress=0),window[this.dynamicModel].progress=this._progress}animateProgressPrevious(){this._progressPrevious+=.3,this._progressPrevious>100&&(this._progressPrevious=0),window[this.dynamicModel].progressPrevious=this._progressPrevious}animatePoints(){this._progress>0&&(window[this.dynamicModel].payloadType="Neutral"),this._progress>30&&(window[this.dynamicModel].payloadType="Moving"),this._progress>60&&(window[this.dynamicModel].payloadType="Contested")}animateOvertimeProgress(){this._overtimeProgress-=.3,this._overtimeProgress<0&&(this._overtimeProgress=100),window[this.dynamicModel].overtimeProgress=this._overtimeProgress}updateModels(){i.engine.updateWholeModel(window[this.dynamicModel]),i.engine.synchronizeModels()}}t.TestEscortPanel=n}.apply(t,s),void 0===n||(e.exports=n)},2088:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s="gamepad_animation",n="mouse_animation";class a extends i.Control{initElements(){this.registerControls({mouseContainer:"offsetContainer.mouseContainer",gamepadContainer:"offsetContainer.gamepadContainer"}),this.gamepadContainer.visible=!1}mouse(){this.changeSkin(n)}gamepad(){this.changeSkin(s)}changeSkin(e){switch(this.content.classList.remove("Animation"),e){case n:this.mouseContainer.visible=!0,this.gamepadContainer.visible=!1;break;case s:this.gamepadContainer.visible=!0,this.mouseContainer.visible=!1}this.content.classList.add("Animation")}}t.GlitchIcon=a}.apply(t,s),void 0===n||(e.exports=n)},7493:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(7515),i(3008)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.EntityHealthBar{constructor(){super(...arguments),this.blinkDuration=.4,this.damageDuration=.5}initElements(){super.initElements(),this.registerControls("resurrectProgress"),this.resurrectProgress.setRelativeValue(100)}updateWithoutAnim(){this.stopBlinking(),this.damageBg.content.style.opacity="0",i.TweenMax.killTweensOf(this.damageBg.content.style),this.updateHorizontalView()}animRegen(){this.startBlinking(),this.damageBg.content.style.opacity="0",this.newPosition=100*this.relativeValue,this.progressClip.style.width=`${this.newPosition}%`,100==this.newPosition&&this.stopBlinking()}animDamage(){this.stopBlinking(),this.damageBg.content.style.opacity="1",this.damageBg.content.style.height="100%",this.newPosition=100*this.relativeValue,this.progressClip.style.width=`${this.newPosition}%`,this.damageBg.setRelativeValue((this.prevRelativeValue>1?1:this.prevRelativeValue)-this.relativeValue),this.damageBg.content.style.left=`${this.newPosition}%`,this._isAnimated?i.TweenMax.to(this.damageBg.content.style,this.damageDuration,{ease:i.Linear.easeNone,opacity:0,height:"300%"}):window.setTimeout((()=>{this.damageBg.content.style.opacity="0"}),this.damageDuration),this._signalAnimDamage&&this._signalAnimDamage.dispatch()}startBlinking(){this.isBlinking||(this.isBlinking=!0,i.TweenMax.killTweensOf(this.progressClip),this.progressClip.style.backgroundColor="#edf4f7",this._isAnimated&&i.TweenMax.to(this.progressClip,this.blinkDuration,{ease:i.Linear.easeNone,repeat:-1,yoyo:!0,backgroundColor:"#01ff9a"}),this._signalBlinkStarted&&this._signalBlinkStarted.dispatch())}stopBlinking(){this.isBlinking&&(this.isBlinking=!1,i.TweenMax.killTweensOf(this.progressClip),this.progressClip.style.backgroundColor="#edf4f7",this._signalBlinkStoped&&this._signalBlinkStoped.dispatch())}get signalAnimDamage(){return this._signalAnimDamage||(this._signalAnimDamage=new n.Signal),this._signalAnimDamage}get signalBlinkStarted(){return this._signalBlinkStarted||(this._signalBlinkStarted=new n.Signal),this._signalBlinkStarted}get signalBlinkStoped(){return this._signalBlinkStoped||(this._signalBlinkStoped=new n.Signal),this._signalBlinkStoped}set isAnimated(e){super.isAnimated=e,this._isAnimated||i.TweenMax.killTweensOf(this.progressClip)}get isAnimated(){return this._isAnimated}}t.HeroHealthBar=a}.apply(t,s),void 0===n||(e.exports=n)},7501:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{constructor(){super(...arguments),this.healthTextElement=this.searchElement("playerInfo.healthText"),this.damageDuration=1,this.blinkDuration=.4}initElements(){this.registerControls({ability1:"playerInfo.ability.ability1",ability2:"playerInfo.ability.ability2",ability3:"playerInfo.ability.ability3",ability4:"playerInfo.ability.ability4",heroFace:"playerInfo.heroFaceContainer.heroFace",healthText:"playerInfo.healthText",healthBar:"healthBarContainer.healthBar",playerNickname:"playerNickname"})}onRegister(){this.content.setAttribute("data-bind-hero_panel",`{{HeroPanelViewModel_${this.controlId}}}`)}updateData(e){const{ability1:t,ability2:i,ability3:s,ability4:n,heroFace:a,healthText:o,healthBar:r,playerNickname:l}=this;t.alias=e.abilityImages[0],i.alias=e.abilityImages[1],s.alias=e.abilityImages[2],n.alias=e.abilityImages[3],t.ready=e.abilityReadiness[0],i.ready=e.abilityReadiness[1],s.ready=e.abilityReadiness[2],n.ready=e.abilityReadiness[3],a.alias=e.heroFace,o.text=String(e.healthText),l.text=e.playerNickname,r.max=e.maxHealth,r.value=e.healthValue}animDamage(){i.TweenMax.killTweensOf(this.healthTextElement),this.healthTextElement.style.color="#c90707",i.TweenMax.to(this.healthTextElement,this.damageDuration,{ease:i.Linear.easeNone,color:"#edf4f7"})}startBlinkingHealthText(){i.TweenMax.killTweensOf(this.healthTextElement),this.healthTextElement.style.color="#edf4f7",i.TweenMax.to(this.healthTextElement,this.blinkDuration,{ease:i.Linear.easeNone,repeat:-1,yoyo:!0,color:"#01ff9a"})}stopBlinkingHealthText(){i.TweenMax.killTweensOf(this.healthTextElement),this.healthTextElement.style.color="#edf4f7"}}t.HeroPanel=n}.apply(t,s),void 0===n||(e.exports=n)},8231:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HeroPanelHandler=class{update(e,t){e.control.updateData(t)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},9830:(e,t,i)=>{var s,n;s=[i,t,i(5542),i(7908)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.ImageControl{set ready(e){this.isReady!=e&&(this.isReady=e,this.isReady?(this.content.classList.add("Ready"),this.dispatchExternalEvent(i.ExternalEvent.perk_ready)):this.content.classList.remove("Ready"))}}t.HeroPerkImage=n}.apply(t,s),void 0===n||(e.exports=n)},4138:(e,t,i)=>{var s,n;s=[i,t,i(8613)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.EmptySelectableButton{addInvader(){this.content.classList.add("Dark")}removeInvader(){this.content.classList.remove("Dark")}addLocked(){this.content.classList.add("Locked")}removeLocked(){this.content.classList.remove("Locked")}}t.HeroSelectButton=s}.apply(t,s),void 0===n||(e.exports=n)},3949:(e,t,i)=>{var s,n;s=[i,t,i(851)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Label{initElements(){this.registerElements({label:"wrapper.label"}),this._dataModel={text:""}}}t.HudInfoLabel=s}.apply(t,s),void 0===n||(e.exports=n)},7579:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{get x(){return this.content.style.leftPX}set x(e){this.content.style.leftPX=+e.toFixed(0)}get y(){return this.content.style.topPX}set y(e){this.content.style.topPX=+e.toFixed(0)}}t.HudIcon=s}.apply(t,s),void 0===n||(e.exports=n)},9540:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8330)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.moveIcon=function e(t){const n={x:100,y:100,scale:1};i.TweenMax.to(n,3,{x:400,scale:1,ease:i.Power1.easeInOut,onUpdate:()=>{window[t].transform=[n.scale,0,0,n.scale,n.x,n.y],s.engine.updateWholeModel(window[t]),s.engine.synchronizeModels()},onComplete:()=>{i.TweenMax.to(n,3,{y:300,scale:1,ease:i.Power1.easeInOut,onUpdate:()=>{window[t].transform=[n.scale,0,0,n.scale,n.x,n.y],s.engine.updateWholeModel(window[t]),s.engine.synchronizeModels()},onComplete:()=>{i.TweenMax.to(n,3,{x:100,y:100,scale:1,ease:i.Power1.easeInOut,onUpdate:()=>{window[t].transform=[n.scale,0,0,n.scale,n.x,n.y],s.engine.updateWholeModel(window[t]),s.engine.synchronizeModels()},onComplete:()=>{e(t)}})}})}})},t.progressIcon=function e(t){const n={progress:0};i.TweenMax.to(n,10,{progress:360,ease:i.Linear.easeNone,onUpdate:()=>{window[t].progressValue=Math.ceil(n.progress),s.engine.updateWholeModel(window[t]),s.engine.synchronizeModels()},onComplete:()=>{e(t)}})},t.arrowRotation=function e(t){const n={rotation:0};i.TweenMax.to(n,5,{rotation:360,ease:i.Linear.easeNone,onUpdate:()=>{window[t].arrowRotation=Math.ceil(n.rotation),s.engine.updateWholeModel(window[t]),s.engine.synchronizeModels()},onComplete:()=>{e(t)}})}}.apply(t,s),void 0===n||(e.exports=n)},4931:(e,t,i)=>{var s,n;s=[i,t,i(9426)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.RaceIcon{initElements(){this.registerOptionalElements({wave:"wrapper.wave",wave1:"wrapper.wave.wave1",wave2:"wrapper.wave.wave2",wave3:"wrapper.wave.wave3",label1:"wrapper.label1",label2:"wrapper.label2",icon:"wrapper.icon",arrow:"wrapper.arrow"})}onRegister(){this.staticViewModelName=`GenericIconStaticViewModel_${this.controlId}`,this.dynamicViewModelName=`GenericIconDynamicViewModel_${this.controlId}`,this.frequentViewModelName=`GenericIconFrequentViewModel_${this.controlId}`,this.perFrameViewModelName=`GenericIconPerFrameViewModel_${this.controlId}`,this.content.setAttribute("data-bind-style-z-index",`{{${this.dynamicViewModelName}.zIndex}}`),this.wave&&(this.wave.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.dynamicViewModelName}.waveIsVisible}};Infinite:{{${this.staticViewModelName}.waveIsAnimationInfinite}}`),this.wave1.setAttribute("data-bind-style-background-image-url",`{{${this.staticViewModelName}.waveImagePath}}`),this.wave2.setAttribute("data-bind-style-background-image-url",`{{${this.staticViewModelName}.waveImagePath}}`),this.wave3.setAttribute("data-bind-style-background-image-url",`{{${this.staticViewModelName}.waveImagePath}}`),this.wave.setAttribute("data-bind-style-coh-color-matrix",`{{${this.staticViewModelName}.waveColor}}`),this.wave.setAttribute("data-bind-animation-restart-all",`{{${this.dynamicViewModelName}.isHighlight}}`)),this.label1&&(this.label1.setAttribute("data-bind-custom-html",`{{${this.frequentViewModelName}.labelPrimary}}`),this.label1.setAttribute("data-bind-style-color",`{{${this.frequentViewModelName}.labelColor}}`)),this.label2&&this.label2.setAttribute("data-bind-value",`{{${this.frequentViewModelName}.labelSecondary}}`),this.icon&&(this.icon.setAttribute("data-bind-style-background-image-url",`{{${this.dynamicViewModelName}.imagePath}}`),this.icon.setAttribute("data-bind-style-coh-color-matrix",`{{${this.dynamicViewModelName}.imageColor}}`)),this.arrow&&(this.arrow.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.frequentViewModelName}.arrowIsVisible}}`),this.arrow.setAttribute("data-bind-style-transform-rotate",`{{${this.perFrameViewModelName}.arrowRotation}}`))}}t.DefaultIcon=s}.apply(t,s),void 0===n||(e.exports=n)},8801:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(9540),i(4931)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.DefaultIcon{onRegister(){super.onRegister(),i.engine.createJSModel(this.staticViewModelName,{waveIsAnimationInfinite:!0,waveImagePath:"coui://libs/ui/images/gameface/hud_markers/rhombus_icon/rhombus_icon_wave_npa.png",testParam:!0}),i.engine.createJSModel(this.dynamicViewModelName,{waveIsVisible:!0,zIndex:100,imageColor:"",imagePath:"coui://libs/ui/images/gameface/hud_markers/escort/escort_icon_neutral.svg"}),i.engine.createJSModel(this.frequentViewModelName,{arrowIsVisible:!0,labelPrimary:'Press <div class="FontBold" style="color:#FFC328">E</div> to progress',labelSecondary:"38 m"}),i.engine.createJSModel(this.perFrameViewModelName,{arrowRotation:45}),i.engine.updateWholeModel(window[this.viewModelName]),i.engine.updateWholeModel(window[this.dynamicViewModelName]),i.engine.updateWholeModel(window[this.frequentViewModelName]),i.engine.updateWholeModel(window[this.perFrameViewModelName]),i.engine.synchronizeModels(),s.arrowRotation(this.perFrameViewModelName)}}t.TestDefaultIcon=a}.apply(t,s),void 0===n||(e.exports=n)},5380:(e,t,i)=>{var s,n;s=[i,t,i(4931)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.DefaultIcon{initElements(){super.initElements(),this.registerElements({progress:"wrapper.progress",pieProgressbar:"wrapper.progress.pieProgressbar",leftBarWrapper:"wrapper.progress.pieProgressbar.leftMask.barWrapper",rightBarWrapper:"wrapper.progress.pieProgressbar.rightMask.barWrapper",leftBar:"wrapper.progress.pieProgressbar.leftMask.barWrapper.bar",rightBar:"wrapper.progress.pieProgressbar.rightMask.barWrapper.bar"})}onRegister(){super.onRegister(),this.progressViewModelName=`GenericIconProgressViewModel_${this.controlId}`,this.progress.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.progressViewModelName}.progressIsVisible}};FlipX:{{${this.progressViewModelName}.progressIsInvert}}`),this.progress.setAttribute("data-bind-style-mask-image-url",`{{${this.staticViewModelName}.progressMaskImagePath}}`),this.leftBarWrapper.setAttribute("data-bind-style-transform-rotate",`{{${this.perFrameViewModelName}.progressValue}} > 180 ? {{${this.perFrameViewModelName}.progressValue}} : 180`),this.leftBarWrapper.setAttribute("data-bind-style-opacity",`{{${this.perFrameViewModelName}.progressValue}} < 180 ? 0 : 1`),this.rightBarWrapper.setAttribute("data-bind-style-transform-rotate",`{{${this.perFrameViewModelName}.progressValue}} < 180 ? {{${this.perFrameViewModelName}.progressValue}} : 180`),this.rightBarWrapper.setAttribute("data-bind-style-opacity",`{{${this.perFrameViewModelName}.progressValue}} > 0 ? 1 : 0`),this.pieProgressbar.setAttribute("data-bind-style-background-color",`{{${this.progressViewModelName}.progressBgColor}}`),this.leftBar.setAttribute("data-bind-style-background-color",`{{${this.progressViewModelName}.progressColor}}`),this.rightBar.setAttribute("data-bind-style-background-color",`{{${this.progressViewModelName}.progressColor}}`),this.leftBar.setAttribute("data-bind-class-toggle",`Blinking:{{${this.progressViewModelName}.progressIsBlinking}}`),this.rightBar.setAttribute("data-bind-class-toggle",`Blinking:{{${this.progressViewModelName}.progressIsBlinking}}`),this.content.setAttribute("data-bind-class-toggle",`Contesting:{{${this.dynamicViewModelName}.isContesting}}`)}}t.PieProgressIcon=s}.apply(t,s),void 0===n||(e.exports=n)},769:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(9540),i(5380)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.PieProgressIcon{onRegister(){super.onRegister(),i.engine.createJSModel(this.staticViewModelName,{waveIsVisible:!0,waveIsAnimationInfinite:!0,waveImagePath:"coui://libs/ui/images/gameface/hud_markers/rhombus_icon/rhombus_icon_wave_npa.png",progressMaskImagePath:"coui://libs/ui/images/gameface/hud_markers/rhombus_icon/rhombus_icon_mask_npa.png"}),i.engine.createJSModel(this.dynamicViewModelName,{zIndex:100,isContesting:!0,imageColor:"#ffffff",imagePath:"coui://libs/ui/images/gameface/hud_markers/res_token_icon.svg"}),i.engine.createJSModel(this.frequentViewModelName,{labelPrimary:'Press <div class="FontBold" style="color:#FFC328">E</div> to progress',labelSecondary:"38 m",arrowIsVisible:!0}),i.engine.createJSModel(this.perFrameViewModelName,{progressValue:45,arrowRotation:45}),i.engine.createJSModel(this.progressViewModelName,{progressIsVisible:!0,progressIsInvert:!1,progressIsBlinking:!1,progressBgColor:"#E9F0F3",progressColor:"#1494D8"}),i.engine.updateWholeModel(window[this.viewModelName]),i.engine.updateWholeModel(window[this.dynamicViewModelName]),i.engine.updateWholeModel(window[this.frequentViewModelName]),i.engine.updateWholeModel(window[this.perFrameViewModelName]),i.engine.synchronizeModels(),s.progressIcon(this.frequentViewModelName),s.arrowRotation(this.perFrameViewModelName)}}t.TestPieProgressIcon=a}.apply(t,s),void 0===n||(e.exports=n)},5579:(e,t,i)=>{var s,n;s=[i,t,i(4931)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.DefaultIcon{onRegister(){super.onRegister(),this.content.setAttribute("data-bind-class-toggle",`VisualOffset:{{${this.staticViewModelName}.visualOffsetEnabled}}`)}}t.PingIcon=s}.apply(t,s),void 0===n||(e.exports=n)},5249:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(5579)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.PingIcon{onRegister(){super.onRegister(),i.engine.createJSModel(this.staticViewModelName,{waveIsVisible:!0,waveIsAnimationInfinite:!0,waveImagePath:"coui://libs/ui/images/gameface/hud_markers/ping_icon/ping_icon_wave2_npa.png",visualOffsetEnabled:!0,test:"test"}),i.engine.createJSModel(this.dynamicViewModelName,{zIndex:100,imageColor:"",imagePath:"coui://libs/ui/images/gameface/hud_markers/ping_icon/icons/goto.svg"}),i.engine.createJSModel(this.frequentViewModelName,{labelPrimary:"Let's go this way!",labelSecondary:"38 m"}),i.engine.updateWholeModel(window[this.dynamicViewModelName]),i.engine.updateWholeModel(window[this.frequentViewModelName]),i.engine.synchronizeModels(),window.onclick=()=>{window[this.staticViewModelName].isVisualOffset=!window[this.staticViewModelName].isVisualOffset,i.engine.updateWholeModel(window[this.staticViewModelName]),i.engine.synchronizeModels()}}}t.TestPingIcon=n}.apply(t,s),void 0===n||(e.exports=n)},7354:(e,t,i)=>{var s,n;s=[i,t,i(2889),i(7579),i(6749)],n=function(e,t,i,s,n){"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Left="Left",e.Right="Right",e.Center="Center",e.Coma="Coma",e.Ultimate="Ultimate",e.Transition="TransitionTransform",e.AnimationDisable="AnimationDisable"}(a=t.ClassNames||(t.ClassNames={}));class o extends s.HudIcon{constructor(){super(...arguments),this._ultimateIsUsing=!1,this.animDamage=()=>{this.content.classList.add("DamageAnimation"),this.damageTimeout=window.setTimeout(this.onAnimDamageEnd,320)},this.onAnimDamageEnd=()=>{window.clearTimeout(this.damageTimeout),this.content.classList.remove("DamageAnimation")}}get playerBadgeOpacity(){return this.opacity}set playerBadgeOpacity(e){this.opacity=e}initElements(){this.registerControls({healthBarContainer:"offsetContainer.healthBarContainer",respawnContainer:"offsetContainer.playerRespawnContainer",ultimateIsUsingContainer:"offsetContainer.ultimateIsUsingContainer",comaIcon:"offsetContainer.playerContainer.comaIcon",deathIcon:"offsetContainer.playerContainer.deathIcon",playerName:"offsetContainer.playerNameContainer.playerName",playerClass:"offsetContainer.playerContainer.playerClass",healthBar:"offsetContainer.healthBarContainer.healthBar",resurrectProgress:"offsetContainer.healthBarContainer.healthBar.resurrectProgress",playerRespawn:"offsetContainer.playerRespawnContainer.playerRespawn"}),this.waitFuncDispose=n.waitSeveralFrames((()=>{this.healthBar.isAnimated=!i.root.content.classList.contains(a.AnimationDisable)}))}initListeners(){this.healthBar.signalAnimDamage.add(this.animDamage)}hideNameImpl(e=!0){this.tweakContentClass(a.Transition,e),this.tweakContentClass(a.Left,!1),this.tweakContentClass(a.Center,!0),this.tweakContentClass(a.Right,!1)}hideName(){this.hideNameImpl(!0)}hideNameEnd(){this.hideNameImpl(!1)}showDefault(){this.playerClass.visible=!0,this.comaIcon.visible=!1,this.deathIcon.visible=!1,this.healthBarContainer.visible=!0,this.respawnContainer.visible=!1,this.tweakContentClass(a.Coma,!1),this.showUltimateIsUsing=this._ultimateIsUsing}showComa(){this.playerClass.visible=!1,this.comaIcon.visible=!0,this.deathIcon.visible=!1,this.healthBarContainer.visible=!0,this.respawnContainer.visible=!1,this.healthBar.setValue(0),this.tweakContentClass(a.Coma,!0),this.showUltimateIsUsing=!1}showDeath(){this.playerClass.visible=!1,this.comaIcon.visible=!1,this.deathIcon.visible=!0,this.healthBarContainer.visible=!1,this.respawnContainer.visible=!0,this.healthBar.setValue(0),this.resurrectProgress.setValue(0),this.tweakContentClass(a.Coma,!1),this.showUltimateIsUsing=!1}showUltimate(){this._ultimateIsUsing=!0,this.showUltimateIsUsing=this._ultimateIsUsing}hideUltimate(){this._ultimateIsUsing=!1,this.showUltimateIsUsing=this._ultimateIsUsing}tweakContentClass(e,t){t?this.content.classList.add(e):this.content.classList.remove(e)}set showUltimateIsUsing(e){this.tweakContentClass(a.Ultimate,e),this.ultimateIsUsingContainer.visible=e}onDestroy(){this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),window.clearTimeout(this.damageTimeout),this.healthBar.signalAnimDamage.remove(this.animDamage),super.onDestroy()}get ultimateIsUsing(){return this._ultimateIsUsing}get isDefault(){return this.playerClass.visible}get isComa(){return this.comaIcon.visible}get isDeath(){return this.deathIcon.visible}}t.PlayerBadge=o}.apply(t,s),void 0===n||(e.exports=n)},5011:(e,t,i)=>{var s,n;s=[i,t,i(7579)],n=function(e,t,i){"use strict";var s;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Left="Left",e.Right="Right",e.Center="Center",e.Coma="Coma",e.Ultimate="Ultimate",e.Transition="TransitionTransform",e.Animated="Animated"}(s=t.ClassNames||(t.ClassNames={}));class n extends i.HudIcon{constructor(){super(...arguments),this.animDamage=()=>{this.content.classList.add("DamageAnimation"),this.content.addEventListener("animationend",this.onAnimDamageEnd)},this.onAnimDamageEnd=()=>{this.content.classList.remove("DamageAnimation"),this.content.removeEventListener("animationend",this.onAnimDamageEnd)}}initElements(){this.registerControls({healthBarContainer:"offsetContainer.healthBarContainer",healthBar:"offsetContainer.healthBarContainer.healthBar",playerClass:"offsetContainer.playerClassContainer.playerClass",deathIcon:"offsetContainer.playerClassContainer.deathIcon"}),this.healthBar.isAnimated=this.content.classList.contains(s.Animated)}initListeners(){this.healthBar.signalAnimDamage.add(this.animDamage)}showNameRightImpl(e=!0){this.tweakContentClass(s.Transition,e),this.tweakContentClass(s.Left,!1),this.tweakContentClass(s.Center,!1),this.tweakContentClass(s.Right,!0)}showNameRight(){this.showNameRightImpl(!0)}showNameRightEnd(){this.showNameRightImpl(!1)}showNameLeftImpl(e=!0){this.tweakContentClass(s.Transition,e),this.tweakContentClass(s.Left,!0),this.tweakContentClass(s.Center,!1),this.tweakContentClass(s.Right,!1)}showNameLeft(){this.showNameLeftImpl(!0)}showNameLeftEnd(){this.showNameLeftImpl(!1)}hideNameImpl(e=!0){this.tweakContentClass(s.Transition,e),this.tweakContentClass(s.Left,!1),this.tweakContentClass(s.Center,!0),this.tweakContentClass(s.Right,!1)}hideName(){this.hideNameImpl(!0)}hideNameEnd(){this.hideNameImpl(!1)}destroy(){this.healthBar.signalAnimDamage.remove(this.animDamage),super.destroy()}tweakContentClass(e,t){t?this.content.classList.add(e):this.content.classList.remove(e)}showDeath(){this.playerClass.visible=!1,this.deathIcon.visible=!0,this.healthBarContainer.visible=!1,this.healthBar.setValue(0),this.tweakContentClass(s.Coma,!1)}}t.TeammateMarker=n}.apply(t,s),void 0===n||(e.exports=n)},373:(e,t,i)=>{var s,n;s=[i,t,i(4931)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.DefaultIcon{initElements(){super.initElements(),this.registerElements({progress:"wrapper.progress.clip"})}onRegister(){super.onRegister(),this.progress.setAttribute("data-bind-style-width",`100-{{${this.perFrameViewModelName}.progressValue}} + "%"`)}}t.ResurrectionIcon=s}.apply(t,s),void 0===n||(e.exports=n)},7866:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(9540),i(373)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.ResurrectionIcon{onRegister(){super.onRegister(),i.engine.createJSModel(this.staticViewModelName,{imagePath:"coui://libs/ui/images/gameface/hud_markers/res_token_icon.svg"}),i.engine.createJSModel(this.dynamicViewModelName,{zIndex:100,imageColor:"#ffffff"}),i.engine.createJSModel(this.frequentViewModelName,{labelPrimary:"Resurect",labelSecondary:"38 m",arrowIsVisible:!0}),i.engine.createJSModel(this.perFrameViewModelName,{progressValue:45,arrowRotation:45}),i.engine.updateWholeModel(window[this.viewModelName]),i.engine.updateWholeModel(window[this.dynamicViewModelName]),i.engine.updateWholeModel(window[this.frequentViewModelName]),i.engine.updateWholeModel(window[this.perFrameViewModelName]),i.engine.synchronizeModels(),s.progressIcon(this.perFrameViewModelName),s.arrowRotation(this.perFrameViewModelName)}}t.TestResurrectionIcon=a}.apply(t,s),void 0===n||(e.exports=n)},6778:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(5912)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.ThrowableIcon{onRegister(){super.onRegister(),i.engine.createJSModel(this.dynamicViewModelName,{zIndex:100,imagePath:"coui://libs/ui/images/gameface/hud_markers/ammo_box_icon.svg"}),i.engine.updateWholeModel(window[this.viewModelName]),i.engine.updateWholeModel(window[this.dynamicViewModelName]),i.engine.synchronizeModels()}}t.TestThrowableIcon=n}.apply(t,s),void 0===n||(e.exports=n)},5912:(e,t,i)=>{var s,n;s=[i,t,i(9426)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.RaceIcon{initElements(){this.registerElements("icon")}onRegister(){this.staticViewModelName=`GenericIconStaticViewModel_${this.controlId}`,this.dynamicViewModelName=`GenericIconDynamicViewModel_${this.controlId}`,this.content.setAttribute("data-bind-style-z-index",`{{${this.dynamicViewModelName}.zIndex}}`),this.icon.setAttribute("data-bind-style-background-image-url",`{{${this.dynamicViewModelName}.imagePath}}`)}}t.ThrowableIcon=s}.apply(t,s),void 0===n||(e.exports=n)},7478:(e,t,i)=>{var s,n;s=[i,t,i(851),i(3008)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.signalMessageLabelVisibleChanged=new s.Signal;class n extends i.Label{set visible(e){clearTimeout(this.timer),e?(super.visible=!0,t.signalMessageLabelVisibleChanged.dispatch(this)):this.timer=window.setTimeout((()=>{super.visible=!1,t.signalMessageLabelVisibleChanged.dispatch(this)}),200)}get visible(){return this._visible}onDestroy(){super.onDestroy(),clearTimeout(this.timer)}}t.MessageLabel=n}.apply(t,s),void 0===n||(e.exports=n)},1971:(e,t,i)=>{var s,n;s=[i,t,i(851)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Label{initElements(){super.initElements(),this.registerControls("panel"),this.label=this.searchElement("panel.label")}set text(e){super.text=e,this.visible=!!e}}t.UsageMessage=s}.apply(t,s),void 0===n||(e.exports=n)},9998:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerElements("label","image")}onRegister(){this.content.setAttribute("data-bind-class-toggle",`ShowReward:{{InstantRewardItemModel_${this.controlId}.showReward}};HideReward:{{InstantRewardItemModel_${this.controlId}.hideReward}}`),this.label.setAttribute("data-bind-value",`{{InstantRewardItemModel_${this.controlId}.label}}`),this.image.setAttribute("data-bind-style-background-image-url",`{{InstantRewardItemModel_${this.controlId}.image}}`)}}t.InstantRewardItem=s}.apply(t,s),void 0===n||(e.exports=n)},5260:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606),i(5542),i(3603)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends s.Control{constructor(){super(...arguments),this.updatePosition=e=>{e.visible&&!this.content.classList.contains("OffsetRight")?this.content.classList.add("OffsetRight"):!e.visible&&this.content.classList.contains("OffsetRight")&&this.content.classList.remove("OffsetRight")},this.hideAnimated=()=>{window.clearTimeout(this.timeoutID),i.TweenMax.fromTo(this,.5,{containerX:0,opacity:1},{ease:null,containerX:40,opacity:0,onComplete:()=>{this.hide(),this.dispatchExternalEvent(n.ExternalEvent.animation_finished,"hide")}})}}onRegister(){this.content.setAttribute("data-bind-item_equipped_event",`{{ItemEquippedModel_${this.controlId}}}`)}setup(e){!this.visible&&e.itemName&&(this.itemTitle.text=e.itemName,this.itemIcon.alias=e.itemIcon,this.rarity=e.itemRarity,this.setAnimatedVisible(!0))}initElements(){this.registerControls("container",{itemTitle:"container.itemContainer.name",itemIcon:"container.itemContainer.header.image",rarityLabel:"container.itemContainer.header.rarityLabel"}),a.strategicViewUpdated.add(this.updatePosition)}show(){super.show(),this.containerX=0,this.opacity=1,this.content.classList.add("Animated"),this.timeoutID=window.setTimeout(this.hideAnimated,4450)}hide(){super.hide(),window.clearTimeout(this.timeoutID),i.TweenMax.killTweensOf(this),this.content.classList.contains("Animated")&&this.content.classList.remove("Animated")}clearRarity(){this.content.classList.remove("Common"),this.content.classList.remove("Uncommon"),this.content.classList.remove("Rare"),this.content.classList.remove("Epic"),this.content.classList.remove("Legendary")}getRarityById(e){let t="Common";switch(e){case 2:t="Uncommon";break;case 3:t="Rare";break;case 4:t="Epic";break;case 5:t="Legendary"}return t}onDestroy(){window.clearTimeout(this.timeoutID),a.strategicViewUpdated.remove(this.updatePosition),super.onDestroy()}get containerX(){return this._xVh}set containerX(e){this._xVh=e,this.container.content.style.left=`${e}vh`}set rarity(e){const t=this.getRarityById(e);this.clearRarity(),this.content.classList.add(t),this.rarityLabel.text=`@horde_rarity_${t}`}}t.ItemEquipped=o}.apply(t,s),void 0===n||(e.exports=n)},5591:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ItemEquippedDataBind=class{update(e,t){e.control.setup(t)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},1822:(e,t,i)=>{var s,n;s=[i,t,i(5255)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.FlippableItem{onRegister(){this.viewModelName=`FlippableItemViewModel_${this.controlId}`,this.itemContainer1.setAttribute("data-bind-class-toggle",`Show:{{${this.viewModelName}.value1Show}};Hide:!{{${this.viewModelName}.value1Show}};`),this.item1.setAttribute("data-bind-class-toggle",`Blinking:{{${this.viewModelName}.value1Blinking}};`),this.item1.setAttribute("data-bind-style-background-image-url",`{{${this.viewModelName}.value1}}`),this.itemContainer2.setAttribute("data-bind-class-toggle",`Show:{{${this.viewModelName}.value2Show}};Hide:!{{${this.viewModelName}.value2Show}};`),this.item2.setAttribute("data-bind-class-toggle",`Blinking:{{${this.viewModelName}.value2Blinking}};`),this.item2.setAttribute("data-bind-style-background-image-url",`{{${this.viewModelName}.value2}}`)}}t.ItemPanelFlippableImage=s}.apply(t,s),void 0===n||(e.exports=n)},9869:(e,t,i)=>{var s,n;s=[i,t,i(5255)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.FlippableItem{initElements(){super.initElements(),this.registerElements({item1Label1:"itemContainer1.item.label1",item1Label2:"itemContainer1.item.label2",item2Label1:"itemContainer2.item.label1",item2Label2:"itemContainer2.item.label2"})}onRegister(){this.viewModelName=`FlippableItemViewModel_${this.controlId}`,this.itemContainer1.setAttribute("data-bind-class-toggle",`Show:{{${this.viewModelName}.value1Show}};Hide:!{{${this.viewModelName}.value1Show}};`),this.item1.setAttribute("data-bind-class-toggle",`Blinking:{{${this.viewModelName}.value1Blinking}};`),this.item1Label1.setAttribute("data-bind-value",this.addZero(Number(this.content.dataset.maxLength),`{{${this.viewModelName}.value1}}`)),this.item1Label2.setAttribute("data-bind-value",`{{${this.viewModelName}.value1}} > 0 ? {{${this.viewModelName}.value1}} : ''`),this.itemContainer2.setAttribute("data-bind-class-toggle",`Show:{{${this.viewModelName}.value2Show}};Hide:!{{${this.viewModelName}.value2Show}};`),this.item2.setAttribute("data-bind-class-toggle",`Blinking:{{${this.viewModelName}.value2Blinking}};`),this.item2Label1.setAttribute("data-bind-value",this.addZero(Number(this.content.dataset.maxLength),`{{${this.viewModelName}.value2}}`)),this.item2Label2.setAttribute("data-bind-value",`{{${this.viewModelName}.value2}} > 0 ? {{${this.viewModelName}.value2}} : ''`)}addZero(e,t){let i=1,s="";for(let n=1;n<=e;n++)s+=`${t} < ${i} ? '${"".padStart(e+1-String(i).length,"0")}' : `,i*=10;return`${s} ''`}}t.ItemPanelFlippableZeroPaddedLabel=s}.apply(t,s),void 0===n||(e.exports=n)},3191:(e,t,i)=>{var s,n;s=[i,t,i(8518)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.MessageScroller{constructor(){super(...arguments),this.lifetime=5e3,this.boundItemsCount=5}onRegister(){this.content.setAttribute("data-bind-kill_log_event",`{{EventLogModel_${this.controlId}}}`)}}t.KillLog=s}.apply(t,s),void 0===n||(e.exports=n)},4529:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KillLogItemHandler=class{update(e,t){const i=e.control;t.id>0&&i.addItem(t)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},8166:(e,t,i)=>{var s,n;s=[i,t,i(7774),i(2222)],n=function(e,t,i,s){"use strict";var n,a;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.ByEnemy=0]="ByEnemy",e[e.ByTeammate=1]="ByTeammate",e[e.ByPlayer=2]="ByPlayer"}(n||(n={})),function(e){e.ByEnemy="kill-log-item__color-by-enemy",e.ByTeammate="kill-log-item__color-by-teammate",e.ByPlayer="kill-log-item__color-by-player"}(a||(a={}));class o extends i.ListItem{constructor(){super(...arguments),this.onImageDataUpdated=()=>{const e=this.weapon.imageSourceData.height,t=this.weapon.imageSourceData.width;if(e&&t){const i=t/(e/2.7);this.weapon.width=`${i}vh`}}}initElements(){this.registerControls("weapon","kill","killer","victim"),this.weapon.signalDataUpdated.add(this.onImageDataUpdated)}updateData(){s.StartProfile("killogUpdateData");const{killer:e,victim:t,weapon:i,kill:o,dataModel:r}=this,l=""==r.killerName?t:e;switch(e.text=r.killerName,t.text=r.victimName,r.weaponIcon.fileName?i.imageSourceData=r.weaponIcon:i.destroy(),r.killIconAlias?o.alias=r.killIconAlias:o.destroy(),r.killType){case n.ByTeammate:l.content.classList.add(a.ByTeammate);break;case n.ByEnemy:l.content.classList.add(a.ByEnemy);break;case n.ByPlayer:l.content.classList.add(a.ByPlayer)}r.updated=!0,s.StopProfile()}onDestroy(){this.weapon.signalDataUpdated.remove(this.onImageDataUpdated),this._dataModel=null,super.onDestroy()}get dataModel(){return this._dataModel}}t.KillLogItem=o}.apply(t,s),void 0===n||(e.exports=n)},4698:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{constructor(){super(...arguments),this.onAnimatedHide=()=>{window.clearTimeout(this.hideTimeout),super.hide()}}hide(){this.content.classList.contains("Hide")||(this.content.classList.add("Hide"),this.hideTimeout=window.setTimeout(this.onAnimatedHide,350))}onDestroy(){window.clearTimeout(this.hideTimeout),super.onDestroy()}}t.KillerInfo=s}.apply(t,s),void 0===n||(e.exports=n)},5993:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerElements({image:"container.imageContainer.image",label:"container.name"})}onRegister(){this.viewModelName=`NarratorViewModel_${this.controlId}`,this.label.setAttribute("data-bind-value",`{{${this.viewModelName}.name}}`),this.image.setAttribute("data-bind-style-background-image-url",`{{${this.viewModelName}.image}}`),this.content.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.viewModelName}.image}}`)}}t.NarratorMessage=s}.apply(t,s),void 0===n||(e.exports=n)},737:(e,t,i)=>{var s,n;s=[i,t,i(851),i(4342)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.Label{constructor(){super(...arguments),this.updateObjective=()=>{const e=""!=this._text;this.visible=e,window.clearTimeout(this.moveTimeoutId),this.content.classList.remove("ShowMessage"),this.content.classList.remove("MoveMessage"),this.objectiveContainer.style.left="",this.objectiveContainer.style.transition="",window.cancelAnimationFrame(this.moveAnimationId),this.visible&&(this.content.classList.add("ShowMessage"),this.moveTimeoutId=window.setTimeout(this.moveMessage,2e3))},this.moveMessage=()=>{if(this.content.classList.remove("ShowMessage"),this.content.classList.contains("Dynamic")){const e=window.innerWidth/window.innerHeight*50;this.objectiveContainer.style.left=`${e}vh`,this.objectiveContainer.style.transition="left 0.41s",this.objectiveContainer.style.opacity="0",this.moveAnimationId=window.requestAnimationFrame((()=>{this.content.classList.add("MoveMessage"),this.objectiveContainer.style.left="",this.objectiveContainer.style.opacity="1"}))}},this.onRadarVisibleChanged=e=>{e.visible?this.content.classList.remove("NoRadar"):this.content.classList.add("NoRadar")}}initElements(){this.registerElements("objectiveContainer",{label:"objectiveContainer.objectiveLabel"}),this._dataModel={text:""}}onRegister(){this.content.setAttribute("data-bind-objective_message",`{{ObjectiveMessageViewModel_${this.controlId}}}`)}initListeners(){s.signalRadarVisibleChanged.add(this.onRadarVisibleChanged),this.signalValueChanged.add(this.updateObjective)}onDestroy(){window.clearTimeout(this.moveTimeoutId),window.cancelAnimationFrame(this.moveAnimationId),this.signalValueChanged.remove(this.updateObjective),s.signalRadarVisibleChanged.remove(this.onRadarVisibleChanged),super.onDestroy()}}t.ObjectiveMessage=n}.apply(t,s),void 0===n||(e.exports=n)},1e3:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerElements("time","caption","icon")}onRegister(){const{time:e,caption:t,icon:i,content:s}=this;e.setAttribute("data-bind-value",`{{PerkNotificationItemModel_${this._controlId}.time}}`),e.setAttribute("data-bind-class-toggle",`Hidden: !{{PerkNotificationItemModel_${this._controlId}.time}}`),t.setAttribute("data-bind-html",`{{PerkNotificationItemModel_${this._controlId}.text}}`),i.setAttribute("data-bind-style-background-image-url",`{{PerkNotificationItemModel_${this._controlId}.icon}}`),s.setAttribute("data-bind-class-toggle",`Hidden: !{{PerkNotificationItemModel_${this._controlId}.visible}}`)}clear(){}}t.PerkNotification=s}.apply(t,s),void 0===n||(e.exports=n)},178:(e,t,i)=>{var s,n;s=[i,t,i(227),i(8606),i(6749)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.Control{constructor(){super(...arguments),this.totalScore=0,this.messageId=0,this.messagesTimeoutList=[],this.lifeTime=2.3,this.playerLifeTime=1.7}initElements(){this.registerElements({player:"player",playerName:"player.playerName",score:"score",container:"containerWrapper.container"}),this.icon=i.Factory.registerChildControl(this.searchElement("player.icon"))}onRegister(){this.content.setAttribute("data-bind-personal_score",`{{PersonalScoreViewModel_${this.controlId}}}`)}updateData(e){e.icon&&(this.icon.alias=e.icon,this.showKilledPlayerName(e.playerName)),this.showScore(e.value),this.addMessage(e.type,e.value)}showKilledPlayerName(e){this.playerName.textContent=e,this.player.classList.add("Show"),window.clearTimeout(this.showKilledPlayerNameTimeout),this.showKilledPlayerNameTimeout=window.setTimeout((()=>{this.hideKilledPlayerName()}),1e3*this.playerLifeTime)}hideKilledPlayerName(){this.player.classList.remove("Show")}showScore(e){this.totalScore+=e,this.score.textContent=String(this.totalScore),this.score.classList.add("Show"),n.restartAnimations(this.score),window.clearTimeout(this.showScoreTimeout),this.showScoreTimeout=window.setTimeout((()=>{this.hideScore()}),1e3*this.lifeTime)}hideScore(){this.score.classList.remove("Show"),this.totalScore=0}addMessage(e,t){if(this.lastMessageType==e)this.lastMessageValue+=t,this.lastMessage.innerHTML=`<div id="type">${e}</div> <div id="score">+${this.lastMessageValue}</div>`,this.lastMessage.classList.add("Show"),this.hideMessage();else{this.lastMessageType=e,this.lastMessageValue=t;const s=i.Factory.createChildElement("PersonalScoreMessage",this.container);this.messageId++,s.id=`message_${this.messageId}`,s.innerHTML=`<div id="type" class="personal-score__message--first-add-message">${e}</div> <div id="score" class="personal-score__message--first-add-message">+${t}</div>`,s.classList.add("Show"),this.lastMessage=s,this.lastMessageId=this.messageId,this.hideMessage()}}hideMessage(){const{container:e,lastMessageId:t,lastMessage:i}=this;window.clearTimeout(this.messagesTimeoutList[this.lastMessageId]),this.messagesTimeoutList[this.lastMessageId]=window.setTimeout((()=>{i.classList.remove("Show"),this.messagesTimeoutList[t]=window.setTimeout((()=>{e.removeChild(i),delete this.messagesTimeoutList[t],this.lastMessageType=null}),this.lifeTime/2*1e3)}),1e3*this.lifeTime)}hideAllMessages(){const e=this.container.children,t=e.length;for(let i=0;i<t;i++)e[i].classList.add("NonVisual");this.lastMessageType=null}clear(){this.hideKilledPlayerName(),this.hideScore(),this.hideAllMessages()}onDestroy(){window.clearTimeout(this.showKilledPlayerNameTimeout),window.clearTimeout(this.showScoreTimeout),this.messagesTimeoutList.forEach((e=>{window.clearTimeout(e)})),super.onDestroy()}}t.PersonalScore=a}.apply(t,s),void 0===n||(e.exports=n)},9973:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PersonalScoreHandler=class{update(e,t){const i=e.control;t.type&&i.updateData(t)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},3041:(e,t,i)=>{var s,n;s=[i,t,i(178)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.PersonalScore{initElements(){super.initElements(),this.test()}test(){const e=[{type:"kill",value:50,playerName:"Ivanko"},{type:"assist",value:25},{type:"capturing",value:5,playerName:""},{type:"zone capturing",value:50,playerName:""}];setInterval((()=>{const t=Math.floor(Math.random()*e.length);this.updateData(e[t])}),500),setInterval((()=>{this.clear()}),5e3)}}t.TestPersonalScore=s}.apply(t,s),void 0===n||(e.exports=n)},9426:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{get isSnapped(){return this._isSnapped}set isSnapped(e){this._isSnapped=e}}t.RaceIcon=s}.apply(t,s),void 0===n||(e.exports=n)},9436:(e,t,i)=>{var s,n;s=[i,t,i(9426)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.RaceIcon{initElements(){this.registerControls({arrow:"arrowContainer.arrow",image:"imageContainer.image",label:"labelContainer.label"})}set isSnapped(e){this._isSnapped=e,this.label.visible=!e}}t.TestRaceIcon=s}.apply(t,s),void 0===n||(e.exports=n)},2475:(e,t,i)=>{var s,n;s=[i,t,i(7908)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ImageControl{constructor(){super(...arguments),this._iconAlias="",this._snappedIconAlias="",this.setListenRectChanged=(e=!0)=>{}}initElements(){this.isSnapped=!1}onRegister(){this.content.setAttribute("data-bind-style-coh-color-matrix",`{{RadarIconViewModel_${this.controlId}.iconColor}}`)}set iconAlias(e){this._iconAlias=e,this._isSnapped||(this.alias=this._iconAlias)}set snappedIconAlias(e){this._snappedIconAlias=e,this._isSnapped&&(this.alias=this._snappedIconAlias)}set isSnapped(e){this._isSnapped=e,this.alias=e?this._snappedIconAlias:this._iconAlias}get isSnapped(){return this._isSnapped}}t.RadarIcon=s}.apply(t,s),void 0===n||(e.exports=n)},4342:(e,t,i)=>{var s,n;s=[i,t,i(9586),i(8606),i(3008),i(5542)],n=function(e,t,i,s,n,a){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.signalRadarVisibleChanged=new n.Signal,function(e){e[e.Radius1=0]="Radius1",e[e.Radius2=1]="Radius2",e[e.Radius3=2]="Radius3",e[e.Radius4=3]="Radius4"}(o||(o={}));const r=(e,t)=>e.content.id<t.content.id?-1:e.content.id>t.content.id?1:0;class l extends s.Control{constructor(){super(...arguments),this.sectors=new Map,this.sectorsRadius=new Map}initElements(){this.registerControls({mapClip:"mapContainer.maskContainer.rotationContainer.translationContainer.image",rotationClip:"mapContainer.maskContainer.rotationContainer",iconsRotationClip:"mapContainer.iconsRotationContainer",sectorsClip:"mapContainer.maskContainer.sectors",translationClip:"mapContainer.maskContainer.rotationContainer.translationContainer",iconsTranslationClip:"mapContainer.iconsRotationContainer.translationContainer"}),this.translationClip.onRegister=()=>{this.iconsTranslationClip.content.setAttribute("data-bind-style-transform2d",`{{${this.translationClip.drawModelId}.transform}}`),this.translationClip.content.classList.remove("DefaultMargin"),this.iconsTranslationClip.content.classList.remove("DefaultMargin")},this.rotationClip.onRegister=()=>{this.iconsRotationClip.content.setAttribute("data-bind-style-transform2d",`{{${this.rotationClip.drawModelId}.transform}}`)}}set visible(e){super.visible=e,t.signalRadarVisibleChanged.dispatch(this)}get visible(){return super.visible}setMap(e,t,s){this.mapClip.alias=e,this.mapClip.width=t*i.pxToVh+"vh",this.mapClip.height=s*i.pxToVh+"vh"}initSectors(){const e=this.sectorsClip.content.getElementsByClassName("hit-sector");for(let t=0;t<e.length;t++){const i=e[t].control;switch(this.sectors.set(t,i),e[t].classList.item(0)){case"radar__sector-1":this.associateSectorWithRadius(i,o.Radius1);break;case"radar__sector-2":this.associateSectorWithRadius(i,o.Radius2);break;case"radar__sector-3":case"radar__sector-4":this.associateSectorWithRadius(i,o.Radius3);break;case"radar__sector-5":case"radar__sector-6":this.associateSectorWithRadius(i,o.Radius4)}}this.sectors.forEach((e=>{e.opacity=0,e.visible=!1})),this.initSectorsPoints()}associateSectorWithRadius(e,t){this.sectorsRadius.get(t)||this.sectorsRadius.set(t,[]),this.sectorsRadius.set(t,this.sectorsRadius.get(t).concat([e]).sort(r))}initSectorsPoints(){this.sectorsRadius.forEach(((e,t)=>{for(let i=0;i<e.length;i++){const s=360/e.length,n=t>o.Radius2?-1*(75-s*i):-1*(90-s*i),r=e[i].controlId;this.dispatchExternalEvent(a.ExternalEvent.init_radar_sector,r,t,n)}}))}}t.Radar=l}.apply(t,s),void 0===n||(e.exports=n)},2687:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{onRegister(){this.content.setAttribute("data-bind-style-opacity",`{{${this.drawModelId}.alpha}}`)}}t.Sector=s}.apply(t,s),void 0===n||(e.exports=n)},106:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerElements({timerSmall:"timerSmall"},{timerBig:"scoreWrapper.timerBig"},{leftTeamScore:"scoreWrapper.leftTeamWrapper.team.score"},{leftTeamPlayerName:"scoreWrapper.leftTeamWrapper.team.playerName"},{leftTeamProgress:"scoreWrapper.progressWrapper.leftTeamProgress.clip"},{rightTeamScore:"scoreWrapper.rightTeamWrapper.team.score"},{rightTeamPlayerName:"scoreWrapper.rightTeamWrapper.team.playerName"},{rightTeamProgress:"scoreWrapper.progressWrapper.rightTeamProgress.clip"},{progressWrapper:"scoreWrapper.progressWrapper"})}onRegister(){this.timerSmall.setAttribute("data-bind-value",`{{HUDRoundInfoViewModel_${this.controlId}.timerSmall}}`),this.timerBig.setAttribute("data-bind-value",`{{HUDRoundInfoViewModel_${this.controlId}.timerBig}}`),this.leftTeamScore.setAttribute("data-bind-value",`{{HUDRoundInfoViewModel_${this.controlId}.leftTeamScore}}`),this.leftTeamPlayerName.setAttribute("data-bind-value",`{{HUDRoundInfoViewModel_${this.controlId}.leftTeamPlayerName}}`),this.leftTeamProgress.setAttribute("data-bind-style-width",`{{HUDRoundInfoViewModel_${this.controlId}.leftTeamProgress}} + "%"`),this.rightTeamScore.setAttribute("data-bind-value",`{{HUDRoundInfoViewModel_${this.controlId}.rightTeamScore}}`),this.rightTeamPlayerName.setAttribute("data-bind-value",`{{HUDRoundInfoViewModel_${this.controlId}.rightTeamPlayerName}}`),this.rightTeamProgress.setAttribute("data-bind-style-width",`{{HUDRoundInfoViewModel_${this.controlId}.rightTeamProgress}} + "%"`),this.timerSmall.setAttribute("data-bind-class-toggle",`Hidden:!{{HUDRoundInfoVisibilityModel_${this.controlId}.timerSmallVisible}}`),this.timerBig.setAttribute("data-bind-class-toggle",`Hidden:!{{HUDRoundInfoVisibilityModel_${this.controlId}.timerBigVisible}}`),this.leftTeamScore.setAttribute("data-bind-class-toggle",`Hidden:!{{HUDRoundInfoVisibilityModel_${this.controlId}.leftTeamScoreVisible}}`),this.leftTeamPlayerName.setAttribute("data-bind-class-toggle",`Hidden:!{{HUDRoundInfoVisibilityModel_${this.controlId}.leftTeamPlayerNameVisible}}`),this.rightTeamScore.setAttribute("data-bind-class-toggle",`Hidden:!{{HUDRoundInfoVisibilityModel_${this.controlId}.rightTeamScoreVisible}}`),this.rightTeamPlayerName.setAttribute("data-bind-class-toggle",`Hidden:!{{HUDRoundInfoVisibilityModel_${this.controlId}.rightTeamPlayerNameVisible}}`),this.progressWrapper.setAttribute("data-bind-class-toggle",`Hidden:!{{HUDRoundInfoVisibilityModel_${this.controlId}.progressWrapperVisible}}`)}}t.RoundInfo=s}.apply(t,s),void 0===n||(e.exports=n)},8957:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{onRegister(){this.registerElements({progressBarClip:"progress.clip",icon:"icon"}),this.perFrameModelName=`StaminaIndicatorPerFrameViewModel_${this.controlId}`,this.staticViewModelName=`StaminaIndicatorStaticViewModel_${this.controlId}`,this.progressBarClip.setAttribute("data-bind-style-transform-rotate",`-28 + 28 * {{${this.perFrameModelName}.value}}`),this.content.setAttribute("data-bind-class",`{{${this.perFrameModelName}.status}}`),this.content.setAttribute("data-bind-class-toggle",`Big:{{${this.staticViewModelName}.isOverhaste}}`),this.icon.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.staticViewModelName}.iconVisible}}`),this.icon.setAttribute("data-bind-style-background-image-url",`{{${this.staticViewModelName}.iconImage}}`)}}t.StaminaIndicator=s}.apply(t,s),void 0===n||(e.exports=n)},6413:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8674),i(8330),i(8606)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends a.Control{constructor(){super(...arguments),this._value=0}onRegister(){this.perFrameModelName=`TestStaminaIndicatorPerFrameViewModel_${this.controlId}`,this.staticViewModelName=`TestStaminaIndicatorStaticViewModel_${this.controlId}`,n.engine.createJSModel(this.perFrameModelName,{value:0,status:"Charge"}),n.engine.createJSModel(this.staticViewModelName,{isOverhaste:!0,iconImage:"coui://libs/ui/images/perks/passive_abilities_npa.dds:overhaste_perk_icon",iconVisible:!0}),this.registerElements({progressBarClip:"progress.clip",icon:"icon"}),this.progressBarClip.setAttribute("data-bind-style-transform-rotate",`-28 + 28 * {{${this.perFrameModelName}.value}}`),this.content.setAttribute("data-bind-class",`{{${this.perFrameModelName}.status}}`),this.content.setAttribute("data-bind-class-toggle",`Big:{{${this.staticViewModelName}.isOverhaste}}`),this.icon.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.staticViewModelName}.iconVisible}}`),this.icon.setAttribute("data-bind-style-background-image-url",`{{${this.staticViewModelName}.iconImage}}`),this.forward()}set value(e){this._value=e,window[this.perFrameModelName].value=e,n.engine.updateWholeModel(window[this.perFrameModelName]),n.engine.synchronizeModels()}get value(){return this._value}forward(){s.TweenMax.fromTo(this,5,{value:0},{ease:i.Linear.easeNone,value:1,onComplete:()=>{this.setStatus("Ready"),setTimeout((()=>{this.backWard()}),5e3)}})}backWard(){this.setStatus("Active"),s.TweenMax.fromTo(this,5,{value:1},{ease:i.Linear.easeNone,value:0,onComplete:()=>{this.setStatus("Charge"),this.forward()}})}setStatus(e){window[this.perFrameModelName].status=e,n.engine.updateWholeModel(window[this.perFrameModelName]),n.engine.synchronizeModels()}onDestroy(){n.engine.unregisterModel(window[`${this.perFrameModelName}`]),n.engine.unregisterModel(window[`${this.staticViewModelName}`]),super.onDestroy()}}t.TestStaminaIndicator=o}.apply(t,s),void 0===n||(e.exports=n)},9196:(e,t,i)=>{var s,n;s=[i,t,i(9586),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{initElements(){this.registerControls({label:"mask.labels.label",availableLabel:"mask.availableLabel"})}initListeners(){const{label:e,availableLabel:t}=this;e.signalValueChanged.add((()=>{t.text=e.text}))}get isAvailable(){return this._isAvailable}set isAvailable(e){this._isAvailable=e,e?this.content.classList.add("Available"):this.content.classList.remove("Available")}get activateOnPercent(){return this._activateOnPercent}set activateOnPercent(e){e=i.limit(e,0,100),this._activateOnPercent=e,this.content.style.top=100-e+"%"}}t.StrategicAbility=n}.apply(t,s),void 0===n||(e.exports=n)},3603:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606),i(3008)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.strategicViewUpdated=new n.Signal;class a extends s.Control{constructor(){super(...arguments),this.availableLabels=new Array}initElements(){this.initAvailableLabels()}initAvailableLabels(){const{availableLabels:e}=this;for(let t=0;t<3;t++){const i=this.searchControl(`container.abilities.ability${t+1}.mask.availableLabel`);e.push(i)}}get isOpen(){return this._isOpen}set isOpen(e){const{content:t}=this;this._isOpen=e,e?(t.classList.add("Opened"),this.hideAvailableLabels()):(t.classList.remove("Opened"),this.showAvailableLabels())}showAvailableLabels(){const{availableLabels:e}=this;for(const t of e)i.TweenMax.killTweensOf(t),i.TweenMax.to(t,0,{opacity:1,delay:1})}hideAvailableLabels(){const{availableLabels:e}=this;for(const t of e)i.TweenMax.killTweensOf(t),t.opacity=0}_show(){this.opacity=1}_hide(){this.opacity=0}set visible(e){super.visible=e,t.strategicViewUpdated.dispatch(this)}get visible(){return this._visible}}t.StrategicView=a}.apply(t,s),void 0===n||(e.exports=n)},8388:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606),i(3603),i(4260)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends s.Control{constructor(){super(...arguments),this.test=()=>{this.searchControls(),this.fillData(),this.demo()},this.toggle=()=>{const{strategicView:e}=this;e.isOpen=!e.isOpen},this.searchControls=()=>{this.strategicView=a.searchControlByType(n.StrategicView),this.progressbar=this.strategicView.searchControl("container.progressbar"),this.keyLabel=this.strategicView.searchControl("container.keyLabel"),this.abilities=new Array;const{strategicView:e,abilities:t}=this;for(let i=1;i<=3;i++){const s=e.searchControl(`container.abilities.ability${i}`);s.registerControls({keyLabel:"mask.labels.keyLabel",label:"mask.labels.label"},"image"),t.push(Object(s))}},this.fillData=()=>{const{keyLabel:e}=this,[t,i,s]=this.abilities;e.text="M",t.keyLabel.text="G",t.label.text="AI STRIKE",t.image.alias="ai_spawn_icon",t.activateOnPercent=10,i.keyLabel.text="F",i.label.text="TUREL STRIKE",i.image.alias="turret_spawn_icon",i.activateOnPercent=50,s.keyLabel.text="Q",s.label.text="ORBIT STRIKE",s.image.alias="orbital_strike_icon",s.activateOnPercent=100},this.demo=()=>{const{strategicView:e}=this;e.visible=!0,this.demoProgress(),this.demoAbilities(),this.demoToggle()},this.demoProgress=()=>{const{progressbar:e}=this;i.TweenMax.to(e,4,{value:e.max,delay:1,ease:i.Linear.easeNone}),i.TweenMax.to(e,4,{value:e.min,delay:8,ease:i.Linear.easeNone}),i.TweenMax.to(e,4,{value:e.max,delay:15,ease:i.Linear.easeNone})},this.demoAbilities=()=>{const{abilities:e}=this;for(const t of e){i.TweenMax.delayedCall(.1,(()=>{Object(t).content.classList.remove("Hidden")}));let e=1+4*t.activateOnPercent/100;i.TweenMax.delayedCall(e,(()=>{t.isAvailable=!0})),e=8+4*(100-t.activateOnPercent)/100,i.TweenMax.delayedCall(e,(()=>{t.isAvailable=!1})),e=15+4*t.activateOnPercent/100,i.TweenMax.delayedCall(e,(()=>{t.isAvailable=!0}))}},this.demoToggle=()=>{const{strategicView:e}=this;i.TweenMax.delayedCall(4,(()=>{e.isOpen=!0})),i.TweenMax.delayedCall(6,(()=>{e.isOpen=!1})),i.TweenMax.delayedCall(11,(()=>{e.isOpen=!0})),i.TweenMax.delayedCall(13,(()=>{e.isOpen=!1})),i.TweenMax.delayedCall(16,(()=>{e.isOpen=!0})),i.TweenMax.delayedCall(18,(()=>{e.isOpen=!1}))}}}t.TestStrategicView=o}.apply(t,s),void 0===n||(e.exports=n)},5121:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(227),i(8606)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=.2;class o extends n.Control{initElements(){this.registerControls("panel",{nameLabel:"panel.nameLabel",textLabel:"panel.textLabel"}),this.panel.hide()}play(){this.clearTweens(),this.handleShowHide(),this.handleName(),this.handleText()}stop(){this.clearTweens(),this.addFadeOut(0),this.addHide(a)}handleShowHide(){this.duration<2&&(this.duration=2),this.addFadeIn(0),this.addFadeOut(this.duration-a),this.panel.show(),this.addHide(this.duration)}handleName(){const{nameLabel:e,name:t}=this;e.text=s.translate(t)+":"}handleText(){const{textLabel:e,duration:t,panel:n}=this;let{text:o}=this;if(o=s.translate(o),o.includes("<br>")||o.includes("<BR>")){o=o.replace(new RegExp("<BR>","g"),"<br>");const s=o.split("<br>"),r=s.length,l=t/r;e.text=s[0];for(let t=1;t<r;t++){const o=t*l;i.TweenMax.to(n,o,{onComplete:()=>{e.text=s[t]}}),this.addFadeOut(o-a),this.addFadeIn(o)}}else e.text=o}clearTweens(){i.TweenMax.killTweensOf(this.panel)}addHide(e){this.panel.hideWithDelay(e)}addFadeIn(e){i.TweenMax.to(this.panel,.2,{delay:e,opacity:1})}addFadeOut(e){i.TweenMax.to(this.panel,a,{delay:e,opacity:0})}}t.Subtitles=o}.apply(t,s),void 0===n||(e.exports=n)},8012:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606),i(5542),i(3603)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends s.Control{constructor(){super(...arguments),this.updatePosition=e=>{e.visible&&!this.content.classList.contains("OffsetRight")?this.content.classList.add("OffsetRight"):!e.visible&&this.content.classList.contains("OffsetRight")&&this.content.classList.remove("OffsetRight")},this.hideAnimated=()=>{window.clearTimeout(this.timeoutID),i.TweenMax.fromTo(this,.5,{containerX:0,opacity:1},{ease:null,containerX:40,opacity:0,onComplete:()=>{this.hide(),this.dispatchExternalEvent(n.ExternalEvent.animation_finished,"hide")}})}}initElements(){this.registerControls("container",{title:"container.title",taskContent:"container.taskContainer.taskContent",taskBackground:"container.taskContainer.taskBackground",taskBlinkContainer:"container.taskContainer.taskBackground.taskBlink",taskTitle:"container.taskContainer.taskContent.taskTitle",taskImage:"container.taskContainer.taskContent.taskImage"}),a.strategicViewUpdated.add(this.updatePosition)}onRegister(){this.content.setAttribute("data-bind-task_completed_event",`{{TaskCompletedModel_${this.controlId}}}`)}setup(e){!this.visible&&e.taskName&&(this.taskTitle.text=e.taskName,this.taskImage.alias=e.taskIcon,this.setAnimatedVisible(!0))}show(){super.show(),this.containerX=0,this.opacity=1,this.content.classList.add("Animated"),this.timeoutID=window.setTimeout(this.hideAnimated,4450)}hide(){super.hide(),window.clearTimeout(this.timeoutID),i.TweenMax.killTweensOf(this),this.content.classList.contains("Animated")&&this.content.classList.remove("Animated")}onDestroy(){window.clearTimeout(this.timeoutID),i.TweenMax.killTweensOf(this),a.strategicViewUpdated.remove(this.updatePosition),super.onDestroy()}get containerX(){return this._xVh}set containerX(e){this._xVh=e,this.container.content.style.left=`${e}vh`}}t.TaskCompleted=o}.apply(t,s),void 0===n||(e.exports=n)},5702:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TaskCompletedHandler=class{update(e,t){e.control.setup(t)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},2080:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerControls({playerBadge1:"playerBadge_1",playerBadge2:"playerBadge_2"}),this.badgesArray=[this.playerBadge1,this.playerBadge2],this.badgesArray.forEach((e=>{e.healthBar.setMinMax(0,100),e.resurrectProgress.setMinMax(0,100)}))}onRegister(){this.content.setAttribute("data-bind-teammates_panel",`{{TeammatesPanelBaseViewModel_${this.controlId}}}`),this.content.setAttribute("data-bind-teammates_panel_frequent",`{{TeammatesPanelFrequentViewModel_${this.controlId}}}`)}updateData(e){for(let t=0;t<this.badgesArray.length;t++){const i=this.badgesArray[t];i.visible=e.badges[t].blockVisible,e.badges[t].blockVisible&&(i.playerName.text=e.badges[t].playerName,e.badges[t].isDefault?i.playerClass.alias=e.badges[t].classImage:e.badges[t].isDeath&&(i.playerRespawn.text=e.badges[t].respawnTimer),e.badges[t].isDefault&&e.badges[t].isDefault!=i.isDefault?i.showDefault():e.badges[t].isComa&&e.badges[t].isComa!=i.isComa?i.showComa():e.badges[t].isDeath&&e.badges[t].isDeath!=i.isDeath&&i.showDeath(),e.badges[t].ultimateActive?i.showUltimate():i.hideUltimate())}}updateDataFrequent(e){for(let t=0;t<this.badgesArray.length;t++){const i=this.badgesArray[t];i.healthBar.value=e.badges[t].hpProgress,i.resurrectProgress.value=e.badges[t].resurrectProgress}}}t.TeammatesPanel=s}.apply(t,s),void 0===n||(e.exports=n)},9191:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TeammatesPanelHandler=class{update(e,t){e.control.updateData(t)}},t.TeammatesPanelFrequentHandler=class{update(e,t){e.control.updateDataFrequent(t)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},7368:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerElements("playerImage")}onRegister(){this.content.setAttribute("data-bind-class-toggle",`Killed:!{{TeamPanelItemViewModel_${this.controlId}.isAlive}};Empty:{{TeamPanelItemViewModel_${this.controlId}.isEmpty}};`),this.playerImage.setAttribute("data-bind-style-background-image-url",`{{TeamPanelItemViewModel_${this.controlId}.image}}`)}}t.TeamsPanelPlayer=s}.apply(t,s),void 0===n||(e.exports=n)},5924:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.registerControls({team_1_player_1:"team1.player1",team_1_player_2:"team1.player2",team_1_player_3:"team1.player3",team_1_player_4:"team1.player4",team_1_player_5:"team1.player5",team_1_player_6:"team1.player6",team_2_player_1:"team2.player1",team_2_player_2:"team2.player2",team_2_player_3:"team2.player3",team_2_player_4:"team2.player4",team_2_player_5:"team2.player5",team_2_player_6:"team2.player6"})}onRegister(){this.team_1_player_1.playerImage.style.backgroundImage="url(../../images/heroes/hero_brisa_large.dds)",this.team_1_player_1.content.classList.add("Killed"),this.team_1_player_2.playerImage.style.backgroundImage="url(../../images/heroes/hero_intro_large.tif)",this.team_1_player_3.playerImage.style.backgroundImage="url(../../images/heroes/hero_invader_large.tif)",this.team_1_player_3.content.classList.add("Killed"),this.team_1_player_4.playerImage.style.backgroundImage="url(../../images/heroes/hero_kite_large.tif)",this.team_1_player_5.playerImage.style.backgroundImage="url(../../images/heroes/hero_malva_large.tif)",this.team_1_player_6.playerImage.style.backgroundImage="url(../../images/heroes/hero_brisa_large.tif)",this.team_2_player_1.playerImage.style.backgroundImage="url(../../images/heroes/hero_brisa_large.tif)",this.team_2_player_1.content.classList.add("Killed"),this.team_2_player_2.playerImage.style.backgroundImage="url(../../images/heroes/hero_intro_large.tif)",this.team_2_player_3.playerImage.style.backgroundImage="url(../../images/heroes/hero_invader_large.tif)",this.team_2_player_4.playerImage.style.backgroundImage="url(../../images/heroes/hero_kite_large.tif)",this.team_2_player_4.content.classList.add("Killed"),this.team_2_player_5.playerImage.style.backgroundImage="url(../../images/heroes/hero_malva_large.tif)",this.team_2_player_6.playerImage.style.backgroundImage="url(../../images/heroes/hero_brisa_large.tif)"}}t.TestTeamsPanel=s}.apply(t,s),void 0===n||(e.exports=n)},2703:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606),i(5542),i(3603)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends s.Control{constructor(){super(...arguments),this.updatePosition=e=>{e.visible&&!this.content.classList.contains("OffsetRight")?this.content.classList.add("OffsetRight"):!e.visible&&this.content.classList.contains("OffsetRight")&&this.content.classList.remove("OffsetRight")},this.hideAnimated=()=>{window.clearTimeout(this.timeoutID),i.TweenMax.fromTo(this,.5,{containerX:0,opacity:1},{ease:null,containerX:40,opacity:0,onComplete:()=>{this.hide(),this.dispatchExternalEvent(n.ExternalEvent.animation_finished,"hide")}})}}onRegister(){this.content.setAttribute("data-bind-weapon_levelup_event",`{{WeaponLevelUpModel_${this.controlId}}}`)}setup(e){!this.visible&&e.itemName&&(this.weaponTitle.text=e.itemName,this.weaponImage.alias=e.itemIcon,this.weaponLevel.text=e.weaponLevel,this.unlockImage.alias=e.attachmentIcon,this.unlockTitle.text=e.attachmentName,this.setAnimatedVisible(!0))}initElements(){this.registerControls("container",{weaponTitle:"container.weaponContainer.weaponTitle",weaponLevel:"container.weaponContainer.weaponLevel",weaponImage:"container.weaponContainer.weaponImage",unlockTitle:"container.unlockContainer.unlockTitle",unlockImage:"container.unlockContainer.unlockImage"}),a.strategicViewUpdated.add(this.updatePosition)}show(){super.show(),this.containerX=0,this.opacity=1,this.content.classList.add("Animated"),this.timeoutID=window.setTimeout(this.hideAnimated,4450)}hide(){super.hide(),window.clearTimeout(this.timeoutID),i.TweenMax.killTweensOf(this),this.content&&this.content.classList.contains("Animated")&&this.content.classList.remove("Animated")}onDestroy(){i.TweenMax.killTweensOf(this),a.strategicViewUpdated.remove(this.updatePosition),super.onDestroy()}get containerX(){return this._xVh}set containerX(e){this._xVh=e,this.container&&(this.container.content.style.left=`${e}vh`)}}t.WeaponLevelUp=o}.apply(t,s),void 0===n||(e.exports=n)},4049:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WeaponLevelUpDataBind=class{update(e,t){e.control.setup(t)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},946:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{constructor(){super(...arguments),this.max=8,this.lives=4}initElements(){this.signalActivate.add((()=>{this.drawModelName=`WipeCountViewModel_${this.searchControl("wipe_component").controlId}`,i.engine.createJSModel(this.drawModelName,{max:this.max,lives:this.lives,title:"test title"})}))}destroy(){i.engine.unregisterModel(window[this.drawModelName]),super.destroy()}updateData(e,t){this[e]+=t,window[this.drawModelName][e]+=t,i.engine.updateWholeModel(window[this.drawModelName]),i.engine.synchronizeModels()}addMax(){this.max<=10&&this.updateData("max",1)}removeMax(){this.max>=1&&this.updateData("max",-1)}addLives(){this.lives>0&&this.updateData("lives",-1)}removeLives(){this.lives<this.max&&this.updateData("lives",1)}}t.TestWipeCount=n}.apply(t,s),void 0===n||(e.exports=n)},8610:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){this.itemContainer=this.searchControl("wrapper.container")}onRegister(){const e=this.searchElement("wrapper.title");this.content.setAttribute("data-bind-class-toggle",`Blink:{{WipeCountViewModel_${this._controlId}.lives }} == {{WipeCountViewModel_${this._controlId}.max}}`),e.setAttribute("data-bind-value",`{{WipeCountViewModel_${this._controlId}.title}}`);for(let e=0;e<this.itemContainer.content.childElementCount;e++){const t=this.itemContainer.searchControl(`item_${e}`),i=t.searchElement("wrapper.emptyIcon"),s=t.searchElement("wrapper.fullIcon");t.content.setAttribute("data-bind-class-toggle",`Hidden: {{WipeCountViewModel_${this._controlId}.max}} < ${e+1}`),i.setAttribute("data-bind-class-toggle",`Hidden: {{WipeCountViewModel_${this._controlId}.lives}} < ${e+1}`),s.setAttribute("data-bind-class-toggle",`Hidden: {{WipeCountViewModel_${this._controlId}.lives}} >= ${e+1}`)}}}t.WipeCount=s}.apply(t,s),void 0===n||(e.exports=n)},7538:(e,t,i)=>{var s,n;s=[i,t,i(7136)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Button{onRegister(){}onMouseOverImpl(e){super.onMouseOverImpl(e),this.focus()}onMouseOutImpl(e){super.onMouseOutImpl(e),this.unfocus()}addLocked(){this.content.classList.add("Locked")}removeLocked(){this.content.classList.remove("Locked")}addSelected(){this.content.classList.add("Selected"),this.focus()}removeSelected(){this.content.classList.remove("Selected")}addLimit(){this.content.classList.add("Limit")}removeLimit(){this.content.classList.remove("Limit")}addNextHero(){this.content.classList.add("next-hero")}removeNextHero(){this.content.classList.remove("next-hero")}}t.EscapeMenuHeroButton=s}.apply(t,s),void 0===n||(e.exports=n)},8315:(e,t,i)=>{var s,n;s=[i,t,i(8613)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.EmptySelectableButton{lock(){this.content.classList.add("Locked")}unlock(){this.content.classList.remove("Locked")}}t.HeroButton=s}.apply(t,s),void 0===n||(e.exports=n)},5918:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(7136)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Button{initElements(){super.initElements(),this.opacity=0,this.transformYPercent=100,this.visible=!1}show(){this.visible=!0,i.TweenMax.killTweensOf(this),i.TweenMax.to(this,.2,{transformYPercent:0,opacity:1,ease:null})}hide(){i.TweenMax.killTweensOf(this),i.TweenMax.to(this,.2,{transformYPercent:100,opacity:0,onComplete:()=>{this.visible=!1}})}}t.ReequipAbilities=n}.apply(t,s),void 0===n||(e.exports=n)},169:(e,t,i)=>{var s,n;s=[i,t,i(7136)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Button{lock(){this.content.classList.add("Locked")}unlock(){this.content.classList.remove("Locked")}select(){this.content.classList.add("Selected")}unselect(){this.content.classList.remove("Selected")}}t.ReequipButton=s}.apply(t,s),void 0===n||(e.exports=n)},488:(e,t,i)=>{var s,n;s=[i,t,i(7136)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Button{lock(){this.content.classList.add("Locked")}unlock(){this.content.classList.remove("Locked")}select(){this.content.classList.add("Selected")}unselect(){this.content.classList.remove("Selected")}}t.WeaponContainer=s}.apply(t,s),void 0===n||(e.exports=n)},6586:(e,t,i)=>{var s,n;s=[i,t,i(7774),i(4376)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.ListItem{initElements(){super.initElements(),this.registerElements({iconElement:"wrapper.icon",titleElement:"wrapper.textWrapper.title",textElement:"wrapper.textWrapper.text"})}updateData(){const{iconElement:e,titleElement:t,textElement:i,_dataModel:n}=this,a=!n.image||!n.name;a||this._image==n.image&&this._name==n.name&&this._description==n.description||(this._image=n.image,this._name=n.name,this._description=n.description,e.style.backgroundImage=`url(${this._image})`,t.innerHTML=s.replaceUnsupportedTags(this._name),i.innerHTML=s.replaceUnsupportedTags(this._description)),this.visible=!a}}t.ContaminationModifiersItem=n}.apply(t,s),void 0===n||(e.exports=n)},23:(e,t,i)=>{var s,n;s=[i,t,i(7774)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ListItem{constructor(){super(...arguments),this.rarity=""}initElements(){super.initElements(),this.registerElements({iconElement:"wrapper.imageWrapper.image",titleElement:"wrapper.textWrapper.titleWrapper.title",typeElement:"wrapper.textWrapper.titleWrapper.type",textElement:"wrapper.textWrapper.text"})}updateData(){const{iconElement:e,titleElement:t,typeElement:i,textElement:s,_dataModel:n}=this,a=!n.image||!n.title;if(this.visible=!a,!a){const a=n.rarity;this.rarity!=a&&(this.rarity&&this.content.classList.remove(this.rarity),this.rarity=a,this.content.classList.add(this.rarity)),e.style.backgroundImage=`url(${n.image})`,t.innerHTML=n.title,i.innerHTML=n.type,s.innerHTML=n.description}}}t.HordePerkItem=s}.apply(t,s),void 0===n||(e.exports=n)},2401:(e,t,i)=>{var s,n;s=[i,t,i(3222)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.RarityButton{onMouseOverImpl(e){super.onMouseOverImpl(e),this.focus()}}t.PickOneItem=s}.apply(t,s),void 0===n||(e.exports=n)},7232:(e,t,i)=>{var s,n;s=[i,t,i(9546)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.PatternButton{addActionDefaultButton(){this.content.classList.remove("Blue")}removeActionDefaultButton(){this.content.classList.add("Blue")}}t.PreBattleReadyButton=s}.apply(t,s),void 0===n||(e.exports=n)},7990:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{constructor(){super(...arguments),this._isInvoice=!1}initElements(){this.registerControls({waitingIcon:"playerPick.pickStatus.waitingIcon",readyIcon:"playerPick.pickStatus.readyIcon",invoice:"voiceStatus.invoice",speaking:"voiceStatus.speaking",muted:"voiceStatus.muted"})}setReady(){this.removeWaiting(),this.addReady()}setWaiting(){this.removeReady(),this.addWaiting()}addWaiting(){this.content.classList.add("Waiting"),this.waitingIcon.visible=!0}removeWaiting(){this.content.classList.remove("Waiting"),this.waitingIcon.visible=!1}addReady(){this.content.classList.add("Ready"),this.readyIcon.visible=!0}removeReady(){this.content.classList.remove("Ready"),this.readyIcon.visible=!1}addCurrentPlayer(){this.content.classList.add("CurrentPlayer")}removeCurrentPlayer(){this.content.classList.remove("CurrentPlayer")}addZebra(){this.content.classList.add("Zebra")}removeZebra(){this.content.classList.remove("Zebra")}addInvoice(){this._isInvoice=!0,this.invoice.visible=!0}removeInvoice(){this._isInvoice=!1,this.invoice.visible=!1}addSpeaking(){this.speaking.visible=!0,this.invoice.visible=!1}removeSpeaking(){this.speaking.visible=!1,(this._isInvoice||this.muted.visible)&&(this.invoice.visible=!0)}addMuted(){this.content.classList.add("Muted"),this.muted.visible=!0,this.invoice.visible=!0}removeMuted(){this.content.classList.remove("Muted"),this.muted.visible=!1,this._isInvoice||(this.invoice.visible=!1)}reset(){this.removeWaiting(),this.removeReady(),this.removeCurrentPlayer(),this.removeInvoice(),this.removeSpeaking(),this.removeMuted()}}t.TeamListItem=s}.apply(t,s),void 0===n||(e.exports=n)},6795:(e,t,i)=>{var s,n;s=[i,t,i(2889),i(6749),i(8606)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.Control{constructor(){super(...arguments),this.updateRect=()=>{this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this.waitFuncDispose=s.waitSeveralFrames((()=>{this.parrentRect=this.parrent.getBoundingClientRect(),this.rect=this.content.getBoundingClientRect()}))},this.onParrentRightClick=e=>{2==e.button&&this.saveMousePosition(e)},this.onParrentClick=e=>{this.saveMousePosition(e)},this.preventMouseClick=e=>{e.stopPropagation()},this.saveMousePosition=e=>{this.setPosition(e.x,e.y)}}initElements(){super.initElements(),this.parrent=this.content.parentElement,this.addListener("mousedown",this.onParrentRightClick,this.parrent),this.addListener("click",this.onParrentClick,this.parrent),this.addListener("mousedown",this.preventMouseClick),this.addListener("click",this.preventMouseClick),this.updateRect(),i.signalScreenResized.add(this.updateRect)}setPosition(e,t){this._posX=e,this._posY=t,this.visible&&this.updatePosition()}updatePosition(){this.content.classList.remove("AbsoluteCenter"),this.x=this._posX+1,this.y=this._posY+1}setAbsoluteCenter(){this.top="50%",this.left="50%",this.content.classList.add("AbsoluteCenter")}get visible(){return this._visible}set visible(e){super.visible=e,e&&this.updatePosition()}get x(){return this.content.style.leftPX}set x(e){e<this.parrentRect.left+this.parrentRect.width-this.rect.width?this.content.style.leftPX=e:this.content.style.leftPX=this.parrentRect.width-this.rect.width-.05*this.parrentRect.width}get y(){return this.content.style.topPX}set y(e){e<this.parrentRect.height-this.rect.height?this.content.style.topPX=e:this.content.style.topPX=this.parrentRect.height-this.rect.height}onDestroy(){this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),i.signalScreenResized.remove(this.updateRect),super.onDestroy()}}t.ScoreBoardContextMenu=a}.apply(t,s),void 0===n||(e.exports=n)},1861:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{onRegister(){super.onRegister(),this.content.setAttribute("data-bind-class-toggle",`PointerEventsNone:{{ScoreboardViewModel_${this.controlId}.ignoreCursor}}`)}}t.Scoreboard=s}.apply(t,s),void 0===n||(e.exports=n)},7760:(e,t,i)=>{var s,n;s=[i,t,i(7136)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Button{onRegister(){this.searchElement("text").setAttribute("data-bind-label",`{{LabelViewModel_${this.controlId}}}`)}}t.ScoreboardContextMenuButton=s}.apply(t,s),void 0===n||(e.exports=n)},8875:(e,t,i)=>{var s,n;s=[i,t,i(7136)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Button{onRegister(){this.drawNamePlayerInfo=`ScoreboardPlayerInfoViewModel_${this.controlId}`,this.registerElements({zebra:"zebra",arrowRight:"arrowRight",playerScoreContainer:"playerScore",playerNickNameLabel:"playerInfo.wrapper.playerName",emptySlotLabel:"playerInfo.wrapper.emptySlotLabel",playerImage:"playerInfo.playerImageContainer.image",deadIconContainer:"playerInfo.playerImageContainer.deadIconContainer",deadIcon:"playerInfo.playerImageContainer.deadIconContainer.deadIcon",emptySlot:"playerInfo.playerImageContainer.emptySlot",playerPlatformLabelContainer:"playerInfo.wrapper.playerPlatform",voiceStatus:"voiceStatus",muted:"voiceStatus.muted",invoice:"voiceStatus.invoice",speaking:"voiceStatus.speaking"});const e=parseInt(this.content.id[this.content.id.length-1])%2==1;this.content.setAttribute("data-bind-class-toggle",`Self:{{${this.drawNamePlayerInfo}.isSelf}};Empty:{{${this.drawNamePlayerInfo}.isEmpty}}`),this.arrowRight.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerInfo}.isSelf}};`),this.playerNickNameLabel.setAttribute("data-bind-value",`{{${this.drawNamePlayerInfo}}}.playerName`),this.playerNickNameLabel.setAttribute("data-bind-class-toggle",`Hidden:{{${this.drawNamePlayerInfo}.isEmpty}}`),this.emptySlotLabel.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerInfo}}}.isEmpty`),this.playerImage.setAttribute("data-bind-class-toggle",`Hidden:{{${this.drawNamePlayerInfo}.isEmpty}}`),this.playerImage.setAttribute("data-bind-style-background-image-url",`'{{${this.drawNamePlayerInfo}.imageUrl}}`),this.emptySlot.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerInfo}.isEmpty}}`),this.drawNamePlayerFrequentInfo=`ScoreboardPlayerFrequentInfoViewModel_${this.controlId}`,this.deadIconContainer.setAttribute("data-bind-class-toggle",`Hidden:{{${this.drawNamePlayerFrequentInfo}.isAlive}} || {{${this.drawNamePlayerInfo}.isEmpty}};`),this.deadIcon.setAttribute("data-bind-class-toggle",`Hidden:{{${this.drawNamePlayerFrequentInfo}.isAlive}} || {{${this.drawNamePlayerInfo}.isEmpty}};`),this.voiceStatus.setAttribute("data-bind-class-toggle",`Hidden:{{${this.drawNamePlayerInfo}.isEmpty}}`),this.muted.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerFrequentInfo}.isMuted}}`),this.invoice.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerFrequentInfo}.isSpeaking}}`),this.speaking.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerFrequentInfo}.isInvoice}}`),e&&this.zebra.classList.add("Hidden");for(let e=1;e<=this.playerPlatformLabelContainer.childElementCount;e++){const t=this.searchElement(`playerInfo.wrapper.playerPlatform.icon_${e}`);t.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerInfo}}}.playerPlatforms[${e-1}].isVisible || {{${this.drawNamePlayerInfo}.isEmpty}};`),t.setAttribute("data-bind-style-background-image-url",`{{${this.drawNamePlayerInfo}}}.playerPlatforms[${e-1}].value`)}this.drawNamePlayerScore=`ScoreboardPlayerScoreViewModel_${this.controlId}`,this.playerScoreContainer.setAttribute("data-bind-class-toggle",`Hidden:{{${this.drawNamePlayerInfo}.isEmpty}}`);for(let e=1;e<=this.playerScoreContainer.childElementCount;e++){const t=this.searchElement(`playerScore.label_${e}`);t.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerScore}}}.scores[${e-1}].isVisible`),t.setAttribute("data-bind-value",`{{${this.drawNamePlayerScore}}}.scores[${e-1}].value`)}}}t.ScoreboardPlayerItem=s}.apply(t,s),void 0===n||(e.exports=n)},8899:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{onRegister(){super.onRegister(),this.registerElements({titlesContainer:"titlesContainer.scoreTitles",blockTitle:"titlesContainer.blockTitle"}),this.drawModelName=`ScoreBlockViewModel_${this.controlId}`,this.content.setAttribute("data-bind-class",`{{${this.drawModelName}.teamType}}`),this.blockTitle.setAttribute("data-bind-value",`{{${this.drawModelName}.blockTitle}}`);for(let e=1;e<=this.titlesContainer.childElementCount;e++){const t=this.searchElement(`titlesContainer.scoreTitles.label_${e}`);t.setAttribute("data-bind-value",`{{${this.drawModelName}}}.blocks[${e-1}].value`),t.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawModelName}}}.blocks[${e-1}].isVisible`)}}}t.ScoreboardTeamBlock=s}.apply(t,s),void 0===n||(e.exports=n)},4158:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(8875)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.ScoreboardPlayerItem{onRegister(){this.drawNamePlayerInfo=`TestScoreboardPlayerItem_${this.controlId}`;const e="item_3"==this.content.id;i.engine.createJSModel(this.drawNamePlayerInfo,{isSelf:e,isEmpty:!1,isAlive:!1,playerName:"Gawr Gura",imageUrl:"libs/ui/images/empty.dds",playerPlatformIcon1:{isVisible:!0,value:"libs/ui/images/empty.dds"},playerPlatformIcon2:{isVisible:!0,value:"libs/ui/images/empty.dds"},label1:{isVisible:!0,value:"500"},label2:{isVisible:!1,value:"500"},label3:{isVisible:!0,value:"500"},label4:{isVisible:!0,value:"500"},label5:{isVisible:!0,value:"500"},label6:{isVisible:!0,value:"500"},label7:{isVisible:!0,value:""}}),this.registerElements({zebra:"zebra",arrowRight:"arrowRight",playerScoreContainer:"playerScore",playerNickNameLabel:"playerInfo.wrapper.playerName",emptySlotLabel:"playerInfo.wrapper.emptySlotLabel",playerImage:"playerInfo.playerImageContainer.image",deadIcon:"playerInfo.playerImageContainer.deadIconContainer.deadIcon",emptySlot:"playerInfo.playerImageContainer.emptySlot",playerPlatformLabelContainer:"playerInfo.wrapper.playerPlatform",voiceStatus:"voiceStatus",muted:"voiceStatus.muted",invoice:"voiceStatus.invoice",speaking:"voiceStatus.speaking"});const t=parseInt(this.content.id[this.content.id.length-1])%2==1;this.content.setAttribute("data-bind-class-toggle",`Self:{{${this.drawNamePlayerInfo}.isSelf}};Empty:{{${this.drawNamePlayerInfo}.isEmpty}}`),this.arrowRight.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerInfo}.isSelf}};`),this.playerNickNameLabel.setAttribute("data-bind-value",`{{${this.drawNamePlayerInfo}}}.playerName`),this.playerNickNameLabel.setAttribute("data-bind-class-toggle",`Hidden:{{${this.drawNamePlayerInfo}.isEmpty}}`),this.emptySlotLabel.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerInfo}}}.isEmpty`),this.playerImage.setAttribute("data-bind-class-toggle",`Hidden:{{${this.drawNamePlayerInfo}.isEmpty}}`),this.playerImage.setAttribute("data-bind-style-background-image-url",`'coui://' + {{${this.drawNamePlayerInfo}.imageUrl}}`),this.emptySlot.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerInfo}.isEmpty}}`),this.drawNamePlayerFrequentInfo=`ScoreboardPlayerFrequentInfoViewModel_${this.controlId}`,this.deadIcon.setAttribute("data-bind-class-toggle",`Hidden:{{${this.drawNamePlayerFrequentInfo}.isAlive}} || {{${this.drawNamePlayerInfo}.isEmpty}};`),this.voiceStatus.setAttribute("data-bind-class-toggle",`Hidden:{{${this.drawNamePlayerInfo}.isEmpty}}`),this.muted.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerFrequentInfo}.isMuted}}`),this.invoice.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerFrequentInfo}.isSpeaking}}`),this.speaking.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerFrequentInfo}.isInvoice}}`),t&&this.zebra.classList.add("Hidden");for(let e=1;e<=this.playerPlatformLabelContainer.childElementCount;e++){const t=this.searchElement(`playerInfo.wrapper.playerPlatform.icon_${e}`);t.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerInfo}}}.playerPlatforms[${e-1}].isVisible`),t.setAttribute("data-bind-style-background-image-url",`'coui://' + {{${this.drawNamePlayerInfo}}}.playerPlatforms[${e-1}].value`)}this.drawNamePlayerScore=`ScoreboardPlayerScoreViewModel_${this.controlId}`,this.playerScoreContainer.setAttribute("data-bind-class-toggle",`Hidden:{{${this.drawNamePlayerInfo}.isEmpty}}`);for(let e=1;e<=this.playerScoreContainer.childElementCount;e++){const t=this.searchElement(`playerScore.label_${e}`);t.setAttribute("data-bind-class-toggle",`Hidden:!{{${this.drawNamePlayerScore}}}.scores[${e-1}].isVisible`),t.setAttribute("data-bind-value",`{{${this.drawNamePlayerScore}}}.scores[${e-1}].value`)}}}t.TestScoreboardPlayerItem=n}.apply(t,s),void 0===n||(e.exports=n)},8071:(e,t,i)=>{var s,n;s=[i,t,i(347)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ItemsGridContainer{findLeftFocusableElementCoord(){const e=this.getCurrentIndex();for(let t=e.left-1;t>=0;t--)if(this.columnHasFocusableElements(t))for(let i=e.top;i<=this.getGridSize().y;i++){const e=this.getElementAt(t,i);if(e&&e.focusable){let s=1,n=1;for(;this.getElementAt(t-1,i)==e;)t--,s++;for(;this.getElementAt(t,i+n)==e;)n++;return this.getIndex(t,i,s,n)}}return null}findRightFocusableElementCoord(){const e=this.getCurrentIndex();for(let t=e.right+1;t<this.getGridSize().x;t++)if(this.columnHasFocusableElements(t))for(let i=e.top;i<=this.getGridSize().y;i++){const e=this.getElementAt(t,i);if(e&&e.focusable){let s=1,n=1;for(;this.getElementAt(t+s,i)==e;)s++;for(;this.getElementAt(t,i+n)==e;)n++;return this.getIndex(t,i,s,n)}}return null}columnHasFocusableElements(e){for(let t=0;t<this.getGridSize().y;t++){const i=this.getElementAt(e,t);if(i&&i.focusable)return!0}return!1}}t.ArmoryWeaponGridNavigation=s}.apply(t,s),void 0===n||(e.exports=n)},4034:(e,t,i)=>{var s,n;s=[i,t,i(117)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.GridItem{initElements(){this.registerElements({image:"wrapper.contentWrapper.image",priceWrapper:"wrapper.contentWrapper.info.topPanel.leftPanel.priceWrapper",currencyIcon:"wrapper.contentWrapper.info.topPanel.leftPanel.priceWrapper.currencyIcon",price:"wrapper.contentWrapper.info.topPanel.leftPanel.priceWrapper.price",typeIcon:"wrapper.contentWrapper.info.topPanel.typeIcon",levelWrapper:"wrapper.contentWrapper.info.topPanel.leftPanel.levelWrapper",level:"wrapper.contentWrapper.info.topPanel.leftPanel.levelWrapper.level",lock:"wrapper.contentWrapper.info.topPanel.leftPanel.lock",progress:"wrapper.contentWrapper.info.progress",progressClip:"wrapper.contentWrapper.info.progress.clip",recent:"wrapper.recentIcon"})}updateData(){"empty"==this._dataModel.type&&(this.enabled=!1,this.content.style.visibility="hidden"),this._dataModel.isInProgress&&this.setInProgress(),this._dataModel.isBuyable&&this.setBuyable(),this._dataModel.isLocked&&this.setLocked(),this._dataModel.isRecent?this.recent.classList.remove("Hidden"):this.recent.classList.add("Hidden"),this._dataModel.image&&(this.image.style.backgroundImage=`url(${this._dataModel.image})`),this._dataModel.currencyIcon&&(this.currencyIcon.style.backgroundImage=`url(${this._dataModel.currencyIcon})`),this.price.innerHTML=String(this._dataModel.price),this.level.innerHTML=String(this._dataModel.level),this._dataModel.typeIcon&&(this.typeIcon.style.backgroundImage=`url(${this._dataModel.typeIcon})`),this.progressClip.style.width=`${this._dataModel.progress}%`}setInProgress(){this.reset(),this.content.classList.add("InProgress"),this.levelWrapper.classList.remove("Hidden"),this.progress.classList.remove("Hidden")}setBuyable(){this.reset(),this.content.classList.add("Buyable"),this.priceWrapper.classList.remove("Hidden")}setLocked(){this.reset(),this.content.classList.add("Locked"),this.lock.classList.remove("Hidden")}reset(){this.content.classList.remove("InProgress"),this.content.classList.remove("Buyable"),this.content.classList.remove("Locked"),this.priceWrapper.classList.add("Hidden"),this.levelWrapper.classList.add("Hidden"),this.lock.classList.add("Hidden"),this.progress.classList.add("Hidden")}onSelect(){this.parentList.setSelectedItem(this)}}t.ArmoryWeaponItem=s}.apply(t,s),void 0===n||(e.exports=n)},8981:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{setLocked(){this.reset(),this.content.classList.add("Locked")}setOpened(){this.reset(),this.content.classList.add("Opened")}reset(){this.content.classList.remove("Locked"),this.content.classList.remove("Opened")}}t.ArmoryWeaponsListContainer=s}.apply(t,s),void 0===n||(e.exports=n)},9781:(e,t,i)=>{var s,n;s=[i,t,i(7774)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ListItem{initElements(){this.registerElements({progressBar:"progressWrapper.progressBar.clip",weaponXPWrapper:"weaponXPWrapper",currentXP:"weaponXPWrapper.weaponXP.currentXP",totalXP:"weaponXPWrapper.weaponXP.totalXP"})}updateData(){"locked"==this._dataModel.state&&this.setLocked(),"inProgress"==this._dataModel.state&&this.setInProgress(),"opened"==this._dataModel.state&&this.setOpened(),this.progressBar.style.width=`${this._dataModel.progress}%`,this.currentXP.innerHTML=`${this._dataModel.currentXP}`,this.totalXP.innerHTML=`${this._dataModel.totalXP}`}setLocked(){this.reset(),this.content.classList.add("Locked")}setInProgress(){this.reset(),this.content.classList.add("InProgress"),this.weaponXPWrapper.classList.remove("Hidden")}setOpened(){this.reset(),this.content.classList.add("Opened")}reset(){this.content.classList.remove("Locked"),this.content.classList.remove("Opened"),this.weaponXPWrapper.classList.add("Hidden")}}t.ArmoryWeaponsListProgressItem=s}.apply(t,s),void 0===n||(e.exports=n)},2712:(e,t,i)=>{var s,n;s=[i,t,i(7774)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ListItem{initElements(){this.registerElements({label:"label"})}updateData(){this.label.innerHTML=this._dataModel.text}}t.ArmoryWeaponsListTierItem=s}.apply(t,s),void 0===n||(e.exports=n)},9108:(e,t,i)=>{var s,n;s=[i,t,i(9490)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Grid{initElements(){super.initElements(),this.registerControls({tiersList:"container.contentContainer.tiersList",weaponsList:"container.contentContainer.weaponsList",progressList:"container.contentContainer.progressList"}),this.fillTiersList(),this.fillWeaponsList(),this.fillProgressList()}fillTiersList(){this.tiersList.addBlankItems(5),this.tiersList.addSeveralItems([{id:1,text:"Test tier 1"},{id:2,text:"Test tier 2"},{id:3,text:"Test tier 3"},{id:4,text:"Test tier 4"},{id:5,text:"Test tier 5"}])}fillWeaponsList(){this.weaponsList.addBlankItems(26);const e=[];for(let t=1;t<26;t++){const i={id:t,text:"",type:"",isInProgress:!1,isBuyable:!0,isLocked:!1,isRecent:!1,image:"../../images/kill_log/weapons_primary_sr_kill_log_npa.dds:sr01_icon",currencyIcon:"../../images/common/currency/soft.dds",typeIcon:"coui://libs/ui/images/common/ammo_icons.dds:ammo_rifle_auto",price:300,level:4,progress:50};6==t&&(i.type="empty"),e.push(i)}this.weaponsList.addSeveralItems(e)}fillProgressList(){this.progressList.addBlankItems(5),this.progressList.addSeveralItems([{id:1,text:"",progress:100,currentXP:0,totalXP:0,state:"opened"},{id:2,text:"",progress:100,currentXP:0,totalXP:0,state:"opened"},{id:3,text:"",progress:50,currentXP:1e3,totalXP:2e4,state:"inProgress"},{id:4,text:"",progress:0,currentXP:0,totalXP:0,state:"locked"},{id:5,text:"",progress:0,currentXP:0,totalXP:0,state:"locked"}])}}t.TestArmoryGrid=s}.apply(t,s),void 0===n||(e.exports=n)},3824:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{init(){super.init(),this.focused&&this.content.classList.add("Focused")}focus(){this.focused||(super.focus(),this.content.classList.add("Focused"))}unfocus(){this.focused&&(super.unfocus(),this.content.classList.remove("Focused"))}}t.CreatePageChoice=s}.apply(t,s),void 0===n||(e.exports=n)},5234:(e,t,i)=>{var s,n;s=[i,t,i(7774)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ListItem{constructor(){super(...arguments),this.onMouseDown=e=>{},this.onButtonClick=()=>{this.parentList.setSelectedItem(this)}}initElements(){this.registerControls("checkbox","button"),this.registerElements({label:"button.wrapper.label"})}initListeners(){super.initListeners(),this.button.signalClicked.add(this.onButtonClick)}toggleCheckbox(){this.checkbox.enabled&&(this.checkbox.value=!this.checkbox.value)}select(){super.select(),this.button.select(),this.checkbox.value=!0}unselect(){super.unselect(),this.button.unselect(),this.checkbox.value=!1}focus(){this.focused||(this.parentList.setSelectedItem(this),super.focus())}onDestroy(){this.button.signalClicked.remove(this.onButtonClick),super.onDestroy()}}t.MissionListItem=s}.apply(t,s),void 0===n||(e.exports=n)},2286:(e,t,i)=>{var s,n;s=[i,t,i(2209),i(177)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.CommonList{initNavigationElements(){super.initNavigationElements(),this.addDefinedAction(i.NavigationAction.right,((e,t,i)=>{this.handleAction(this.nextAction,t,i)})),this.addDefinedAction(i.NavigationAction.left,((e,t,i)=>{this.handleAction(this.prevAction,t,i)}))}computeAvailableActionlist(){const e=super.computeAvailableActionlist();return e.has(this.nextAction)||e.delete(i.NavigationAction.right),e.has(this.prevAction)||e.delete(i.NavigationAction.left),e}}t.FriendsListNavigation=n}.apply(t,s),void 0===n||(e.exports=n)},5906:(e,t,i)=>{var s,n;s=[i,t,i(2209),i(177)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.CommonList{constructor(){super(...arguments),this.onButtonVisibilityChanged=()=>{this.updateAvailableActionlist()}}attachToControl(e){super.attachToControl(e),this._leavePartyButton=e.searchControl("grid.container.squadBlock.header.controlContainer.leave"),this._findPlayerButton=e.searchControl("grid.container.friendsBlock.header.controlContainer.friendAddButton"),this._leavePartyButton.signalVisibilityChanged.add(this.onButtonVisibilityChanged),this._findPlayerButton.signalVisibilityChanged.add(this.onButtonVisibilityChanged)}detach(){super.detach(),this.control&&(this._leavePartyButton.signalVisibilityChanged.remove(this.onButtonVisibilityChanged),this._findPlayerButton.signalEnabledChanged.remove(this.onButtonVisibilityChanged),this._leavePartyButton=null,this._findPlayerButton=null)}computeAvailableActionlist(){const e=super.computeAvailableActionlist();return this._leavePartyButton&&!this._leavePartyButton.visible&&e.delete(i.NavigationAction.leave_squad),this._findPlayerButton&&!this._findPlayerButton.visible&&e.delete(i.NavigationAction.find_player),e}}t.FriendsPageNavigation=n}.apply(t,s),void 0===n||(e.exports=n)},831:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(227),i(2484)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.DefaultScreen{constructor(){super(...arguments),this._currentPage=0,this.buttons=[],this.selectedButton=null,this._pagesXVh=0,this.pagesCount=0,this.pageWidth=27.3,this.scrollDelta=0,this.hasWheelListener=!1,this.onPagePress=e=>{const t=this.buttons.indexOf(e);this.showPage(t)},this.onArrowPress=e=>{const t=this._currentPage+(e==this.leftArrow?-1:1);this.showPage(t)},this.onMouseScroll=e=>{this.activateScroll(e.deltaY)},this.deactivateScrollTimer=()=>{this.scrollTimerActive=!1,this.scrollDelta=0}}initElements(){this.registerControls({leftArrow:"content.outfit.paginator.arrowLeftContainer",rightArrow:"content.outfit.paginator.arrowRightContainer",paginator:"content.outfit.paginator",pages:"content.outfit.grid.container",grid:"content.outfit.grid",outfit:"content.outfit"}),this.registerElements({buttonsContainer:"content.outfit.paginator.buttons"}),this.leftArrow.signalPressed.add(this.onArrowPress),this.rightArrow.signalPressed.add(this.onArrowPress),this.containerX=0}showPage(e){const t=this.pageWidth+1.2;e>=0&&e<this.pagesCount&&(this.selectButton(e),this._currentPage=e,i.TweenMax.killTweensOf(this),i.TweenMax.to(this,.2,{containerX:-t*e}))}nextPage(){const e=this._currentPage+1;this.showPage(e)}prevPage(){const e=this._currentPage-1;this.showPage(e)}selectButton(e){this.selectedButton&&this.selectedButton.unselect(),this.selectedButton=this.buttons[e],this.selectedButton.select()}updatePaginator(){this.removeButtons(),this.containerX=0,this.updateContainer();const e=this.pagesCount>1;this.paginator.visible=e,e&&(this.createButtons(),this.showPage(0)),this.enableWheelListener(e)}enableWheelListener(e){e!=this.hasWheelListener&&(e?this.pages.addListener("wheel",this.onMouseScroll):this.pages.removeListener("wheel",this.onMouseScroll),this.hasWheelListener=e)}updateContainer(){const e=this.pages.content.childNodes;for(let t=0;t<e.length;t++){const i=e[t];if(!i.classList.contains("Hidden")){this.pagesCount=i.childElementCount,i.classList.contains("hero-outfit__container-wide")?this.pageWidth=46.7:this.pageWidth=27.3;break}}this.grid.width=`${this.pageWidth}vh`}createButtons(){for(let e=0;e<this.pagesCount;e++){const t=s.Factory.createChildControl("HeroCustomizationPaginatorButton",this.buttonsContainer);t.content.id=`paginatorButton${e+1}`,this.buttons.push(t),t.signalPressed.add(this.onPagePress)}}removeButtons(){this.buttons.forEach((e=>{e.signalPressed.removeAll(),e.destroy()})),this.buttons=[]}activateScroll(e){this.scrollTimerActive?Math.abs(this.scrollDelta)>=2?(this.scrollDelta>0?this.nextPage():this.prevPage(),i.TweenMax.killAll(!1,!1,!0),this.deactivateScrollTimer()):this.scrollDelta+=e:(this.scrollTimerActive=!0,window.clearTimeout(this.deactivateScrollTimeout),this.deactivateScrollTimeout=window.setTimeout(this.deactivateScrollTimer,200))}onDestroy(){window.clearTimeout(this.deactivateScrollTimeout),this.leftArrow.signalPressed.remove(this.onArrowPress),this.rightArrow.signalPressed.remove(this.onArrowPress),super.onDestroy()}get currentPage(){return this._currentPage}get containerX(){return this._pagesXVh}set containerX(e){this._pagesXVh=e,this.pages.content.style.transform=`translateX(${e}vh)`}}t.HeroCustomization=a}.apply(t,s),void 0===n||(e.exports=n)},3444:(e,t,i)=>{var s,n;s=[i,t,i(7136),i(4260),i(5542),i(831)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends i.Button{onRegister(){}select(){this.content.classList.add("Selected"),this.content.classList.add("Transition")}unselect(){this.content.classList.remove("Selected")}onMouseOverImpl(e){super.onMouseOverImpl(e),this.content.classList.add("Transition")}onMouseOutImpl(e){super.onMouseOutImpl(e),this.unfocus()}focus(){this.focused||(super.focus(),this.scrollToPage())}scrollToPage(){const e=s.searchParentControlByType(this,a.HeroCustomization),t=this.content.parentElement;if(e&&t&&-1!=t.id.indexOf("section")){const i=+t.id.split("_").pop()-1;e.currentPage!=i&&e.showPage(i)}}addLocked(){this.content.classList.add("Locked")}removeLocked(){this.content.classList.remove("Locked")}unselectImmediate(){this.content.classList.remove("Transition"),this.unselect()}trigger(){this.content.classList.contains("Locked")||this.dispatchExternalEvent(n.ExternalEvent.clicked)}}t.HeroOutfitButton=o}.apply(t,s),void 0===n||(e.exports=n)},5708:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{constructor(){super(...arguments),this.duration=1}animationUpdate(){i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,this.duration,{alpha:0,ease:i.Power3.easeOut},{alpha:1})}}t.HeroProgressionDescription=n}.apply(t,s),void 0===n||(e.exports=n)},8780:(e,t,i)=>{var s,n;s=[i,t,i(8613)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.EmptySelectableButton{addCurrent(){this.content.classList.add("Current")}addClosed(){this.content.classList.add("Closed")}removeClosed(){this.content.classList.remove("Closed")}}t.HeroProgressionItem=s}.apply(t,s),void 0===n||(e.exports=n)},6695:(e,t,i)=>{var s,n;s=[i,t,i(117)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.GridItem{initElements(){super.initElements(),this.registerElements({image:"wrapper.image"})}updateData(){const{_dataModel:e,content:t,image:i,recentIcon:s}=this;this.type!=e.type&&(t.classList.remove(this.type),this.type=e.type,t.classList.add(this.type)),""!=e.image?(this.enabled=this.visible=!0,i.style.backgroundImage=`url(${e.image})`):(this.enabled=this.visible=!1,i.style.backgroundImage="none")}onSelect(){this.parentList.setSelectedItem(this)}}t.HeroAbilityItem=s}.apply(t,s),void 0===n||(e.exports=n)},6399:(e,t,i)=>{var s,n;s=[i,t,i(6749),i(2484)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.DefaultScreen{initElements(){this.registerElements({heroInfo:"content.heroName"})}updateHeroInfo(){i.restartAllAnimations(this.heroInfo)}show(){super.show(),this.updateHeroInfo()}}t.HeroSelection=n}.apply(t,s),void 0===n||(e.exports=n)},8001:(e,t,i)=>{var s,n;s=[i,t,i(117)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.GridItem{initElements(){super.initElements(),this.registerElements("recentIcon",{image:"innerMask.image"})}updateData(){const{_dataModel:e,content:t,image:i,recentIcon:s}=this;e.isLocked?t.classList.add("Locked"):t.classList.remove("Locked"),""!=e.image?i.style.backgroundImage=`url(${e.image})`:i.style.backgroundImage="none",e.isRecent?s.classList.remove("Hidden"):s.classList.add("Hidden")}onSelect(){this.parentList.setSelectedItem(this)}}t.HeroSelectionItem=s}.apply(t,s),void 0===n||(e.exports=n)},6262:(e,t,i)=>{var s,n;s=[i,t,i(8613)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.EmptySelectableButton{select(){this.selected||(super.select(),this.searchParentControl("grid").scrollToElement(this.content))}}t.InboxItem=s}.apply(t,s),void 0===n||(e.exports=n)},3339:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{initElements(){this.registerElements({_search:"wrapper.image_search",_connect:"wrapper.image_connect",_cancel:"wrapper.image_cancel"})}search(){this._search.classList.remove("Hidden"),this._connect.classList.add("Hidden"),this._cancel.classList.add("Hidden"),this.visible=!0,i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,.5,{alpha:0},{alpha:1})}connect(){this._search.classList.add("Hidden"),this._connect.classList.remove("Hidden"),this._cancel.classList.add("Hidden")}cancel(){this._search.classList.add("Hidden"),this._connect.classList.add("Hidden"),this._cancel.classList.remove("Hidden"),i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,.5,{alpha:1},{alpha:0,delay:2,onComplete:()=>{this.visible=!1}})}hide(){i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,.5,{alpha:1},{alpha:0,onComplete:()=>{this.visible=!1}})}}t.MatchmakingInfoWidget=n}.apply(t,s),void 0===n||(e.exports=n)},588:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{show(){super.show(),this.disableInput(),i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,.2,{alpha:0},{alpha:1,delay:.6,onComplete:()=>{this.enableInput()}})}hide(){i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,.2,{alpha:1},{alpha:0,onComplete:()=>{this.visible=!1}})}}t.NavigationBarTiny=n}.apply(t,s),void 0===n||(e.exports=n)},4560:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606),i(3008)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.signalItemSelected=new n.Signal;class a extends s.Control{constructor(){super(...arguments),this.showDuration=.4,this.hideDuration=.3,this.scrollUpPercent=200}initElements(){t.pageNavigationBar=this}setLocked(e){e?(this.disableInput(),this.content.classList.add("Locked")):(this.enableInput(),this.content.classList.remove("Locked"))}scrollDown(){super.show(),this.setLocked(!0),i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,this.showDuration,{alpha:0,filter:"blur(14px)"},{alpha:1,filter:"blur(0px)",onComplete:()=>{this.setLocked(!1)}})}scrollUp(){this.setLocked(!0),i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,this.hideDuration,{alpha:1,filter:"blur(0px)"},{alpha:0,filter:"blur(14px)",onComplete:()=>{super.hide()}})}}t.NavigationBar=a}.apply(t,s),void 0===n||(e.exports=n)},9666:(e,t,i)=>{var s,n;s=[i,t,i(5773),i(4560)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.SelectableButton{constructor(){super(...arguments),this.onVisibilityChanged=()=>{this.selectPanel.updatePosition()}}initElements(){super.initElements();const e=this.searchParentControl("container");this.selectPanel=e.searchControl("selectPanel")}initListeners(){super.initListeners(),this.signalVisibilityChanged.add(this.onVisibilityChanged)}onSelect(){this.selectPanel.moveToItem(this,!1),s.signalItemSelected.dispatch(this)}selectPanelMoveToItem(){this.selectPanel.moveToItem(this,!0)}onDestroy(){this.signalVisibilityChanged.remove(this.onVisibilityChanged),super.onDestroy()}setPremium(){this.content.classList.add("Premium")}}t.NavigationBarItem=n}.apply(t,s),void 0===n||(e.exports=n)},4884:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(5542),i(2889),i(9586),i(6749)],n=function(e,t,i,s,n,a,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r extends i.Control{constructor(){super(...arguments),this.forceUpdate=!1,this.updatePosition=()=>{this.moveToItem(this._item,!0)},this.waitItemReady=()=>{const{_item:e}=this;e&&e.content.offsetWidth?(this.content.style.left=`${a._pxToVh(e.content.offsetLeft).toFixed(6)}vh`,this.content.style.width=`${a._pxToVh(e.content.offsetWidth).toFixed(6)}vh`,this.forceUpdate?(this.content.style.transition="none",this.forceUpdate=!1):(this.content.style.transition="",this.content.classList.add("Transition"),window.clearTimeout(this.timeoutId),this.timeoutId=window.setTimeout(this.removeTransition,300)),this.content.style.opacity="1"):this.waitActivate&&!this.activated&&this.signalActivate.add(this.waitItemReady)},this.removeTransition=()=>{window.clearTimeout(this.timeoutId),this.content.classList.remove("Transition"),this.dispatchExternalEvent(s.ExternalEvent.nav_bar_move_end)}}init(){super.init(),n.signalScreenResized.add(this.updatePosition)}moveToItem(e,t){this.forceUpdate=t||this.forceUpdate,this._item&&this._item.content.id==e.content.id&&!this.forceUpdate||(this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this._item=e,this.waitFuncDispose=o.waitSeveralFrames(this.waitItemReady))}onDestroy(){this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this.signalActivate.remove(this.waitItemReady),window.clearTimeout(this.timeoutId),n.signalScreenResized.remove(this.updatePosition),super.onDestroy()}}t.NavigationBarSelectPanel=r}.apply(t,s),void 0===n||(e.exports=n)},4656:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{addPlaying(){this.content.classList.add("Playing")}removePlaying(){this.content.classList.remove("Playing")}}t.ModeInfoPVEBriefing=s}.apply(t,s),void 0===n||(e.exports=n)},7417:(e,t,i)=>{var s,n;s=[i,t,i(7774)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ListItem{constructor(){super(...arguments),this._checked=!1,this.onMouseDown=e=>{},this.onCheckboxValueChanged=()=>{this.checked!=this.checkbox.value&&(this._checked=this.checkbox.value,this.parentList.onCheckboxValueChanged(this,this.checkbox.value))},this.onButtonClick=()=>{this.parentList.setSelectedItem(this)}}initElements(){this.registerControls("checkbox","button"),this.registerElements({label:"button.wrapper.label"})}initListeners(){super.initListeners(),this.checkbox.signalValueChanged.add(this.onCheckboxValueChanged),this.button.signalClicked.add(this.onButtonClick)}trigger(){this.checkbox.enabled&&(this.checkbox.value=!this.checkbox.value)}setCheckboxLocked(e){this.checkbox.enabled=!e}setCheckboxVisible(e){this.checkbox.visible=e}updateData(){const{checkbox:e,button:t,dataModel:i}=this;this.text=i.text,this._checked=i.checked,e.value=i.checked,i.selected?t.select():t.unselect()}select(){super.select(),this.button.select()}unselect(){super.unselect(),this.button.unselect()}focus(){this.focused||(this.parentList.setSelectedItem(this),super.focus())}onDestroy(){this.checkbox.signalValueChanged.remove(this.onCheckboxValueChanged),this.button.signalClicked.remove(this.onButtonClick),this._dataModel=null,super.onDestroy()}get checked(){return this._checked}get dataModel(){return this._dataModel}}t.ModeInfoPVPItem=s}.apply(t,s),void 0===n||(e.exports=n)},5980:(e,t,i)=>{var s,n;s=[i,t,i(5542),i(5198)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.ListBox{constructor(){super(...arguments),this._minCheckedItems=0,this._currCheckedItems=0,this.onItemCountChanged=()=>{this._currCheckedItems=0;for(const e of this.items.values())e.checked&&this._currCheckedItems++;this.setCheckboxesVisible(this.items.size>this._minCheckedItems),this._currCheckedItems<=this._minCheckedItems&&this.lockCheckboxes()}}onRegister(){this._navContainer=this.containerControl.navigation}initListeners(){super.initListeners(),this.signalCountChanged.add(this.onItemCountChanged)}lockCheckboxes(){for(const e of this.items.values()){const t=e;t.checked&&t.setCheckboxLocked(!0)}}unlockCheckboxes(){for(const e of this.items.values())e.setCheckboxLocked(!1)}setCheckboxesVisible(e){for(const t of this.items.values())t.setCheckboxVisible(e);this._navContainer&&(this._navContainer.selectEnabled=e)}onCheckboxValueChanged(e,t){t?(this._currCheckedItems==this._minCheckedItems&&this.unlockCheckboxes(),this._currCheckedItems++):(this._currCheckedItems--,this._currCheckedItems<=this._minCheckedItems&&this.lockCheckboxes()),this.dispatchExternalEvent(i.ExternalEvent.checkbox_value_changed,e.itemId,t)}setMinCheckedItems(e){this._minCheckedItems=e,this.setCheckboxesVisible(this.items.size>this._minCheckedItems),this._currCheckedItems<=this._minCheckedItems?this.lockCheckboxes():this.unlockCheckboxes()}}t.ModeInfoPVPList=n}.apply(t,s),void 0===n||(e.exports=n)},7194:(e,t,i)=>{var s,n;s=[i,t,i(9541)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.DefaultButton{onRegister(){}initElements(){super.initElements(),this.registerElements({label:"wrapper.titleWrapper.title"}),this._dataModel={text:""}}}t.PlayModeItem=s}.apply(t,s),void 0===n||(e.exports=n)},3640:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{setLimit(){this.content.classList.add("Limit")}reset(){this.content.classList.remove("Limit")}}t.PlayerInfoWidgetCurrencyLimit=s}.apply(t,s),void 0===n||(e.exports=n)},9171:(e,t,i)=>{var s,n;s=[i,t,i(1318)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ItemsGrid{init(){super.init(),this.test2()}test(){this.addBlankItems(1),this.addSeveralItems([{id:1,text:"",isLocked:!1,type:"empty",rarity:"Common",image:"../../images/test/hero_brisa.tif",amount:0,isPremium:!0}])}test2(){const e=[];for(let t=1;t<=6;t++){this.addBlankItems(1);const i={id:t,text:"",isLocked:!!(Math.ceil(2*Math.random())-1),type:"",rarity:Math.ceil(2*Math.random())-1?"Legendary":"Common",image:Math.ceil(2*Math.random())-1?"../../images/test/hero_brisa.tif":"../../images/common/currency/hard.tif",isPremium:!0};e.push(i)}this.addSeveralItems(e)}}t.TestPurchaseSeasonPassRewardsList=s}.apply(t,s),void 0===n||(e.exports=n)},3395:(e,t,i)=>{var s,n;s=[i,t,i(7774)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ListItem{constructor(){super(...arguments),this.itemWidth=12.111}initElements(){super.initElements(),this.registerElements({progress:"progressWrapper.progressBar.clip",level:"level",infiniteLevel:"infiniteLevel"}),this.progress.style.width="0%"}select(){}focus(){}updateData(){this.progress.style.width=`${this._dataModel.progress}%`,this._dataModel.breaking?(this.level.classList.add("Hidden"),this.infiniteLevel.classList.add("Hidden")):(this.level.innerHTML=this._dataModel.level,this.level.classList.remove("Hidden"),this._dataModel.infiniteLevel?this.infiniteLevel.classList.remove("Hidden"):this.infiniteLevel.classList.add("Hidden")),this.content.style.width=this.itemWidth*this._dataModel.size+"vh",0==this._dataModel.progress?this.content.classList.add("Closed"):this.content.classList.remove("Closed"),100==this._dataModel.progress?this.content.classList.add("Opened"):this.content.classList.remove("Opened"),this.visible=!0}clear(){this.visible=!1}}t.SeasonPassProgressLevel=s}.apply(t,s),void 0===n||(e.exports=n)},5446:(e,t,i)=>{var s,n;s=[i,t,i(1318)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ItemsGrid{init(){super.init(),this.test()}test(){this.addBlankItems(10),this.addSeveralItems([{id:1,text:"1",progress:100,level:"1",breaking:!1,infiniteLevel:!1,size:4},{id:2,text:"2",progress:100,level:"2",breaking:!1,infiniteLevel:!1,size:1},{id:3,text:"3",progress:50,level:"3",breaking:!1,infiniteLevel:!1,size:2},{id:4,text:"2",progress:0,level:"4",breaking:!1,infiniteLevel:!1,size:1},{id:5,text:"3",progress:0,level:"5",breaking:!1,infiniteLevel:!1,size:1},{id:6,text:"1",progress:0,level:"6",breaking:!1,infiniteLevel:!1,size:1},{id:7,text:"2",progress:0,level:"7",breaking:!1,infiniteLevel:!1,size:1},{id:8,text:"3",progress:0,level:"8",breaking:!1,infiniteLevel:!1,size:1},{id:9,text:"2",progress:0,level:"9",breaking:!1,infiniteLevel:!1,size:1},{id:10,text:"3",progress:0,level:"10+",breaking:!1,infiniteLevel:!0,size:1}])}}t.TestSeasonPassProgressLevelList=s}.apply(t,s),void 0===n||(e.exports=n)},7490:(e,t,i)=>{var s,n;s=[i,t,i(1318)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ItemsGrid{init(){super.init(),this.test()}test(){this.addBlankItems(10),this.addSeveralItems([{id:1,text:"",isLocked:!1,type:"empty",rarity:"Common",image:"../../images/test/hero_brisa.tif",amount:0,isPremium:!1,view_path:"RarityItemMedium"},{id:2,text:"",isLocked:!1,type:"empty",rarity:"Uncommon",image:"../../images/test/hero_brisa.tif",amount:0,isPremium:!1,view_path:"RarityItemLarge"},{id:3,text:"",isLocked:!1,type:"",rarity:"Rare",image:"../../images/test/hero_brisa.tif",amount:0,isPremium:!1,view_path:"RarityItemMedium"},{id:4,text:"",isLocked:!1,type:"",rarity:"Epic",image:"../../images/test/hero_brisa.tif",amount:0,isPremium:!1,view_path:"RarityItemLarge"},{id:5,text:"",isLocked:!1,type:"currency",rarity:"Legendary",image:"../../images/common/currency/season_xp.svg",amount:500,isPremium:!1,view_path:"RarityItemMedium"},{id:6,text:"",isLocked:!0,type:"currency",rarity:"Legendary",image:"../../images/common/currency/hard.tif",amount:5e6,isPremium:!1,view_path:"RarityItemLarge"},{id:7,text:"",isLocked:!0,type:"",rarity:"Legendary",image:"../../images/test/hero_brisa.tif",amount:0,isPremium:!1,view_path:"RarityItemMedium"},{id:8,text:"",isLocked:!0,type:"",rarity:"Legendary",image:"../../images/test/hero_brisa.tif",amount:0,isPremium:!1,view_path:"RarityItemLarge"},{id:9,text:"",isLocked:!0,type:"",rarity:"Legendary",image:"../../images/test/hero_brisa.tif",amount:0,isPremium:!1,view_path:"RarityItemMedium"},{id:10,text:"",isLocked:!0,type:"",rarity:"Legendary",image:"../../images/test/hero_brisa.tif",amount:0,isPremium:!1,view_path:"RarityItemLarge"}])}test2(){const e=[];for(let t=1;t<100;t++){this.addBlankItems(1);const i={id:t,text:"",isLocked:!!(Math.ceil(2*Math.random())-1),type:1==t?"empty":"",rarity:Math.ceil(2*Math.random())-1?"Legendary":"Common",image:Math.ceil(2*Math.random())-1?"../../images/test/hero_brisa.tif":"../../images/common/currency/hard.tif",isPremium:!1,view_path:"RarityItemMedium"};e.push(i)}this.addSeveralItems(e)}}t.TestSeasonPassRewardsList=s}.apply(t,s),void 0===n||(e.exports=n)},8306:(e,t,i)=>{var s,n;s=[i,t,i(5542),i(7801)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.ButtonModelless{constructor(){super(...arguments),this._needScroll=!0}setupParentControl(){super.setupParentControl(),this.parentGrid=this.searchOptionalParentControl("grid")}onMouseOverImpl(e){this._enabled&&(this._isMouseOvered=!0,this._focusOnHover&&(this._needScroll=!1,this.focus(),this._needScroll=!0),this.dispatchExternalEvent(i.ExternalEvent.mouse_overed))}focus(){this.focused||(super.focus(),this.parentGrid&&this._needScroll&&this.parentGrid.scrollToElement(this.content))}bought(){this.content.classList.add("Bought")}setSize1x1(){this.content.classList.add("shop-product-size-1x1")}setSize2x1(){this.content.classList.add("shop-product-size-2x1")}setSize3x1(){this.content.classList.add("shop-product-size-3x1")}setSize4x1(){this.content.classList.add("shop-product-size-4x1")}setSize5x1(){this.content.classList.add("shop-product-size-5x1")}setSize1x2(){this.content.classList.add("shop-product-size-1x2")}setSize2x2(){this.content.classList.add("shop-product-size-2x2")}setSize3x2(){this.content.classList.add("shop-product-size-3x2")}setSize4x2(){this.content.classList.add("shop-product-size-4x2")}setSize5x2(){this.content.classList.add("shop-product-size-5x2")}}t.ShopProduct=n}.apply(t,s),void 0===n||(e.exports=n)},9142:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{constructor(){super(...arguments),this.currentSize=""}setSize1x1(){this.applySize("shop-product-preview-size-1x1")}setSize2x1(){this.applySize("shop-product-preview-size-2x1")}setSize3x1(){this.applySize("shop-product-preview-size-3x1")}setSize4x1(){this.applySize("shop-product-preview-size-4x1")}setSize1x2(){this.applySize("shop-product-preview-size-1x2")}setSize2x2(){this.applySize("shop-product-preview-size-2x2")}setSize3x2(){this.applySize("shop-product-preview-size-3x2")}setSize4x2(){this.applySize("shop-product-preview-size-4x2")}applySize(e){this.currentSize!=e&&(""!=this.currentSize&&this.content.classList.remove(this.currentSize),this.currentSize=e,this.content.classList.add(this.currentSize))}}t.ShopProductPreviewItem=s}.apply(t,s),void 0===n||(e.exports=n)},6213:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(5542)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.Control{constructor(){super(...arguments),this.onFaderClick=e=>{let t=e.target,i=!1;for(;t;){if(t==this.content){i=!0;break}t=t.parentElement}i||(e.stopImmediatePropagation(),this.dispatchExternalEvent(s.ExternalEvent.close_context_menu))},this.onVisibilityChanged=()=>{this.visible?window.addEventListener("click",this.onFaderClick):window.removeEventListener("click",this.onFaderClick)}}initListeners(){this.signalVisibilityChanged.add(this.onVisibilityChanged)}}t.ContextMenu=n}.apply(t,s),void 0===n||(e.exports=n)},2099:(e,t,i)=>{var s,n;s=[i,t,i(7774),i(4376)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.ListItem{constructor(){super(...arguments),this.badgeTypeClass=""}initElements(){super.initElements(),this.registerElements({name:"wrapper.nameplate.bodyWrapper.nameWrapper.name",clan:"wrapper.nameplate.bodyWrapper.nameWrapper.clan",icon:"wrapper.nameplate.bodyWrapper.icon",background:"wrapper.nameplate.background",platform:"wrapper.nameplate.bodyWrapper.platform"}),this.registerControls("wrapper")}initListeners(){this.wrapper.addListener("mouseover",this.onMouseOver),this.wrapper.addListener("mouseout",this.onMouseOut),this.wrapper.addListener("mousedown",this.onMouseDown)}updateData(){this._dataModel.isPartyLeader?this.content.classList.add("PartyLeader"):this.content.classList.remove("PartyLeader");let e="";2==this._dataModel.badgeType?e="FriendRequest":3==this._dataModel.badgeType&&(e="PartyRequest"),this.badgeTypeClass!=e&&(this.content.classList.remove(this.badgeTypeClass),this.badgeTypeClass=e,this.content.classList.add(this.badgeTypeClass)),this.name.innerHTML=`<div id="status" class="player-list-item__status ${this._dataModel.status}"></div> ${s.replaceHTMLSpecialChars(this._dataModel.name)}`,this.icon.style.backgroundImage=`url(${this._dataModel.icon})`,this.background.style.backgroundImage=`url(${this._dataModel.image})`,this.platform.style.backgroundImage=`url(${this._dataModel.platformIcon})`}}t.PlayerListItem=n}.apply(t,s),void 0===n||(e.exports=n)},7497:(e,t,i)=>{var s,n;s=[i,t,i(1318)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ItemsGrid{setSelectedItem(e,t=!0,i=!0){super.setSelectedItem(e,t,i),this._selectedItem&&(this._selectedItem.unselect(),this._selectedItem=null)}expand(){this.content.classList.add("Expanded")}reduce(){this.content.classList.remove("Expanded")}}t.PlayerList=s}.apply(t,s),void 0===n||(e.exports=n)},5629:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{constructor(){super(...arguments),this.onInputFocusChanged=()=>{this.input.content.classList.contains("EditFocused")?this.focus():this.unfocus()}}initElements(){super.initElements(),this.registerControls("input"),this.focused&&this.content.classList.add("Focused")}initListeners(){this.input.signalEditFocusChanged.add(this.onInputFocusChanged)}focus(){this.focused||(super.focus(),this.content.classList.add("Focused"))}unfocus(){this.focused&&(super.unfocus(),this.content.classList.remove("Focused"))}onDestroy(){this.input.signalEditFocusChanged.remove(this.onInputFocusChanged),super.onDestroy()}}t.SocialSearchPanel=s}.apply(t,s),void 0===n||(e.exports=n)},278:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{initElements(){super.initElements(),this.registerControls({fader:"wrapper.fader"})}fadePanel(){this.content.classList.add("Fade")}unfadePanel(){this.content.classList.remove("Fade")}}t.SocialPanel=s}.apply(t,s),void 0===n||(e.exports=n)},5769:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{init(){super.init(),this.focused&&this.content.classList.add("Focused")}focus(){this.focused||(super.focus(),this.content.classList.add("Focused"))}unfocus(){this.focused&&(super.unfocus(),this.content.classList.remove("Focused"))}}t.SocialPanelBlock=s}.apply(t,s),void 0===n||(e.exports=n)},5423:(e,t,i)=>{var s,n;s=[i,t,i(227),i(6749),i(117)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.GridItem{initElements(){this.registerElements({lockIcon:"wrapper.labelsContainer.titleWrapper.lockIcon",checkMark:"wrapper.labelsContainer.titleWrapper.mark",name:"wrapper.labelsContainer.titleWrapper.categoryTitle",progressContainer:"wrapper.progressContainer",timer:"wrapper.labelsContainer.timer"}),this.timerControl=i.Factory.registerChildControl(this.timer)}onSelect(){this.parentList.setSelectedItem(this)}updateData(){this.fillCategoryProgress(),this._dataModel.isLocked?(this.lockIcon.classList.remove("Hidden"),this.content.classList.add("Locked"),this.enabled=!1):(this.lockIcon.classList.add("Hidden"),this.content.classList.remove("Locked"),this.enabled=!0),this._dataModel.isCompleted?(this.checkMark.classList.remove("Hidden"),this.content.classList.add("Completed")):(this.checkMark.classList.add("Hidden"),this.content.classList.remove("Completed")),this._dataModel.timeToEnd?(this.timerControl.visible=!0,this.timerControl.localizedText=this._dataModel.timeToEnd):this.timerControl.visible=!1,this.name.innerHTML=i.translate(this._dataModel.name)}fillCategoryProgress(){s.removeChildren(this.progressContainer);const e=this.progressContainer,t="TaskCategoryProgress";if(this._dataModel.tasksInCategory<=10)for(let s=1;s<=this._dataModel.tasksInCategory;s++){const n=i.Factory.createChildElement(t,e);n.id=`item_${s}`,s<=this._dataModel.tasksCompleted&&n.classList.add("Full")}else if(0==this._dataModel.tasksInCategory)e.classList.add("Hidden");else{const s=i.Factory.createChildElement(t,e),n=this.searchElement("clip",s);s.id="item_1",n.style.width=this._dataModel.tasksCompleted/this._dataModel.tasksInCategory*100+"%"}}}t.TaskCategoryItem=a}.apply(t,s),void 0===n||(e.exports=n)},9356:(e,t,i)=>{var s,n;s=[i,t,i(227),i(6749),i(117)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.GridItem{initElements(){super.initElements(),this.registerElements({mainCondition:"wrapper.mainCondition",additionalConditionContainer:"wrapper.additionalConditionsContainer",checkMark:"wrapper.mainCondition.contentWrapper.info.titleContainer.mark",rewardsContainer:"wrapper.mainCondition.contentWrapper.rewardsContainer"})}onSelect(){this.parentList.setSelectedItem(this)}updateData(){this.updateRarity(),this.setupMainCondition(),this.updateReward(),this.addAddtionaConditionAsElement(this._dataModel.conditions)}updateReward(){for(let e=1;e<=this.rewardsContainer.childElementCount;e++){const t=this.searchElement(`reward_${e}`,this.rewardsContainer),i=this._dataModel.rewards[e-1];if(i){t.classList.remove("Hidden");const e=this.searchElement("image",t),s=this.searchElement("amount",t);e.style.backgroundImage=`url(${i.image})`,s.innerHTML=`${i.amount}`}else t.classList.add("Hidden")}}updateRarity(){const e=s.capitalize(this._dataModel.rarity.toLowerCase());this.currentRarity&&this.currentRarity!=e&&this.content.classList.remove(this.currentRarity),this.currentRarity=e,this.content.classList.add(this.currentRarity)}setupMainCondition(){const e=this._dataModel,t=this.mainCondition,s=this.searchElement("contentWrapper.info.progressBarContainer.progressBar",this.mainCondition),n=this.searchElement("contentWrapper.info.progressBarContainer.progressBar.clip",this.mainCondition);if(s.classList.remove("Hidden"),this.searchElement("contentWrapper.info.titleContainer.titleWrapper.name",t).innerHTML=i.translate(e.name),e.conditions.length>1){i.Factory.registerChildControl(this.searchElement("contentWrapper.info.titleContainer.titleWrapper.description",t)).localizedText=i.translate(e.description),this.searchElement("contentWrapper.info.progressLabelContainer.maxValue",t).innerHTML=`${e.conditions.length}`;let s=0,a=0;for(let t=0;t<e.conditions.length;t++)s+=e.conditions[t].currentValue,a+=e.conditions[t].maxValue;n.style.width=s/a*100+"%",this.searchElement("contentWrapper.info.progressLabelContainer.currentValue",t).innerHTML=`${e.completedConditionCount}`,e.completedConditionCount==e.conditions.length?this.checkMark.classList.remove("Hidden"):this.checkMark.classList.add("Hidden")}else e.conditions.length>0&&this.setupCondition(t,e.conditions[0])}addAddtionaConditionAsElement(e){if(s.removeChildren(this.additionalConditionContainer),e.length>1)for(let t=0;t<e.length;t++){const s=e[t],n=i.Factory.createChildElement("TaskAdditionalCondition",this.additionalConditionContainer);n.id=`item_${t}`,this.setupCondition(n,s)}}setupCondition(e,t){const s="contentWrapper.info.titleContainer.mark";i.Factory.registerChildControl(this.searchElement("contentWrapper.info.titleContainer.titleWrapper.description",e)).localizedText=i.translate(t.description),this.searchElement("contentWrapper.info.progressBarContainer.progressBar.clip",e).style.width=t.currentValue/t.maxValue*100+"%",this.searchElement("contentWrapper.info.progressLabelContainer.currentValue",e).innerHTML=`${t.currentValue}`,this.searchElement("contentWrapper.info.progressLabelContainer.maxValue",e).innerHTML=`${t.maxValue}`,t.currentValue!==t.maxValue?this.searchElement(s,e).classList.add("Hidden"):this.searchElement(s,e).classList.remove("Hidden")}}t.TaskItem=a}.apply(t,s),void 0===n||(e.exports=n)},3581:(e,t,i)=>{var s,n;s=[i,t,i(227),i(1318),i(5542)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.ItemsGrid{addBlankItems(e){const t=this.blankContainersInfo.length>0?this.blankContainersInfo[this.blankContainersInfo.length-1].blankID:0,s=this.contentContainer?this.contentContainer:this.container;for(let n=1;n<=e;n++){const e=this.blankItemTemplate?i.Factory.createContent(this.blankItemTemplate):document.createElement("div"),a=t+n;e.id=`blankItem_${a}`,s.appendChild(e),a%4==0&&e.classList.add("FourthElement"),this.blankContainersInfo.push({blankContainer:e,item:null,blankID:a})}}removeOveredItem(){this._overedItem=null,this.dispatchExternalEvent(n.ExternalEvent.item_unovered)}}t.TaskRewardsList=a}.apply(t,s),void 0===n||(e.exports=n)},9768:(e,t,i)=>{var s,n;s=[i,t,i(2484)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.DefaultScreen{initElements(){super.initElements(),this.registerControls({taskCategoryList:"wrapper.tasksCategory",taskItemsList:"wrapper.taskItemsList",taskRewardsList:"wrapper.right.reward"}),setTimeout((()=>{this.testCategoryList(),this.testTasksList1(),this.testRewardsList()}),2e3),setTimeout((()=>{this.testCategoryList2()}),1e4)}testCategoryList(){this.taskCategoryList.addSeveralItems([{isLocked:!1,isCompleted:!0,name:"Category Name",tasksCompleted:6,tasksInCategory:12,timeToEnd:"Start At 235d 12d 6h",id:1},{isLocked:!0,isCompleted:!1,name:"Category Name",tasksCompleted:3,tasksInCategory:5,id:2},{isLocked:!1,isCompleted:!1,name:"Category Name",tasksCompleted:3,tasksInCategory:5,id:3},{isLocked:!0,isCompleted:!1,name:"Category Name",tasksCompleted:3,tasksInCategory:5,id:5},{isLocked:!0,isCompleted:!1,name:"Category Name",tasksCompleted:3,tasksInCategory:5,id:6},{isLocked:!0,isCompleted:!1,name:"Category Name",tasksCompleted:3,tasksInCategory:5,id:7},{isLocked:!0,isCompleted:!1,name:"Category Name",tasksCompleted:3,tasksInCategory:5,id:8},{isLocked:!0,isCompleted:!1,name:"Category Name",tasksCompleted:3,tasksInCategory:5,id:9},{isLocked:!0,isCompleted:!1,name:"Category Name",tasksCompleted:3,tasksInCategory:5,id:10}])}testCategoryList2(){this.taskCategoryList.addItem({isLocked:!1,isCompleted:!0,name:"Category Name",tasksCompleted:6,tasksInCategory:12,timeToEnd:"Start At 235d 12d 5h",id:1})}testTasksList1(){const e=[{id:1,name:"Task Name",description:"Complete all stages Complete all stages Complete all stages Complete all stages",rarity:"Legendary",rewards:[{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())},{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())},{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())}],completedConditionCount:2,conditions:[{description:"Condition Name",currentValue:9,maxValue:10},{description:"Condition Name",currentValue:Math.floor(10*Math.random()+1),maxValue:10},{description:"Condition Name",currentValue:10,maxValue:10},{description:"Condition Name",currentValue:10,maxValue:10}]},{id:2,rarity:"Epic",description:"Description",name:"Name",rewards:[{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())},{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())},{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())}],completedConditionCount:3,conditions:[{description:"Condition Name",currentValue:10,maxValue:10}]},{id:3,rarity:"Rare",description:"Complete all stages",name:"Task Name",rewards:[{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())},{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())},{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())}],conditions:[{description:"Task description",currentValue:8,maxValue:10}]},{id:4,rarity:"Uncommon",description:"Complete all stages",name:"Task Name",rewards:[{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())},{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())},{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())}],conditions:[{description:"Task description",currentValue:10,maxValue:10}]},{id:5,rarity:"Common",description:"Complete all stages",name:"Task Name",rewards:[{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())},{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())},{image:"coui://libs/ui/images/common/currency/soft.dds",amount:Math.floor(100*Math.random())}],conditions:[{description:"Task description",currentValue:9,maxValue:10}]}];this.taskItemsList.addBlankItems(50),this.taskItemsList.addSeveralItems(e)}testTasksList2(){Math.floor(100*Math.random()),Math.floor(100*Math.random()),Math.floor(100*Math.random()),Math.floor(10*Math.random()+1)}testRewardsList(){const e=["Common","Uncommon","Rare","Epic","Legendary"],t=[{id:2,isLocked:!1,image:"coui://libs/ui/images/customization/customization_bodypaint.dds:mongoose_outfit_pink_icon_inventory",rarity:e[Math.floor(5*Math.random()+0)],type:"weapon",amount:500},{id:1,isLocked:!1,type:"copacity",image:"coui://libs/ui/images/customization/customization_bodypaint.dds:mongoose_outfit_pink_icon_inventory",rarity:e[Math.floor(5*Math.random()+0)]},{id:3,isLocked:!1,type:"copacity",image:"coui://libs/ui/images/customization/customization_bodypaint.dds:mongoose_outfit_pink_icon_inventory",rarity:e[Math.floor(5*Math.random()+0)]},{id:4,isLocked:!1,type:"copacity",image:"coui://libs/ui/images/customization/customization_bodypaint.dds:mongoose_outfit_pink_icon_inventory",rarity:e[Math.floor(5*Math.random()+0)]},{id:5,isLocked:!1,type:"copacity",image:"coui://libs/ui/images/customization/customization_bodypaint.dds:mongoose_outfit_pink_icon_inventory",rarity:e[Math.floor(5*Math.random()+0)]}];this.taskRewardsList.addSeveralItems(t)}}t.TestTasks=s}.apply(t,s),void 0===n||(e.exports=n)},5879:(e,t,i)=>{var s,n;s=[i,t,i(2484)],n=function(e,t,i){"use strict";var s;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.None="",e.Unequip="Unequip",e.Replace="Replace"}(s||(s={}));class n extends i.DefaultScreen{constructor(){super(...arguments),this.focusedItemType=s.None,this.onAttachmentFocused=e=>{this.clearCurrentItem();const t=this.slots.containerElement.childNodes.length;for(let i=1;i<=t;i++){const t=this.slots.getItemById(i);if(t&&!t.dataModel.isEmpty&&t.dataModel.slotName==e.dataModel.slotName&&!e.dataModel.isLocked){t.dataModel.image==e.dataModel.image?this.focusedItemType=s.Unequip:this.focusedItemType=s.Replace,this.focusedItem=t;break}}this.focusedItem&&this.focusedItem.content.classList.add(this.focusedItemType)},this.clearCurrentItem=()=>{this.focusedItem&&(this.focusedItem.content.classList.remove(this.focusedItemType),this.focusedItem=null,this.focusedItemType=s.None)}}initElements(){this.registerControls({slots:"wrapper.header.weaponStats.slots",hint:"wrapper.hintPanel.hint",itemsPanel:"wrapper.main.itemsPanel",attachmentsList:"wrapper.main.itemsPanel.attachments.list"}),this.attachmentsList.signalItemFocused.add(this.onAttachmentFocused),this.attachmentsList.signalItemUnfocused.add(this.clearCurrentItem)}onSlotUpdated(){this.clearCurrentItem()}onDestroy(){this.attachmentsList.signalItemFocused.remove(this.onAttachmentFocused),this.attachmentsList.signalItemUnfocused.remove(this.clearCurrentItem),super.onDestroy()}}t.WeaponCustomization=n}.apply(t,s),void 0===n||(e.exports=n)},5452:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(4260),i(227),i(4376),i(6749)],n=function(e,t,i,s,n,a,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r extends i.Control{constructor(){super(...arguments),this._isHovered=!1,this._translateXContainer=0,this._translateXTriangle=0,this.onVisibilityChanged=()=>{this.visible?(this.waitInitFuncDispose&&(this.waitInitFuncDispose(),this.waitInitFuncDispose=null),this.waitInitFuncDispose=o.waitSeveralFrames((()=>{this.content.classList.remove("ChildrenPointerEventsNone"),this.currentElement&&this.currentElement.parentPanel.updateHintPosition()})),window.addEventListener("mousemove",this.checkOver)):(this.content.classList.add("ChildrenPointerEventsNone"),this._currentElement=null,window.removeEventListener("mousemove",this.checkOver))},this.checkOver=e=>{if(this.cursorX!=e.clientX||this.cursorY!=e.clientY){this.cursorX=e.clientX,this.cursorY=e.clientY;const t=e.target;this.isHovered=!!s.searchParentElement(t,this.content.id)}}}initElements(){super.initElements(),this.registerElements("container","triangleWrapper",{triangle:"triangleWrapper.triangle",title:"container.title",name:"container.name",perks:"container.perks",perksList:"container.perks.list",description:"container.description",lockPanel:"container.lockPanel",score:"container.lockPanel.progressWrapper.textWrapper.progress",levelWrapper:"container.lockPanel.progressWrapper.textWrapper.levelWrapper",level:"container.lockPanel.progressWrapper.textWrapper.levelWrapper.level",progress:"container.lockPanel.progressWrapper.progressBar.clip"})}update(e){this._dataModel=e;const{title:t,name:i,perks:s,perksList:r,description:l,lockPanel:h,levelWrapper:d,level:c,score:u,progress:p,_dataModel:m}=this;t.innerHTML=m.title,i.innerHTML=m.name,l.innerHTML=a.replaceUnsupportedTags(m.description),m.locked?(m.level>0?(d.classList.remove("Hidden"),c.innerHTML=`${m.level}`):d.classList.add("Hidden"),u.innerHTML=m.score,p.style.width=100*m.progress+"%",h.classList.remove("Hidden")):h.classList.add("Hidden"),o.removeChildren(r),m.perks.length>0?(m.perks.forEach((e=>{n.Factory.createChildControl("WeaponPerkItem",r).update(e)})),s.classList.remove("Hidden")):s.classList.add("Hidden")}get visible(){return this._visible}set visible(e){this._visible!=e&&(this._visible=e,this.content&&(e?this.content.classList.remove("Hidden"):this.content.classList.add("Hidden"),this._signalVisibilityChanged&&this._signalVisibilityChanged.dispatch()))}initListeners(){this.signalVisibilityChanged.add(this.onVisibilityChanged)}setCurrentElement(e){this._currentElement=e,this.currentElement.content.classList.contains("rarity-weapon-slot")?this.content.classList.add("SlotHint"):this.content.classList.remove("SlotHint")}onDestroy(){this.waitHintFuncDispose&&(this.waitHintFuncDispose(),this.waitHintFuncDispose=null),this.waitInitFuncDispose&&(this.waitInitFuncDispose(),this.waitInitFuncDispose=null),this.signalVisibilityChanged.remove(this.onVisibilityChanged),this.visible&&window.removeEventListener("mousemove",this.checkOver),super.onDestroy()}set isHovered(e){this._isHovered!=e&&(this._isHovered=e,this.waitHintFuncDispose&&(this.waitHintFuncDispose(),this.waitHintFuncDispose=null),this._isHovered||!this.currentElement||this.currentElement.isMouseOvered||(this.waitHintFuncDispose=o.waitSeveralFrames((()=>{this.currentElement&&this.currentElement.checkItemkOut()}))))}get isHovered(){return this._isHovered}get currentElement(){return this._currentElement}set translateXContainer(e){this._translateXContainer!=e&&(this.container.style.transform=`translateX(${e}px)`,this._translateXContainer=e)}get translateXContainer(){return this._translateXContainer}set translateXTriangle(e){this._translateXTriangle!=e&&(this.triangleWrapper.style.transform=`translateX(${e}px)`,this._translateXTriangle=e)}get translateXTriangle(){return this._translateXTriangle}}t.WeaponCustomizationHint=r}.apply(t,s),void 0===n||(e.exports=n)},205:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(4260),i(5879)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends i.Control{constructor(){super(...arguments),this.onListScroll=()=>{this.updateHintPosition()}}initElements(){this.parent=s.searchParentControlByType(this,n.WeaponCustomization)}showHint(e){if(this.clearCurrentElement(),e){const t=e;this.parent.hint.setCurrentElement(t),this.updateHintPosition(),this.parent.hint.currentElement.listBox.signalScrollValueChanged.add(this.onListScroll)}}hasActiveHint(e){return this.parent.hint.visible&&this.parent.hint.currentElement==e&&this.parent.hint.isHovered}clearCurrentElement(){this.parent.hint.currentElement&&this.parent.hint.currentElement.listBox.signalScrollValueChanged.remove(this.onListScroll)}updateHintPosition(){if(this.parent.hint.currentElement){const e=this.content.getBoundingClientRect(),t=this.parent.hint.triangle.getBoundingClientRect(),i=this.parent.hint.currentElement.content.getBoundingClientRect(),s=this.parent.hint.content.getBoundingClientRect(),n=i.left+i.width/2-e.left;this.parent.hint.translateXTriangle=0,n-s.width/2<0?(this.parent.hint.translateXContainer=s.width/2-n,this.parent.hint.translateXContainer+t.width/2>s.width/2&&(this.parent.hint.translateXTriangle=this.parent.hint.translateXContainer+t.width/2-s.width/2)):n+s.width/2>e.width?(this.parent.hint.translateXContainer=e.width-s.width/2-n,this.parent.hint.translateXContainer-t.width/2<-s.width/2&&(this.parent.hint.translateXTriangle=this.parent.hint.translateXContainer-t.width/2+s.width/2)):this.parent.hint.translateXContainer=0,this.parent.hint.content.style.left=`${n}px`,this.parent.hint.content.style.bottom=e.top-i.top+"px"}}}t.WeaponCustomizationItemsPanel=a}.apply(t,s),void 0===n||(e.exports=n)},2584:(e,t,i)=>{var s,n;s=[i,t,i(117)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.GridItem{initElements(){super.initElements(),this.registerElements({price:"wrapper.footer.priceWrapper.price",gainedCurrency:"wrapper.footer.PatternButton.wrapper.hardCurrency",freeCurrency:"wrapper.footer.PatternButton.wrapper.freeCurrency",image:"wrapper.imageWrapper.image"})}updateData(){super.updateData();const e=this._dataModel;this.price.innerHTML=e.price,this.gainedCurrency.innerHTML=e.gainedCurrency,this.freeCurrency.innerHTML=e.freeCurrency,this.image.style.backgroundImage=`url(${e.image})`}}t.CurrencyPurchaseItem=s}.apply(t,s),void 0===n||(e.exports=n)},4552:(e,t,i)=>{var s,n;s=[i,t,i(6716)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ModalWindow{initElements(){super.initElements(),window.setTimeout((()=>{this.registerControls({currencyPurchaseList:"container.content.currencyPurchaseList"}),this.test(),this.show()}),1)}test(){const e=[{id:1,text:"",price:"$12.99",gainedCurrency:"100000 SuperChat",freeCurrency:"200 Dop super chat",image:"coui://libs/ui/images/shop/upparts/mongoose_uppart04_shop.dds"},{id:2,text:"",price:"$12.99",gainedCurrency:"100000 SuperChat",freeCurrency:"200 Dop super chat",image:"coui://libs/ui/images/shop/upparts/mongoose_uppart04_shop.dds"},{id:3,text:"",price:"$12.99",gainedCurrency:"100000 SuperChat",freeCurrency:"200 Dop super chat",image:"coui://libs/ui/images/shop/upparts/mongoose_uppart04_shop.dds"}];this.currencyPurchaseList.addBlankItems(e.length),this.currencyPurchaseList.addSeveralItems(e)}}t.TestCurrencyPurchaseWindow=s}.apply(t,s),void 0===n||(e.exports=n)},4130:(e,t,i)=>{var s,n;s=[i,t,i(3008),i(6716)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.signalKeyBindSelctionChanged=new i.Signal;class n extends s.ModalWindow{constructor(){super(...arguments),this.onKeyBindSelect=e=>{const{hint:t}=this,i=e.content.getBoundingClientRect(),s=e;t.x=i.left,t.y=i.top,this.visible=s.selected}}initElements(){super.initElements(),this.registerControls({hint:"container.content"})}initListeners(){t.signalKeyBindSelctionChanged.add(this.onKeyBindSelect)}onDestroy(){t.signalKeyBindSelctionChanged.remove(this.onKeyBindSelect),super.onDestroy()}}t.OptionsKeyBindLock=n}.apply(t,s),void 0===n||(e.exports=n)},1573:(e,t,i)=>{var s,n;s=[i,t,i(7136)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Button{initElements(){this.registerControls("checkbox")}onRegister(){}onClickImpl(e){}trigger(){this.checkbox.trigger()}}t.TerritorySelectionItem=s}.apply(t,s),void 0===n||(e.exports=n)},739:(e,t,i)=>{var s,n;s=[i,t,i(8920)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.OptionsElement{constructor(){super(...arguments),this.onExpandChanged=()=>{const{dropdown:e,listBox:t,content:i}=this;e.expanded?(this.listBox.style.height="",i.classList.add("ZIndex100")):(this.listBox.style.height="0vh",i.classList.remove("ZIndex100"))}}initElements(){super.initElements(),this.registerControls({dropdown:"elementContainer.dropdown"}),this.registerElements({listBox:"elementContainer.dropdown.wrapper.listBox"})}initListeners(){super.initListeners(),this.dropdown.signalExpandChanged.add(this.onExpandChanged)}onDestroy(){this.dropdown.signalExpandChanged.remove(this.onExpandChanged),super.onDestroy()}}t.OptionsDropdown=s}.apply(t,s),void 0===n||(e.exports=n)},8920:(e,t,i)=>{var s,n;s=[i,t,i(7136)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Button{onRegister(){}addMargin(){this.content.classList.add("Margin")}removeMargin(){this.content.classList.remove("Margin")}onClickImpl(e){}}t.OptionsElement=s}.apply(t,s),void 0===n||(e.exports=n)},2005:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{constructor(){super(...arguments),this.isPlaying=!1,this.showNotificationInQueue=()=>{this.firstControlInQueue=this.container.content.firstElementChild?this.container.searchControl(`${this.container.content.firstElementChild.id}`):null,this.firstControlInQueue?this.firstControlInQueue.show():this.isPlaying=!1},this.nextItem=()=>{window.clearTimeout(this.showNotificationsTimeout),this.showNotificationsTimeout=window.setTimeout(this.showNotificationInQueue,300)}}initElements(){this.registerControls({container:"container"})}startQueue(){0==this.isPlaying&&(this.isPlaying=!0,this.showNotificationInQueue())}onDestroy(){window.clearTimeout(this.showNotificationsTimeout),super.onDestroy()}}t.NonBlockingNotification=s}.apply(t,s),void 0===n||(e.exports=n)},6574:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(5542)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.Control{constructor(){super(...arguments),this.showDuration=400,this.lifeDuration=5e3,this.hideDuration=400,this.initElements=()=>{this.opacity=1,this.registerElements("buttonsContainer")},this.show=()=>{window.clearTimeout(this.onShowTimeout),this.content.style.animationPlayState="running",this.onShowTimeout=window.setTimeout(this.handleItemShow,this.showDuration)},this.handleItemShow=()=>{this.hideTimeout=window.setTimeout(this.hide,this.lifeDuration)},this.hide=()=>{this.enableInputOf(this.buttonsContainer,!1),this.onHideTimeout=window.setTimeout(this.handleItemHide,this.hideDuration)},this.handleItemHide=()=>{this.visible=!1,this.dispatchExternalEvent(s.ExternalEvent.animation_finished,"hide")}}onDestroy(){window.clearTimeout(this.onShowTimeout),window.clearTimeout(this.hideTimeout),window.clearTimeout(this.onHideTimeout),super.onDestroy()}}t.NonBlockingNotificationsItem=n}.apply(t,s),void 0===n||(e.exports=n)},1135:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{constructor(){super(...arguments),this.rewardTimeouts=[]}initElements(){this.registerControls("video","rewards"),this.video.show=()=>{this.video.visible=!0,i.TweenMax.to(this.video,.05,{alpha:1})},this.video.hide=()=>{const{video:e}=this;i.TweenMax.to(e,.1,{alpha:0,ease:i.Power1.easeIn,onComplete:()=>{e.visible=!1,e.dispatchExternalEventAnimationFinished("hide")}})},this.rewards.show=()=>{this.rewards.visible=!0,i.TweenMax.fromTo(this.rewards,.4,{alpha:0},{alpha:1});const e=this.rewards.searchElement("rewardsList.container.contentContainer").children;for(let t=0;t<e.length;t++){const i=e[t].control.content,s=.1*(t+1)*1e3;this.rewardTimeouts.push(window.setTimeout((()=>{i.style.opacity="1",i.style.animationPlayState="running"}),s))}}}onDestroy(){this.rewardTimeouts.forEach((e=>{window.clearTimeout(e)})),super.onDestroy()}}t.GachaBox=n}.apply(t,s),void 0===n||(e.exports=n)},677:(e,t,i)=>{var s,n;s=[i,t,i(9426)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.RaceIcon{initElements(){this.registerElements({achievement:"wrapper.achievement.label"})}onRegister(){this.dataModelName=`MVPBadgeViewModel_${this.controlId}`,this.achievement.setAttribute("data-bind-value",`{{${this.dataModelName}.achievement}}`)}}t.PlayerResultsBadge=s}.apply(t,s),void 0===n||(e.exports=n)},1185:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.showDuration=.5;const n=t.showDuration/2;class a extends s.Control{initElements(){this.registerControls("video","labels")}get visible(){return this._visible}set visible(e){super.visible=e,this.video.visible=e}show(){super.visible=!0,this.showVideo(),this.showRect(),this.showLabels()}showVideo(){const{video:e,_visible:i}=this;setTimeout((()=>{e.visible=i}),1e3*t.showDuration)}showRect(){const e=this.labels.content.style;e.width="20%",e.height="2%",i.TweenMax.to(e,n,{width:"100%"}),i.TweenMax.to(e,n,{delay:n,height:"100%"}),i.TweenMax.fromTo(e,t.showDuration,{backgroundColor:"rgba(0, 0, 0, 1)"},{delay:1.2*t.showDuration,backgroundColor:"rgba(0, 0, 0, 0)"})}showLabels(){const e=this.labels.content.children;for(let t=0;t<e.length;t++){const s=e[t].control;i.TweenMax.fromTo(s,.35,{scale:3,alpha:0},{delay:.8+.2*t,scale:1,alpha:1})}}hide(){super.visible=!1,this.hideVideo()}hideVideo(){this.video.visible=this._visible}animatedHide(){const{video:e}=this,t=e.content.style;t.opacity="1",t.width="100%",t.height="100%",this.labels.visible=!1,i.TweenMax.to(e.content.style,n,{height:"2%",opacity:"0"}),i.TweenMax.to(e.content.style,n,{delay:n,width:"20%",onComplete:()=>{this.hide()}})}}t.RankUp=a}.apply(t,s),void 0===n||(e.exports=n)},8294:(e,t,i)=>{var s,n;s=[i,t,i(227),i(7774),i(6749)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.ListItem{constructor(){super(...arguments),this._prevCurrency=0}initElements(){super.initElements(),this.registerElements({image:"image",limitMessage:"limitMessage"})}updateData(){const{image:e,label:t,limitMessage:s,dataModel:n}=this;this._prevCurrency!=n.amount&&(this._prevCurrency=n.amount),e.style.backgroundImage=`url(${n.image})`,n.isLimit&&(t.classList.add("RedColor"),s.textContent=i.translate("@currency_limit_reached")),t.textContent=`${n.amount}`,this.content.id=`CurrencyListItem_${this._itemId}`}animate(e){const{parentControl:t}=this.parentList;window.cancelAnimationFrame(this.animationId),window.clearTimeout(this.animateTimeout),this.animateTimeout=window.setTimeout((()=>{t&&t.onCurrencyRecieved(),this.animationId=window.requestAnimationFrame((()=>{n.restartAllAnimations(this.content)}))}),150*e)}select(){}unselect(){}onDestroy(){window.cancelAnimationFrame(this.animationId),window.clearTimeout(this.animateTimeout),this._dataModel=null,super.onDestroy()}get dataModel(){return this._dataModel}}t.CurrencyListItem=a}.apply(t,s),void 0===n||(e.exports=n)},7880:(e,t,i)=>{var s,n;s=[i,t,i(4260),i(5198),i(6732)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.ListBox{setupParentControl(){super.setupParentControl(),this.parentControl=i.searchParentControlByType(this,n.SeasonPassProgression),this.parentSeasonProgress=this.searchParentElement("seasonProgress",!1)}}t.RewardListBox=a}.apply(t,s),void 0===n||(e.exports=n)},2447:(e,t,i)=>{var s,n;s=[i,t,i(9096),i(6749)],n=function(e,t,i,s){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Item="Item",e.BattlePassRewardItem="BattlePassRewardItem"}(n=t.ERewardType||(t.ERewardType={}));class a extends i.RarityItem{constructor(){super(...arguments),this._isAnimationPlayed=!1,this.isReceiveAnimationPlayed=!1}initElements(){super.initElements(),this.opacity=0}updateData(){const{parentControl:e,parentSeasonProgress:t}=this.parentList;super.updateData(),!this.isAnimationPlayed&&!t&&e&&e.isAnimated?this.waitFuncUpdateDispose=s.waitSeveralFrames((()=>{this._dataModel.type==n.BattlePassRewardItem&&e.isAnimated||(this.opacity=1,this.showReceiveAnimation()),this.parentList.scrollToRelativeValue(1,0)})):this.opacity=1}showReceiveAnimation(){const{parentControl:e}=this.parentList;window.cancelAnimationFrame(this.animationReceiveId),window.clearTimeout(this.receiveTimeout),this.isReceiveAnimationPlayed||(this.receiveTimeout=window.setTimeout((()=>{e&&e.onRewardRecieved(),this.animationReceiveId=window.requestAnimationFrame((()=>{s.restartAllAnimations(this.content),this.isReceiveAnimationPlayed=!0}))}),100))}animateSeasonReward(e){let t,i=!1;const{parentControl:s}=this.parentList,{rewardsList:n,seasonProgress:a}=s,o=n.getItemsCount();if(n){for(let e=1;e<=o;e++){const s=n.getItemById(e);if(s&&s._dataModel.name==this._dataModel.name&&!s.isAnimationPlayed){t=s,i=!0,s.isAnimationPlayed=!0;break}}i?this.animationTimeout=window.setTimeout((()=>{if(!t.content)return;this.tempItem=t.content.cloneNode(!0);const{tempItem:e}=this;e.id=`${t.content.id}Clone`,e.style.opacity="1",this.opacity=0;const i=this.content.getBoundingClientRect(),n=t.content.getBoundingClientRect(),o=a.getBoundingClientRect(),r=Math.round(i.left-o.left-.65*i.width/2),l=Math.round(-o.height/2),h=Math.round(n.left-o.left),d=Math.round(n.top-o.top);a.appendChild(e),e.classList.add("reward-animated-item"),e.style.left=`${r}px`,e.style.top=`${l}px`,e.style.transform="scale(0.65)",this.animationId=window.requestAnimationFrame((()=>{e.style.transition="left 0.3s, top 0.3s, transform 0.3s",e.style.left=`${h}px`,e.style.top=`${d}px`,e.style.transform="scale(1)"})),this.removeTimeout=window.setTimeout((()=>{t.opacity=1,t.showReceiveAnimation(),e.parentElement.removeChild(e),this.content.parentElement&&this.content.parentElement.removeChild(this.content),s.onRewardAnimationFinished(),this.destroy()}),300)}),500*e+100):this.removeTimeout=window.setTimeout((()=>{this.content.parentElement&&this.content.parentElement.removeChild(this.content),s.onRewardAnimationFinished(),this.destroy()}),500*e+400)}}onDestroy(){window.cancelAnimationFrame(this.animationId),window.cancelAnimationFrame(this.animationReceiveId),window.clearTimeout(this.receiveTimeout),window.clearTimeout(this.animationTimeout),window.clearTimeout(this.removeTimeout),this.waitFuncUpdateDispose&&(this.waitFuncUpdateDispose(),this.waitFuncUpdateDispose=null),this.tempItem&&this.tempItem.parentElement&&this.tempItem.parentElement.removeChild(this.tempItem),super.onDestroy()}get dataModel(){return this._dataModel}set isAnimationPlayed(e){this._isAnimationPlayed=e}get isAnimationPlayed(){return this._isAnimationPlayed}}t.RewardListItem=a}.apply(t,s),void 0===n||(e.exports=n)},6732:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(5542),i(6749)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a="wrapper.contentWrapper.tasksWrapper.tasksList.container",o="wrapper.seasonProgressWrapper.seasonProgress.rewardsList.container";class r extends i.Control{constructor(){super(...arguments),this.taskShowDelay=1500,this.currentTaskId=0,this.startSeasonProgressAnimated=!1,this.rewardsAreAnimated=!1,this.animateStartSeasonProgress=()=>{this.startSeasonProgressAnimated=!0,this.seasonProgressBarClip.style.opacity="1",this.seasonProgressBarClip.style.transitionDuration=""},this.onSeasonProgressUpdated=()=>{this._isAnimated&&this.seasonProgressBar.value==this.seasonProgressBar.max&&(window.clearTimeout(this.levelTimeout),this.levelTimeout=window.setTimeout((()=>{this.startSeasonProgressAnimated||(window.clearTimeout(this.seasonProgressTimeout),this.animateStartSeasonProgress()),this.dispatchExternalEvent(s.ExternalEvent.season_claim_rewards)}),500))}}initElements(){this.registerControls({seasonProgressRewards:"wrapper.seasonProgressWrapper.seasonProgress.rewardsList",rewardsList:"wrapper.contentWrapper.rewardsWrapper.rewardsList",seasonProgressBar:"wrapper.seasonProgressWrapper.seasonProgress.progressWrapper.progressBarWrapper.progressBar.progressBarNew"}),this.registerElements({resultTaskList:a,seasonProgressRewardsContainer:o,seasonProgress:"wrapper.seasonProgressWrapper",tasksWrapper:"wrapper.contentWrapper.tasksWrapper",completedWave:"wrapper.contentWrapper.tasksWrapper.completedWave",matchRewards:"wrapper.contentWrapper.currenciesWrapper.matchRewards.matchRewardsList.container",progressionRewards:"wrapper.contentWrapper.currenciesWrapper.progressionRewards.progressionRewardsList.container",totalRewards:"wrapper.contentWrapper.currenciesWrapper.totalRewards.totalRewardsList.container",rewardItems:"wrapper.contentWrapper.rewardsWrapper.rewardsList.container",seasonProgressBarClip:"wrapper.seasonProgressWrapper.seasonProgress.progressWrapper.progressBarWrapper.progressBar.progressBarNew.clip"}),this.seasonProgressBar.signalValueChanged.add(this.onSeasonProgressUpdated)}animateSessionCurrencies(){const e=this.matchRewards.childNodes;for(let t=0;t<e.length;t++)e[t].control.animate(0)}animateCurrencies(){const e=this.progressionRewards.childNodes;for(let t=0;t<e.length;t++)e[t].control.animate(t)}animateTotalCurrencies(){const e=this.totalRewards.childNodes;for(let t=0;t<e.length;t++)e[t].control.animate(0)}animateSeasonProgress(){this.seasonProgressBarClip.style.opacity="0",this.waitSeasonProgressFuncDispose=n.waitSeveralFrames((()=>{this.seasonProgressBarClip.style.transitionDuration="0s";const e=this.seasonProgressBarClip.style.width;this.seasonProgressBarClip.style.width="0%",this.seasonProgressTimeout=window.setTimeout((()=>{this.animateStartSeasonProgress(),this.seasonProgressBarClip.style.width=e}),100)}))}animateProgress(){this._isAnimated=!0,this.navigation.focusEnabled=!1,this.disableInput();const e=this.resultTaskList.childNodes.length;this.animateSessionCurrencies(),e>0&&this.showNextTask(),this.animateSeasonProgress()}staticProgress(){this._isAnimated=!1,this.navigation.focusEnabled=!0,this.enableInput(),this.seasonProgressBarClip.style.transition="none";const e=this.resultTaskList.childNodes.length;if(e>0)for(let t=1;t<=e;t++){const e=`${a}.TaskProgressItem_${t}`,i=this.searchOptionalControl(e);i&&i.instantFillProgressBar()}}onTaskCompleted(e){this._isAnimated&&this.dispatchExternalEvent(s.ExternalEvent.task_completed,e)}onTaskXpGain(e){this._isAnimated&&this.dispatchExternalEvent(s.ExternalEvent.season_pass_xp_gain,e)}showNextTask(){window.clearTimeout(this.showNextTaskTimeout),this.showNextTaskTimeout=window.setTimeout((()=>{this.rewardsAreAnimated||this.showNextTaskImpl()}),this.taskShowDelay)}showNextTaskImpl(){if(this._isAnimated){const e=this.resultTaskList.childNodes.length,t=this.currentTaskId+1;if(t<=e){const e=`${a}.TaskProgressItem_${t}`,i=this.searchOptionalControl(e);i?i.animateProgress():this.dispatchExternalEvent(s.ExternalEvent.animation_finished,"progress")}this.taskShowDelay=100}}onAnimationFinished(e){this._isAnimated&&(this.currentTaskId=e,this.dispatchExternalEvent(s.ExternalEvent.task_progressed,e),e==this.resultTaskList.childNodes.length&&(window.clearTimeout(this.finishTimeout),this.finishTimeout=window.setTimeout((()=>{this.dispatchExternalEvent(s.ExternalEvent.animation_finished,"progress")}),1e3)))}onRewardAnimationFinished(){this._isAnimated&&0==this.seasonProgressRewardsContainer.childNodes.length&&(this.seasonProgressBarClip.style.transition="none",this.progressAnimationId=window.requestAnimationFrame((()=>{this.dispatchExternalEvent(s.ExternalEvent.season_xp_reset),this.progressFinishAnimationId=window.requestAnimationFrame((()=>{this.seasonProgressBarClip.style.transition="",this.dispatchExternalEvent(s.ExternalEvent.season_level_up)}))})),window.clearTimeout(this.showTaskAfterRewardsTimeout),this.showTaskAfterRewardsTimeout=window.setTimeout((()=>{this.rewardsAreAnimated=!1,this.showNextTask()}),100))}animateSeasonLevelRewards(){const e=this.seasonProgressRewardsContainer.childNodes.length;this.rewardsAreAnimated=!0,0==e?this.onRewardAnimationFinished():this.waitRewardsFuncDispose=n.waitSeveralFrames((()=>{for(let t=0;t<e;t++){const e=`${o}.RewardListItem_${t+1}`;this.searchControl(e).animateSeasonReward(t)}}))}stopAnimations(){this.waitRewardsFuncDispose&&(this.waitRewardsFuncDispose(),this.waitRewardsFuncDispose=null),this.waitSeasonProgressFuncDispose&&(this.waitSeasonProgressFuncDispose(),this.waitSeasonProgressFuncDispose=null),this.seasonProgressBar.signalValueChanged.remove(this.onSeasonProgressUpdated),window.cancelAnimationFrame(this.animationId),window.cancelAnimationFrame(this.rewardsAnimationId),window.cancelAnimationFrame(this.progressAnimationId),window.cancelAnimationFrame(this.progressFinishAnimationId),window.clearTimeout(this.finishTimeout),window.clearTimeout(this.levelTimeout),window.clearTimeout(this.rewardsTimeout),window.clearTimeout(this.animationTimeout),window.clearTimeout(this.showNextTaskTimeout),window.clearTimeout(this.seasonProgressTimeout),window.clearTimeout(this.showTaskAfterRewardsTimeout)}onCurrencyRecieved(){this.dispatchExternalEvent(s.ExternalEvent.currency_recived)}onRewardRecieved(){this.dispatchExternalEvent(s.ExternalEvent.item_recived)}onTaskProgressed(){this.dispatchExternalEvent(s.ExternalEvent.task_progressing)}onDestroy(){this.stopAnimations(),super.onDestroy()}get isAnimated(){return this._isAnimated}}t.SeasonPassProgression=r}.apply(t,s),void 0===n||(e.exports=n)},7630:(e,t,i)=>{var s,n;s=[i,t,i(4260),i(227),i(117),i(6749),i(6732)],n=function(e,t,i,s,n,a,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r extends n.GridItem{constructor(){super(...arguments),this.animateProgress=()=>{if(!this.isAnimationCompleted){const{mainReward:e,newProgress:t,isCompleted:i,parentControl:s,_dataModel:n}=this;s?0!=n.sessionProgress?(this.seasonProgressWrapper=s.seasonProgress,this.seasonProgress=this.seasonProgressWrapper.children[0],t.style.width=n.sessionProgress/n.requiredProgress*100+"%",this.progressLabel.innerHTML=`${n.completedTasks}/${n.totalTasks}`,this.scrollToElement(),this.parentControl.onTaskProgressed(),this.progressionTimeout=window.setTimeout((()=>{i?(this.animateCompletion(),this.isSeasonXpMainReward&&this.seasonProgress&&!this.seasonProgress.classList.contains("Hidden")&&e.parentElement?this.animateSeasonXpGain():(this.hasSeasonXpReward&&s.onTaskXpGain(this.queue),e.style.opacity="0",s.onAnimationFinished(this.queue)),s.onTaskCompleted(this.queue)):s.onAnimationFinished(this.queue)}),500)):s.onAnimationFinished(this.queue):this.content?console.warn(`${this.content.id} has no parentControl`):console.warn("TaskProgressItem has no parentControl"),this.isAnimationCompleted=!0}}}initElements(){this.registerElements({completedIcon:"wrapper.completedIcon",oldProgress:"wrapper.info.progressBar.clip",newProgress:"wrapper.info.progressBar.newClip",mainReward:"wrapper.reward.mainReward",mainRewardImage:"wrapper.reward.mainReward.image",mainRewardAmount:"wrapper.reward.mainReward.amount",additionalRewards:"wrapper.reward.additionalRewards",additionalReward1:"wrapper.reward.additionalRewards.item1",additionalReward2:"wrapper.reward.additionalRewards.item2",additionalReward3:"wrapper.reward.additionalRewards.item3",additionalReward4:"wrapper.reward.additionalRewards.item4",progressLabel:"wrapper.info.progressLabel",name:"wrapper.info.titleWrapper.name"}),this.description=s.Factory.registerChildControl(this.searchElement("wrapper.info.titleWrapper.description",this.content)),this.additionalRewardsList=[this.additionalReward1,this.additionalReward2,this.additionalReward3,this.additionalReward4],this.waitFuncDispose=a.waitSeveralFrames((()=>{this.parentControl=i.searchParentControlByType(this,o.SeasonPassProgression)}))}focus(){this.focused||(this.parentList.setSelectedItem(this),super.focus())}updateData(){this._dataModel.id;const{_dataModel:e}=this;this.content.classList.add(a.capitalize(e.rarity));for(let t=0;t<e.rewards.length;t++){const i=e.rewards[t];this.hasSeasonXpReward=-1!=i.image.indexOf("season_xp")||this.hasSeasonXpReward,0==t?(this.isSeasonXpMainReward=this.hasSeasonXpReward,this.mainRewardImage.style.backgroundImage=`url(${i.image})`,this.mainRewardAmount.innerHTML=`${i.amount}`):(this.additionalRewardsList[t-1].style.backgroundImage=`url(${i.image})`,this.additionalRewardsList[t-1].classList.remove("Hidden"))}const t=e.currentProgress-e.sessionProgress;this.oldProgress.style.width=t/e.requiredProgress*100+"%";const i=e.completedTasks-e.sessionTasks;this.progressLabel.innerHTML=`${i}/${e.totalTasks}`,this.name.innerHTML=s.translate(e.name),this.description.text=e.text,this.queue=e.id,this.isCompleted=e.currentProgress==e.requiredProgress}fillProgressBar(e){}animateSeasonXpGain(){const{mainReward:e,seasonProgressWrapper:t,seasonProgress:i,parentControl:s}=this,n=t.getBoundingClientRect(),a=i.getBoundingClientRect(),o=e.getBoundingClientRect(),r=Math.round(-n.width/2-n.left+o.left+.5*o.width),l=Math.round(o.top-n.top),h=Math.round(-a.width/2+1.5*o.width),d=.1*-o.height;e.parentElement.removeChild(e),t.appendChild(e),e.style.position="absolute",e.style.transition="none",e.style.transform=`translate(${r}px, ${l}px) scale(1)`,this.animationId=window.requestAnimationFrame((()=>{e.style.opacity="1",e.style.transition="",e.style.transform=`translate(${h}px, ${d}px) scale(2)`,this.animationTimeout=window.setTimeout((()=>{i.getAnimations().forEach((e=>{e.currentTime=0,e.play()}))}),250),this.opacityTimeout=window.setTimeout((()=>{e.style.opacity="0",s.onAnimationFinished(this.queue),s.onTaskXpGain(this.queue),this.destroyTimeout=window.setTimeout((()=>{e.parentElement&&e.parentElement.removeChild(e)}),200)}),400)}))}animateCompletion(){const{completedIcon:e,parentControl:t,additionalRewards:i}=this;e.style.animationDuration="",e.classList.remove("Hidden"),e.style.animationDelay="0.1s",e.style.animationName="task-widget-item__show-completed-animation",i.style.opacity="0",i.style.transform="translateX(50%)";const s=t.tasksWrapper.getBoundingClientRect(),n=this.content.getBoundingClientRect(),o=Math.round(n.top-s.top);t.completedWave.style.transform=`translateY(${o}px)`,a.restartAllAnimations(t.completedWave)}scrollToElement(){this.parentList&&this.parentList.scrollToElement(this.content)}instantFillProgressBar(){this.visible=!1,this.waitFillFuncDispose=a.waitSeveralFrames((()=>{this.visible=!0;const{newProgress:e,completedIcon:t,mainReward:i,additionalRewards:s,progressLabel:n,_dataModel:a}=this;e.style.width=a.sessionProgress/a.requiredProgress*100+"%",e.style.transition="none",n.innerHTML=`${a.completedTasks}/${a.totalTasks}`,this.isCompleted&&(t.style.animationDelay="0s",t.style.animationDuration="0s",t.classList.remove("Hidden"),t.style.opacity="1",this.isSeasonXpMainReward?(i.style.transition="none",i.style.opacity="0"):i.parentElement.removeChild(i),s.style.transition="none",s.style.opacity="0",s.style.transform="translateX(50%)")}))}onDestroy(){this.waitFuncDispose&&(this.waitFuncDispose(),this.waitFuncDispose=null),this.waitFillFuncDispose&&(this.waitFillFuncDispose(),this.waitFillFuncDispose=null),window.cancelAnimationFrame(this.animationId),window.clearTimeout(this.progressionTimeout),window.clearTimeout(this.progressTimeout),window.clearTimeout(this.animationTimeout),window.clearTimeout(this.opacityTimeout),window.clearTimeout(this.destroyTimeout),super.onDestroy()}}t.TaskProgressItem=r}.apply(t,s),void 0===n||(e.exports=n)},1288:(e,t,i)=>{var s,n;s=[i,t,i(227),i(7774)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.ListItem{constructor(){super(...arguments),this.shortDuration=.3,this.delay=0,this.delayBeforeLastInstantReward=0,this.instantRewardDelay=0,this.instantRewardsCopy=[],this.audioTriggerTiomeouts=[],this.countLabelTimeouts=[],this.setupinstantReward=e=>{const t=e,s=this.container;this.instantRewardTitle.innerHTML=i.translate(t.title);const n=i.Factory.createChildElement(this.instantRewardsSingleItem,s),a=this.searchElement("image",n),o=this.searchElement("counter",n);this.instantRewardsCopy.push({image:a,count:o}),n.id="item_1",a.style.backgroundImage=`url(${t.image})`,t.count>1&&(o.innerHTML=`×${t.count}`)}}initElements(){super.initElements(),this.registerElements({instantRewardTitle:"titleContainer.title",container:"instantRewardsContainer"}),this.instantRewardsSingleItem="InstantRewardsSingleItem"}updateData(){this.setupinstantReward(this._dataModel)}animate(){this.animateTitle(),this.animateinstantReward()}animateTitle(){const e=this.instantRewardTitle;e.style.animationDuration=`${this.shortDuration}s`,e.style.animationName="show-instant-rewards-title",e.style.animationDelay=`${this.delay}s`}static(){this.instantRewardTitle.style.opacity="1",this.instantRewardsCopy[this.instantRewardsCopy.length-1].count.style.opacity="1",this.instantRewardsCopy[this.instantRewardsCopy.length-1].image.style.opacity="1"}animateinstantReward(){const e=this.parentList;this.delayBeforeLastInstantReward=this.delay;const t=this.instantRewardsCopy[0].image,i=this.instantRewardsCopy[0].count,s=window.setTimeout((()=>{e.dispatchAudioInstantRewardsList()}),1e3*this.delay);this.audioTriggerTiomeouts.push(s),t.style.animationName="show-instant-reward",t.style.animationDelay=`${this.delay}s`,t.style.animationDuration=`${this.shortDuration}s`,i.style.animationName="show-instant-rewards-count",i.style.animationDelay=`${this.delay+.3}s`,i.style.animationDuration=`${this.shortDuration+.1}s`,this.delay+=this.shortDuration+.1}skip(){for(let e=0;e<this.countLabelTimeouts.length;e++)window.clearTimeout(this.countLabelTimeouts[e]);for(let e=0;e<this.audioTriggerTiomeouts.length;e++)window.clearTimeout(this.audioTriggerTiomeouts[e])}onDestroy(){super.onDestroy();for(let e=0;e<this.countLabelTimeouts.length;e++)window.clearTimeout(this.countLabelTimeouts[e]);for(let e=0;e<this.audioTriggerTiomeouts.length;e++)window.clearTimeout(this.audioTriggerTiomeouts[e])}}t.InstantRewardsItem=n}.apply(t,s),void 0===n||(e.exports=n)},3954:(e,t,i)=>{var s,n;s=[i,t,i(1318),i(5542)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.ItemsGrid{constructor(){super(...arguments),this.delay=0,this.delayBeforeLastInstantRewardsList=0}initElements(){super.initElements(),this.registerElements({container:"container"})}staticScreen(){this.content.classList.add("StaticScreen")}animateScreen(){this.items.forEach((e=>{const t=e;t.delay=this.delay,t.animate(),this.delayBeforeLastInstantRewardsList=t.delayBeforeLastInstantReward,this.delay=t.delay}))}skip(){this.items.forEach((e=>{e.skip()}))}dispatchAudioInstantRewardsList(){this.dispatchExternalEvent(s.ExternalEvent.post_session_instant_rewards)}dispatchAudioInstantRewardsListMultiplier(){this.dispatchExternalEvent(s.ExternalEvent.post_session_instant_rewards_multiplier)}}t.InstantRewardsList=n}.apply(t,s),void 0===n||(e.exports=n)},5657:(e,t,i)=>{var s,n;s=[i,t,i(5542),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{initElements(){super.initElements(),this.registerControls({instantRewardsList:"wrapper.instantRewardsList",sessionRewardsList:"wrapper.sessionRewardsList"})}staticScreen(){this.instantRewardsList.staticScreen(),this.sessionRewardsList.staticScreen()}animateScreen(){this.instantRewardsList.animateScreen(),this.sessionRewardsList.delay=this.instantRewardsList.delayBeforeLastInstantRewardsList,this.sessionRewardsList.animateScreen();const e=this.instantRewardsList.delay>this.sessionRewardsList.delay?this.instantRewardsList.delay:this.sessionRewardsList.delay;this.animationFinishedTimeout=window.setTimeout((()=>{this.dispatchAnimationFinished("session_performance")}),1e3*e)}skipAnimation(){this.instantRewardsList.skip(),this.sessionRewardsList.skip(),this.content.classList.add("Skip"),window.clearTimeout(this.animationFinishedTimeout),this.dispatchAnimationFinished("session_performance")}dispatchAnimationFinished(e){this.dispatchExternalEvent(i.ExternalEvent.animation_finished,e)}onDestroy(){super.onDestroy(),window.clearTimeout(this.animationFinishedTimeout)}}t.SessionPerformance=n}.apply(t,s),void 0===n||(e.exports=n)},6635:(e,t,i)=>{var s,n;s=[i,t,i(7774)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ListItem{constructor(){super(...arguments),this.duration=.6}updateData(){this.setupReward(this._dataModel)}setupReward(e){const t=this.content,i=this.searchElement("wrapper.image",t),s=this.searchElement("wrapper.count",t);i.style.backgroundImage=`url(${e.image})`,s.innerHTML=`${e.count}`}animateItem(){const e=this.content;e.style.animationName="show-session-rewards-item",e.style.animationDuration=`${this.duration}s`,this.timeout=window.setTimeout((()=>{this.content.classList.add("Ready")}),200)}skip(){window.clearTimeout(this.timeout),this.content.style.opacity="1"}onDestroy(){super.onDestroy(),window.clearTimeout(this.timeout)}}t.SessionRewardsItem=s}.apply(t,s),void 0===n||(e.exports=n)},5078:(e,t,i)=>{var s,n;s=[i,t,i(1318),i(5542)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.ItemsGrid{constructor(){super(...arguments),this.shortDuration=.3,this.setupRewardsTimeout=[],this.audioTriggerTiomeouts=[]}initElements(){super.initElements(),this.registerElements({title:"titleContainer"})}staticScreen(){this.content.classList.add("StaticScreen")}animateScreen(){this.animateTitle(),this.animateRewards()}animateTitle(){this.title.style.opacity="0",this.title.style.animationName="show-match-rewards-title",this.title.style.animationDuration=`${this.shortDuration}s`,this.title.style.animationDelay=`${this.delay}s`,this.delay+=this.shortDuration}animateRewards(){this.items.forEach(((e,t)=>{const i=e,s=window.setTimeout((()=>{i.animateItem()}),1e3*this.delay),n=window.setTimeout((()=>{this.dispatchAudioSessionReward()}),1e3*this.delay);this.audioTriggerTiomeouts.push(n),this.setupRewardsTimeout.push(s),this.delay+=i.duration-.2}))}skip(){for(let e=0;e<this.setupRewardsTimeout.length;e++)window.clearTimeout(this.setupRewardsTimeout[e]);this.items.forEach((e=>{e.skip()}));for(let e=0;e<this.audioTriggerTiomeouts.length;e++)window.clearTimeout(this.audioTriggerTiomeouts[e])}dispatchAudioSessionReward(){this.dispatchExternalEvent(s.ExternalEvent.session_rewards)}onDestroy(){super.onDestroy();for(let e=0;e<this.setupRewardsTimeout.length;e++)window.clearTimeout(this.setupRewardsTimeout[e]);for(let e=0;e<this.audioTriggerTiomeouts.length;e++)window.clearTimeout(this.audioTriggerTiomeouts[e])}}t.SessionRewardsList=n}.apply(t,s),void 0===n||(e.exports=n)},1835:(e,t,i)=>{var s,n;s=[i,t,i(5657)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.SessionPerformance{initElements(){super.initElements(),this.test(),window.addEventListener("keydown",(e=>{69==e.keyCode&&this.skipAnimation()}))}test(){this.instantRewardsList.addSeveralItems([{title:"Completing somethink interesting",image:"coui://libs/ui/images/common/instant_rewards_static.dds:instant_reward_kill_streak",count:1,id:1},{title:"Completing",image:"coui://libs/ui/images/common/instant_rewards_static.dds:instant_reward_kill_streak",count:1,id:2},{title:"Completing",image:"coui://libs/ui/images/common/instant_rewards_static.dds:instant_reward_double_kill",count:5,id:3},{title:"Completing",image:"coui://libs/ui/images/common/instant_rewards_static.dds:instant_reward_double_kill",count:5,id:4}]),this.sessionRewardsList.addSeveralItems([{id:1,image:"coui://libs/ui/images/common/currency/soft.dds",count:500},{id:2,image:"coui://libs/ui/images/common/currency/soft.dds",count:500},{id:3,image:"coui://libs/ui/images/common/currency/soft.dds",count:500}]),this.animateScreen()}}t.TestSessionPerformance=s}.apply(t,s),void 0===n||(e.exports=n)},8065:(e,t,i)=>{var s,n;s=[i,t,i(227),i(7774),i(8674)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.ListItem{constructor(){super(...arguments),this.shortDuration=.3,this.mediumDuration=.6,this.longDuration=.9,this.delay=0,this.timouts=[]}initElements(){super.initElements(),this.registerElements({heroImage:"wrapper.wrapper.innerWrapper.image",unlockImage:"wrapper.postSessionUnlockItem.wrapper.image",levelTitleNumber:"header.levelLabel.number",progressBar:"header.progressBar"}),this.progressBarControl=i.Factory.registerChildControl(this.progressBar)}updateData(){const e=this._dataModel,t=e.levelInfo[0];this.heroImage.style.backgroundImage=`url(${e.image})`,this.unlockImage.style.backgroundImage=`url(${t})`,this.progressBarControl.value=e.initialValue,this.levelTitleNumber.innerHTML=`${e.initialLevel}`}animateHeroProgression(){const e=this._dataModel,t=this.progressBarControl,i=this.longDuration;let s=this.delay;const a=this.parentList;for(let o=e.initialLevel;o<e.currentLevel;o++)n.TweenMax.to(t,i,{value:100,delay:s,ease:null,onStart:()=>{a.onXpGained()},onComplete:()=>{this.onHeroLevelUp(o),t.value=0,a.onLevelUp()}}),s+=i,o+1<e.currentLevel&&(s+=i-.3);n.TweenMax.to(t,i,{ease:null,value:e.currentValue,delay:s,onStart:()=>{a.onXpGained()}}),s+=i,this.delay=s}onHeroLevelUp(e){this.content.classList.add("Ready");const t=this._dataModel,i=e-t.initialLevel,s=t.levelInfo[i];this.unlockImage.style.backgroundImage=`url(${s})`,this.levelTitleNumber.innerHTML=`${e+1}`;const n=window.setTimeout((()=>{this.content.classList.remove("NotReady")}),300);this.timouts.push(n);const a=window.setTimeout((()=>{this.content.classList.remove("Ready")}),600);this.timouts.push(a)}setStaticData(){const e=this._dataModel;if(e.initialLevel!=e.currentLevel){const t=e.levelInfo[e.levelInfo.length-1];this.unlockImage.style.backgroundImage=`url(${t})`,this.progressBarControl.value=e.currentValue,this.levelTitleNumber.innerHTML=`${e.currentLevel}`,this.content.classList.remove("NotReady")}else this.progressBarControl.value=e.currentValue}skip(){this.setStaticData(),this.clearTimeoutsAndAnimations()}onDestroy(){super.onDestroy(),this.clearTimeoutsAndAnimations()}clearTimeoutsAndAnimations(){this.timouts.forEach((e=>{window.clearTimeout(e)})),n.TweenMax.killTweensOf(this.progressBarControl)}}t.HeroUnlocksItem=a}.apply(t,s),void 0===n||(e.exports=n)},6843:(e,t,i)=>{var s,n;s=[i,t,i(5542),i(5198)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.ListBox{constructor(){super(...arguments),this.delay=0}animateHide(){this.content.classList.add("Hide")}setStaticData(){this.items.forEach((e=>{e.skip()}))}animate(){this.items.forEach((e=>{const t=e;t.delay=this.delay,t.animateHeroProgression(),this.delay=t.delay}))}onXpGained(){this.dispatchExternalEvent(i.ExternalEvent.session_progression_xp_gain)}onLevelUp(){this.dispatchExternalEvent(i.ExternalEvent.session_progression_level_up)}skip(){this.content.classList.add("Skip"),this.setStaticData()}}t.HeroUnlocksList=n}.apply(t,s),void 0===n||(e.exports=n)},5118:(e,t,i)=>{var s,n;s=[i,t,i(5542),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{constructor(){super(...arguments),this.tierUpHideElements=()=>{this.content.classList.add("ShowTierUp"),this.unlockedTierWeapons.animateShow()},this.tierUpAnimationFinished=()=>{this.content.classList.remove("ShowTierUp"),this.content.classList.add("HideTierUp"),this.unlockedTierWeapons.animateHide(),this.animateWeaponAfterTierUpTimeout=window.setTimeout((()=>{this.weaponUnlocksList.animateWeapons()}),600)},this.onAnimationStart=()=>{this.dispatchExternalEvent(i.ExternalEvent.session_progression_shown)},this.onAnimationFinished=()=>{this.dispatchExternalEventAnimationFinished("session_progression")}}initElements(){super.initElements(),this.registerControls({heroUnlocksList:"wrapper.heroUnlocksList",weaponUnlocksList:"wrapper.weaponUnlocksList",tierProgression:"tierProgression",unlockedTierWeaponsList:"unlockedTierWeapons.unlockedTierWeaponsList",unlockedTierWeapons:"unlockedTierWeapons"}),this.weaponUnlocksList.tierProgressionControl=this.tierProgression,this.tierProgression.signalTierUped.add(this.tierUpHideElements)}staticScreen(){this.heroUnlocksList.setStaticData(),this.weaponUnlocksList.setStaticData(),this.tierProgression.setStaticData(),this.onAnimationFinished()}animateScreen(){this.onAnimationStart(),this.heroUnlocksList.delay=.4,this.heroUnlocksList.animate(),this.weaponUnlocksList.outerdelay=this.heroUnlocksList.delay,this.weaponUnlocksList.animateScreen(),this.weaponUnlocksList.signalAmationFinished.add(this.onAnimationFinished),this.unlockedTierWeapons.tierUpAnimationFinished.add(this.tierUpAnimationFinished)}skipAnimation(){this.clearTimeouts(),this.heroUnlocksList.skip(),this.weaponUnlocksList.skip(),this.tierProgression.skip(),this.unlockedTierWeapons.skip(),this.onAnimationFinished(),this.content.classList.remove("ShowTierUp"),this.content.classList.add("Skip")}clearTimeouts(){this.weaponUnlocksList.signalAmationFinished.remove(this.onAnimationFinished),this.unlockedTierWeapons.tierUpAnimationFinished.remove(this.tierUpAnimationFinished),window.clearTimeout(this.animateWeaponAfterTierUpTimeout),window.clearTimeout(this.animationFinisishedTimeout)}onDestroy(){this.skipAnimation(),this.clearTimeouts(),super.onDestroy()}}t.SessionProgression=n}.apply(t,s),void 0===n||(e.exports=n)},7818:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(6749)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.Control{initElements(){super.initElements(),s.waitSeveralFrames((()=>{this.registerControls({sessionProgression:"session_progression"}),this.test(),this.testTierData(),this.testUnlockedTierWeapons(),this.sessionProgression.animateScreen(),window.addEventListener("keydown",(e=>{69==e.keyCode&&this.sessionProgression.skipAnimation()}))}))}test(){const e=new Map;e.set(3,"coui://libs/ui/images/common/hero_progression_icons_npa.dds:20_hp_ultimate_healing_heroprog_icon"),e.set(4,"coui://libs/ui/images/common/hero_progression_icons_npa.dds:20_hp_ultimate_healing_heroprog_icon"),this.sessionProgression.heroUnlocksList.addSeveralItems([{image:"coui://libs/ui/images/test/test_hero_healer.dds",initialLevel:3,initialValue:30,currentLevel:5,currentValue:20,levelInfo:["coui://libs/ui/images/common/hero_progression_icons_npa.dds:20_hp_ultimate_healing_heroprog_icon","coui://libs/ui/images/common/hero_progression_icons_npa.dds:upgraded_smoke_heroprog_icon","coui://libs/ui/images/common/hero_progression_icons_npa.dds:upgraded_smoke_heroprog_icon"],id:1},{image:"coui://libs/ui/images/test/test_hero_healer.dds",initialLevel:3,initialValue:30,currentLevel:3,currentValue:50,levelInfo:["coui://libs/ui/images/common/hero_progression_icons_npa.dds:20_hp_ultimate_healing_heroprog_icon","coui://libs/ui/images/common/hero_progression_icons_npa.dds:upgraded_smoke_heroprog_icon"],id:2}]),this.sessionProgression.weaponUnlocksList.addSeveralItems([{id:1,initialLevel:3,initialValue:1e3,currentLevel:3,currentValue:4e3,image:"coui://libs/ui/images/weapon_inventory/weapon_inventory_primary/ar04_icon_inventory.dds",title:"XM-08TooManyWordsWeapon",levelInfo:[{unlockImage:"coui://libs/ui/images/weapon_attachments/rds01.dds",necessaryExpToGain:1e4}]},{id:2,initialLevel:3,initialValue:4e3,currentLevel:4,currentValue:2e3,image:"coui://libs/ui/images/weapon_inventory/weapon_inventory_primary/ar04_icon_inventory.dds",title:"XM-08TooManyWordsWeapon",levelInfo:[{unlockImage:"coui://libs/ui/images/weapon_attachments/rds01.dds",necessaryExpToGain:5e3},{unlockImage:"coui://libs/ui/images/weapon_attachments/rds01.dds",necessaryExpToGain:1e4}]}])}testTierData(){this.sessionProgression.tierProgression.setupData({initialTier:2,initialValue:12e3,currentTier:3,currentValue:18e3,isTierFullProgressed:!1,tierInfo:[{currentTierName:"Tier II",nextTierName:"Tier III",necessaryExpToGain:15e3},{currentTierName:"Tier III",nextTierName:"Tier IV",necessaryExpToGain:2e4}]})}testUnlockedTierWeapons(){this.sessionProgression.unlockedTierWeapons.setupData({unlockedWeapons:[{image:"coui://libs/ui/images/kill_log/weapons_primary_ar_shg_kill_log_npa.dds:ar05_icon",currencyIcon:"coui://libs/ui/images/common/currency/hard.dds",price:500,fireMode:"coui://libs/ui/images/common/ammo_icons.dds:ammo_rifle_auto",id:1},{image:"coui://libs/ui/images/kill_log/weapons_primary_ar_shg_kill_log_npa.dds:ar05_icon",currencyIcon:"coui://libs/ui/images/common/currency/hard.dds",price:500,fireMode:"coui://libs/ui/images/common/ammo_icons.dds:ammo_rifle_auto",id:2},{image:"coui://libs/ui/images/kill_log/weapons_primary_ar_shg_kill_log_npa.dds:ar05_icon",currencyIcon:"coui://libs/ui/images/common/currency/hard.dds",price:500,fireMode:"coui://libs/ui/images/common/ammo_icons.dds:ammo_rifle_auto",id:3},{image:"coui://libs/ui/images/kill_log/weapons_primary_ar_shg_kill_log_npa.dds:ar05_icon",currencyIcon:"coui://libs/ui/images/common/currency/hard.dds",price:500,fireMode:"coui://libs/ui/images/common/ammo_icons.dds:ammo_rifle_auto",id:4},{image:"coui://libs/ui/images/kill_log/weapons_primary_ar_shg_kill_log_npa.dds:ar05_icon",currencyIcon:"coui://libs/ui/images/common/currency/hard.dds",price:500,fireMode:"coui://libs/ui/images/common/ammo_icons.dds:ammo_rifle_auto",id:5}],unlockedTierTitle:"Bravo tier",previousTierTitle:"Alpha tier",unlockedLabel:"разблокировано"})}}t.TestSessionProgression=n}.apply(t,s),void 0===n||(e.exports=n)},5040:(e,t,i)=>{var s,n;s=[i,t,i(3008),i(8674),i(8606)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.Control{constructor(){super(...arguments),this.isTierFullProgressed=!1,this.shortDuration=.3,this.mediumDuration=.6,this.longDuration=.9,this.isTierUped=!1}initElements(){this.registerElements({currentTierLabel:"labelsWrapper.currentTier.label",nextTierLabel:"labelsWrapper.nextTier.label",currentExpLabel:"labelsWrapper.progressText.currentExp",maxTierExpLabel:"labelsWrapper.progressText.maxTierExp"}),this.registerControls({currentExpProgressBar:"progressBarWrapper.progressBar",gainedExpProgressBar:"progressBarWrapper.gainedProgress"})}setupData(e){this._data=e,this.updateData()}updateData(){const e=this._data,t=e.tierInfo[0];this.currentTierInfo=t,this.currentTierLabel.innerHTML=t.currentTierName,this.nextTierLabel.innerHTML=t.nextTierName,this.shownExp=e.initialValue,this.maxTierExpLabel.innerHTML=`${t.necessaryExpToGain}`,this.currentExpProgressBar.min=0,this.currentExpProgressBar.max=t.necessaryExpToGain,this.currentExpProgressBar.value=e.initialValue,this.gainedExpProgressBar.min=0,this.gainedExpProgressBar.max=t.necessaryExpToGain,this.gainedExpProgressBar.value=e.initialValue,this.isTierFullProgressed=e.isTierFullProgressed,this.isTierFullProgressed&&(this.visible=!1),this.currentTier=e.initialTier}set shownExp(e){this.currentExpLabel.innerHTML=`${Math.round(e)}`,this._shownExp=e}get shownExp(){return this._shownExp}setStaticData(){const e=this._data,t=e.tierInfo[e.tierInfo.length-1];if(this.currentTierInfo=t,this.currentTierLabel.innerHTML=t.currentTierName,this.nextTierLabel.innerHTML=t.nextTierName,this.shownExp=e.currentValue,this.maxTierExpLabel.innerHTML=`${t.necessaryExpToGain}`,e.initialTier==e.currentTier){const t=e.tierInfo[0];this.currentExpProgressBar.min=0,this.currentExpProgressBar.max=t.necessaryExpToGain,this.currentExpProgressBar.value=e.initialValue}else this.currentExpProgressBar.opacity=0;this.gainedExpProgressBar.min=0,this.gainedExpProgressBar.max=t.necessaryExpToGain,this.gainedExpProgressBar.value=e.currentValue}animateProgress(e){s.TweenMax.killTweensOf(this.gainedExpProgressBar),this.isTierUped=this.gainedExpProgressBar.value+e>=this.gainedExpProgressBar.max;const t=this.mediumDuration;if(this.isTierUped){const i=this.gainedExpProgressBar.value+e-this.gainedExpProgressBar.max;this.signalTierUped&&this.signalTierUped.dispatch(),s.TweenMax.fromTo(this,t,{shownExp:this.shownExp},{shownExp:this.gainedExpProgressBar.max}),s.TweenMax.to(this.gainedExpProgressBar,t,{value:this.gainedExpProgressBar.max,onstart:()=>{this.dispatchExternalEventAnimationStarted("animateProgress")},onComplete:()=>{this.dispatchExternalEventAnimationFinished("animateProgress"),this.onTierUped(i)}})}else s.TweenMax.to(this,t,{shownExp:this.gainedExpProgressBar.value+e}),s.TweenMax.to(this.gainedExpProgressBar,t,{value:this.gainedExpProgressBar.value+e,onstart:()=>{this.dispatchExternalEventAnimationStarted("animateProgress")}})}onTierUped(e){this.currentTier++,this.content.classList.add("Ready");const t=this.currentTier-this._data.initialTier,i=this._data.tierInfo[t];this.currentTierInfo=i,this.currentExpProgressBar.value=0,this.gainedExpProgressBar.min=0,this.gainedExpProgressBar.max=i.necessaryExpToGain,this.gainedExpProgressBar.value=e,this.shownExp=e,this.maxTierExpLabel.innerHTML=`${i.necessaryExpToGain}`,this.currentTierLabel.innerHTML=i.currentTierName,this.nextTierLabel.innerHTML=i.nextTierName}clearAnimations(){this.dispatchExternalEventAnimationFinished("animateProgress"),s.TweenMax.killTweensOf(this),s.TweenMax.killTweensOf(this.gainedExpProgressBar),this.dispatchExternalEventAnimationFinished("animateProgress")}skip(){this.clearAnimations(),this.setStaticData()}get signalTierUped(){return this._signalTierUp||(this._signalTierUp=new i.Signal),this._signalTierUp}onDestroy(){this.clearAnimations(),super.onDestroy()}}t.TierProgression=a}.apply(t,s),void 0===n||(e.exports=n)},3230:(e,t,i)=>{var s,n;s=[i,t,i(3008),i(8606),i(5542)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends s.Control{initElements(){super.initElements(),this.registerElements({unlockedLabel:"unlockedMessageWrapper.message",unlockedLabelOutline:"unlockedMessageWrapper.messageOutline",previousTierLabel:"unlockedTierWeaponsList.titleWrapper.labelPrevious",unlockedTierLabel:"unlockedTierWeaponsList.titleWrapper.label"}),this.registerControls({weaponsList:"unlockedTierWeaponsList"})}setupData(e){this.unlockedLabel.innerHTML=e.unlockedLabel,this.unlockedLabelOutline.innerHTML=e.unlockedLabel,this.previousTierLabel.innerHTML=e.previousTierTitle,this.unlockedTierLabel.innerHTML=e.unlockedTierTitle,this.weaponsList.addSeveralItems(e.unlockedWeapons),this.weaponsList.visible=!1,this.unlockedLabel.classList.add("Hidden"),this.unlockedLabelOutline.classList.add("Hidden")}animateShow(){this.dispatchExternalEvent(n.ExternalEvent.animation_started),this.weaponsList.visible=!0,this.unlockedLabel.classList.remove("Hidden"),this.unlockedLabelOutline.classList.remove("Hidden");const e=window.setTimeout((()=>{this._tierUpAnimationFinished&&(this._tierUpAnimationFinished.dispatch(),this.dispatchExternalEvent(n.ExternalEvent.animation_finished))}),5e3);this.hideTimeout=e}debugAnimate(){this.weaponsList.visible=!0,this.unlockedLabel.classList.remove("Hidden"),this.unlockedLabelOutline.classList.remove("Hidden")}animateHide(){this.content.classList.add("Hide")}skip(){this.visible=!1,window.clearTimeout(this.hideTimeout)}get tierUpAnimationFinished(){return this._tierUpAnimationFinished||(this._tierUpAnimationFinished=new i.Signal),this._tierUpAnimationFinished}onDestroy(){super.onDestroy(),window.clearTimeout(this.hideTimeout)}}t.UnlockedTierWeapons=a}.apply(t,s),void 0===n||(e.exports=n)},4054:(e,t,i)=>{var s,n;s=[i,t,i(7774)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.ListItem{initElements(){super.initElements(),this.registerElements({image:"wrapper.innerWrapper.image",currencyIcon:"wrapper.innerWrapper.iconWrapper.currencyIcon",price:"wrapper.innerWrapper.price",fireMode:"wrapper.innerWrapper.fireMode"})}updateData(){this.image.style.backgroundImage=`url(${this._dataModel.image})`,this.currencyIcon.style.backgroundImage=`url(${this._dataModel.currencyIcon})`,this.price.innerHTML=`${this._dataModel.price}`,this.fireMode.style.backgroundImage=`url(${this._dataModel.fireMode})`}}t.UnlockedTierWeaponsItem=s}.apply(t,s),void 0===n||(e.exports=n)},8206:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(227),i(7774)],n=function(e,t,i,s,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a extends n.ListItem{constructor(){super(...arguments),this.shortDuration=.3,this.mediumDuration=.6,this.longDuration=.9,this.timeouts=[],this.delay=0,this.gainedExp=0}initElements(){super.initElements(),this.registerElements({image:"globalWrapper.wrapper.innerWrapper.image",title:"globalWrapper.wrapper.innerWrapper.title",level:"globalWrapper.wrapper.innerWrapper.levelWrapper.level",progressBar:"globalWrapper.wrapper.innerWrapper.levelWrapper.progressBar",unlockImage:"globalWrapper.postSessionUnlockItem.wrapper.image"}),this.progressBarControl=s.Factory.registerChildControl(this.progressBar)}updateData(){const e=this._dataModel;this.image.style.backgroundImage=`url(${e.image})`,this.title.innerHTML=`${e.title}`,this.level.innerHTML=`${e.initialLevel}`,this.progressBarControl.min=0,this.progressBarControl.max=e.levelInfo[0].necessaryExpToGain,this.progressBarControl.value=e.initialValue,this.progressBarControl.delta=e.initialValue,this.unlockImage.style.backgroundImage=`url(${e.levelInfo[0].unlockImage})`,this.content.classList.add("NotReady"),this.countGainedExp()}countGainedExp(){const e=this._dataModel;let t=e.initialLevel;do{if(t==e.initialLevel)e.initialLevel!=e.currentLevel?this.gainedExp+=e.levelInfo[0].necessaryExpToGain-e.initialValue:this.gainedExp+=e.currentValue-e.initialValue;else if(t==e.currentLevel)this.gainedExp+=e.currentValue;else{const i=t-e.initialLevel;this.gainedExp+=e.levelInfo[i].necessaryExpToGain}t+=1}while(t<=e.currentLevel)}animate(){this.animateShowing(),this.animateWeaponProgression()}animateShowing(){const e=window.setTimeout((()=>{this.content.classList.add("Show")}),1e3*this.delay);this.delay+=.5,this.timeouts.push(e)}animateWeaponProgression(){const e=this._dataModel,t=this.progressBarControl,s=this.longDuration,n=this.parentList;let a=this.delay;for(let o=e.initialLevel;o<e.currentLevel;o++){const r=window.setTimeout((()=>{i.TweenMax.to(t,s,{delta:t.max,ease:null,onStart:()=>{n.onXpGained()},onComplete:()=>{n.onLevelUp(),t.delta=0,t.value=0,t.max=e.levelInfo[o-e.initialLevel+1].necessaryExpToGain,this.onWeaponLevelUp(o+1)}})}),1e3*a);a+=s+.1,o+1<e.currentLevel&&(a+=s-.3),this.timeouts.push(r)}const o=window.setTimeout((()=>{i.TweenMax.to(t,s,{ease:null,delta:e.currentValue,onStart:()=>{n.onXpGained()}})}),1e3*a);this.timeouts.push(o),a+=s,this.delay=a}onWeaponLevelUp(e){this.content.classList.add("Ready");const t=this._dataModel,i=e-t.initialLevel-1,s=t.levelInfo[i].unlockImage;this.unlockImage.style.backgroundImage=`url(${s})`,this.level.innerHTML=`${e}`,this.content.classList.remove("NotReady");const n=window.setTimeout((()=>{this.content.classList.remove("Ready")}),600);this.timeouts.push(n)}skip(){this.content.classList.add("Skip"),this.clearTimeoutsAndAnimations(),this.setStaticData()}setStaticData(){const e=this._dataModel;if(e.initialLevel!=e.currentLevel){const t=e.levelInfo[e.levelInfo.length-1],i=t.unlockImage;this.unlockImage.style.backgroundImage=`url(${i})`,this.progressBarControl.value=0,this.progressBarControl.max=t.necessaryExpToGain,this.progressBarControl.delta=e.currentValue,this.level.innerHTML=`${e.currentLevel}`,this.content.classList.remove("NotReady")}else this.progressBarControl.value=e.currentValue}clearTimeoutsAndAnimations(){this.timeouts.forEach((e=>{window.clearTimeout(e)})),i.TweenMax.killTweensOf(this.progressBarControl)}onDestroy(){super.onDestroy(),this.clearTimeoutsAndAnimations()}}t.WeaponUnlocksItem=a}.apply(t,s),void 0===n||(e.exports=n)},889:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(7798)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.DefaultProgressBar{constructor(){super(...arguments),this.mediumDuration=.6,this.onUpdateStyle=()=>{const{isHorizontal:e,relativeValue:t,clip:i,clip2:s}=this;i&&(e?i.style.width=100*t+"%":i.style.height=100*t+"%")}}initElements(){super.initElements(),this.registerElements({clip2:"clip2",shadowClip:"shadowClip"})}updateDelta(){const{isHorizontal:e,clip2:t,shadowClip:i}=this,s=this._delta/this.max;t&&(e?t.style.width=100*s+"%":t.style.height=100*s+"%")}animateTransitionDoubleProgressBar(e,t,s){const n=this.mediumDuration,a=e.gainedExpProgressBar,o=a.searchElement("clip"),r=this.shadowClip,l=o.getBoundingClientRect(),h=this.content.getBoundingClientRect(),d=Math.round(l.left+l.width-h.left),c=Math.round(l.top-h.top);let u;const p=a.content.getBoundingClientRect();u=t?(p.width-.1*p.width)*((a.max-a.value)/(a.max-a.min)):(p.width-.1*p.width)*(s/(a.max-a.min));const m=l.height;r.style.width=`${h.width}px`,r.style.height=`${h.height}px`,r.style.top="0px",r.style.left="0px",r.style.transform="translateX(0px) translateY(0px)",i.TweenMax.to(r.style,n,{transform:`translateX(${d}px) translateY(${c}px)`,width:`${u}px`,height:`${m}px`,onComplete:()=>{r.classList.add("Hidden")}})}set delta(e){this._delta=e,this.updateDelta()}get delta(){return this._delta}}t.WeaponUnlocksItemDoubleProgressBar=n}.apply(t,s),void 0===n||(e.exports=n)},9950:(e,t,i)=>{var s,n;s=[i,t,i(3008),i(9586),i(5198),i(6749),i(5542)],n=function(e,t,i,s,n,a,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r extends n.ListBox{constructor(){super(...arguments),this.boundItemsCount=3,this.shortDuration=.3,this.mediumDuration=.6,this.longDuration=.9,this.progressedExp=0,this.lastShowedWeapon=0,this.totalGainedExpAtOneAnimationPeriod=0,this.itemMarginRightVH=15.5,this.itemSizeVH=30.7,this.timeouts=[],this.outerdelay=0,this.delay=0}initElements(){super.initElements(),this.itemSizePX=s._vhToPx(this.itemSizeVH),this.itemMarginRightPX=s._vhToPx(this.itemMarginRightVH),this.middleContainer=this.searchElement("container")}animateHide(){this.content.classList.add("Hide")}animateScreen(){this.content.classList.add("AnimateScreen"),this.waitFuncDispose2=a.waitSeveralFrames((()=>{this.listSizePX=this.content.getBoundingClientRect().width,this.inputEnabled=!1,this.delay=this.outerdelay,this.animateWeapons()}))}animateWeapons(){for(let e=this.lastShowedWeapon;e<this.itemsKeyArray.length;e++){const t=this.items.get(this.itemsKeyArray[e]);if(this.centralizeItems(e),t.delay=this.delay,t.animate(),this.delay=t.delay,!this.tierProgressionControl.isTierFullProgressed){const e=window.setTimeout((()=>{this.tierProgressionControl.animateProgress(t.gainedExp)}),1e3*this.delay);this.timeouts.push(e),this.totalGainedExpAtOneAnimationPeriod+=t.gainedExp;const i=this.tierProgressionControl.shownExp+this.totalGainedExpAtOneAnimationPeriod>=this.tierProgressionControl.currentTierInfo.necessaryExpToGain,s=window.setTimeout((()=>{t.progressBarControl.animateTransitionDoubleProgressBar(this.tierProgressionControl,i,t.gainedExp)}),1e3*this.delay);if(this.timeouts.push(s),this.delay+=this.mediumDuration,i)return this.outerdelay=this.delay,this.totalGainedExpAtOneAnimationPeriod=0,this.delay=0,void this.lastShowedWeapon++}this.outerdelay=this.delay,this.lastShowedWeapon++}const e=window.setTimeout((()=>{this.inputEnabled=!0,this._signalAmationFinished.dispatch()}),1e3*this.delay);this.timeouts.push(e)}centralizeItems(e){switch(e){case 0:this.centralizeOneItem();break;case 1:this.centralizeTwoItems();break;case 2:this.centralizeThreeItems();break;default:e&&this.delayedScrollToElement(e)}}centralizeOneItem(){this.containerControl.content.style.left=this.listSizePX/2-this.itemSizePX/2-s._vhToPx(this.gridStartIndent)+"px"}centralizeTwoItems(){const e=window.setTimeout((()=>{this.containerControl.content.style.left=this.listSizePX/2-this.itemSizePX/2*2-this.itemMarginRightPX/2-s._vhToPx(this.gridStartIndent)+"px"}),1e3*this.delay);this.delay+=this.shortDuration,this.timeouts.push(e)}centralizeThreeItems(){const e=window.setTimeout((()=>{this.containerControl.content.style.left="0px"}),1e3*this.delay);this.delay+=this.shortDuration,this.timeouts.push(e)}delayedScrollToElement(e){const t=window.setTimeout((()=>{const t=this.items.get(this.itemsKeyArray[e]);this.scrollToElement(t.content)}),1e3*this.delay);this.timeouts.push(t),this.delay+=this.shortDuration}setStaticData(){this.items.forEach((e=>{e.skip()}));const e=this.getItemsCount(),t=this.itemsKeyArray[e-1];this.content.classList.remove("AnimateScreen"),e<=2?this.centralizeItems(e-1):(this.containerControl.content.style.left="0px",this.scrollToElement(this.getItemById(t).content,0)),this.content.classList.remove("PointerEventsNone")}onXpGained(){this.dispatchExternalEvent(o.ExternalEvent.session_progression_xp_gain)}onLevelUp(){this.dispatchExternalEvent(o.ExternalEvent.session_progression_level_up)}skip(){this.clearDelays(),this.setStaticData()}clearDelays(){this.timeouts.forEach((e=>{window.clearTimeout(e)})),this._signalAmationFinished&&this._signalAmationFinished.removeAll()}get signalAmationFinished(){return this._signalAmationFinished||(this._signalAmationFinished=new i.Signal),this._signalAmationFinished}onDestroy(){super.onDestroy(),this.clearDelays(),this.waitFuncDispose2&&(this.waitFuncDispose2(),this.waitFuncDispose2=null)}}t.WeaponUnlocksList=r}.apply(t,s),void 0===n||(e.exports=n)},5058:(e,t,i)=>{var s,n;s=[i,t,i(2484)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.DefaultScreen{initElements(){this.registerControls({heroProgressionList:"heroProgressionList",weaponProgressionList:"weaponProgressionList",armoryWeaponsList:"armoryWeaponsList"}),this.heroProgressionUpdateData(),this.weaponProgressionUpdateData(),this.armoryWeaponsUpdateData()}heroProgressionUpdateData(){this.heroProgressionList.addBlankItems(3),this.heroProgressionList.addSeveralItems([{id:1,text:"",image:"../../images/heroes/hero_malva_large.tif",rewards:[{image:"../../images/perk_icons/horde_primary_weapon_backpack_npa.tif"},{image:"../../images/perk_icons/decontamination_npa.tif"},{image:"../../images/perk_icons/horde_whirlwind_npa.tif"}]},{id:2,text:"",image:"../../images/heroes/hero_mongoose_large.tif",rewards:[{image:"../../images/perk_icons/horde_mark_of_hatred_npa.tif"},{image:"../../images/perk_icons/horde_scavenger_npa.tif"},{image:"../../images/perk_icons/horde_mark_of_hatred_npa.tif"},{image:"../../images/perk_icons/horde_scavenger_npa.tif"}]},{id:3,text:"",image:"../../images/heroes/hero_brisa_large.tif",rewards:[{image:"../../images/perk_icons/horde_freezing_touch_npa.tif"}]}])}weaponProgressionUpdateData(){this.weaponProgressionList.addBlankItems(3),this.weaponProgressionList.addSeveralItems([{id:1,text:"",image:"../../images/weapon_inventory/weapon_inventory_epic/ar04_epic01_icon_inventory.tif",title:"Presarm VX-7",level:1,progress:50,rewards:[{title:"sp51",image:"../../images/weapon_attachments/sp51.tif"},{title:"ss09",image:"../../images/weapon_attachments/ss09.tif"},{title:"ls10",image:"../../images/weapon_attachments/ls10.tif"}]},{id:2,text:"",image:"../../images/weapon_inventory/weapon_inventory_epic/smg03_epic01_icon_inventory.tif",title:"AK 467",level:2,progress:20,rewards:[{title:"as04",image:"../../images/weapon_attachments/as04.tif"},{title:"mz l11",image:"../../images/weapon_attachments/mz_l11.tif"}]},{id:3,text:"",image:"../../images/weapon_inventory/weapon_inventory_epic/sr11_epic01_icon_inventory.tif",title:"M2 TACTICAL SAS",level:3,progress:90,rewards:[{title:"mz l07 legendary",image:"../../images/weapon_attachments/mz_l07.tif"}]}])}armoryWeaponsUpdateData(){this.armoryWeaponsList.addBlankItems(6),this.armoryWeaponsList.addSeveralItems([{id:1,text:"",image:"../../images/kill_log/weapons_secondary_kill_log_npa.dds:pt07_icon",currencyIcon:"../../images/common/currency/soft.tif",price:100,fireMode:"../../images/common/ammo_icons.dds:ammo_rifle_auto"},{id:2,text:"",image:"../../images/kill_log/weapons_primary_ar_shg_kill_log_npa.dds:lmg01_proto_icon",currencyIcon:"../../images/common/currency/soft.tif",price:300,fireMode:"../../images/common/ammo_icons.dds:ammo_shotgun_single"},{id:3,text:"",image:"../../images/kill_log/weapons_primary_sr_kill_log_npa.dds:sr01_icon",currencyIcon:"../../images/common/currency/soft.tif",price:500,fireMode:"../../images/common/ammo_icons.dds:ammo_pistol"},{id:4,text:"",image:"../../images/kill_log/weapons_primary_ar_shg_kill_log_npa.dds:ar02_icon",currencyIcon:"../../images/common/currency/soft.tif",price:100,fireMode:"../../images/common/ammo_icons.dds:ammo_rifle_auto"},{id:5,text:"",image:"../../images/kill_log/weapons_primary_ar_shg_kill_log_npa.dds:lmg01_proto_icon",currencyIcon:"../../images/common/currency/soft.tif",price:300,fireMode:"../../images/common/ammo_icons.dds:ammo_shotgun_single"},{id:6,text:"",image:"../../images/kill_log/weapons_primary_ar_shg_kill_log_npa.dds:shg08_icon",currencyIcon:"../../images/common/currency/soft.tif",price:500,fireMode:"../../images/common/ammo_icons.dds:ammo_pistol"}])}}t.TestSessionUnlocks=s}.apply(t,s),void 0===n||(e.exports=n)},3634:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(9546)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.PatternButton{initElements(){super.initElements(),this.registerControls({progressBar:"wrapper.progressBar"})}animateProgressBar(e){i.TweenMax.fromTo(this.progressBar,e,{value:0},{value:100,ease:i.Linear.easeNone})}}t.SkipButton=n}.apply(t,s),void 0===n||(e.exports=n)},6955:(e,t,i)=>{var s,n;s=[i,t,i(4050),i(8674),i(8606),i(8613)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o extends n.Control{initElements(){super.initElements(),this.registerControls({dynamic_container:"elements.gridContainer.grid.container",static_container:"elements.static.container"})}show(){super.show(),s.TweenMax.killTweensOf(this),s.TweenMax.fromTo(this,.2,{alpha:0},{alpha:1,delay:.2})}hide(){s.TweenMax.killTweensOf(this),s.TweenMax.fromTo(this,.2,{alpha:1},{alpha:0,onComplete:()=>{this.visible=!1}})}}t.TestNavigation=o;class r extends i.NavigationStackContainer{hasFocusableElements(){return!0}}t.TestNavigationList=r;class l extends a.EmptySelectableButton{setSize1x1(){this.content.classList.add("test-navigation-product-size-1x1")}setSize2x1(){this.content.classList.add("test-navigation-product-size-2x1")}setSize3x1(){this.content.classList.add("test-navigation-product-size-3x1")}setSize4x1(){this.content.classList.add("test-navigation-product-size-4x1")}setSize1x2(){this.content.classList.add("test-navigation-product-size-1x2")}setSize2x2(){this.content.classList.add("test-navigation-product-size-2x2")}setSize3x2(){this.content.classList.add("test-navigation-product-size-3x2")}setSize4x2(){this.content.classList.add("test-navigation-product-size-4x2")}}t.TestNavigationProduct=l}.apply(t,s),void 0===n||(e.exports=n)},4890:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends s.Control{show(){super.show(),i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,.2,{alpha:0},{alpha:1,delay:.2})}hide(){i.TweenMax.killTweensOf(this),i.TweenMax.fromTo(this,.2,{alpha:1},{alpha:0,onComplete:()=>{this.visible=!1}})}}t.TestNavigationPreview=n}.apply(t,s),void 0===n||(e.exports=n)},1977:(e,t,i)=>{var s,n;s=[i,t,i(8674),i(8606),i(2889),i(0)],n=function(e,t,i,s,n,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.testProceduralScreen=function(){n.root.content.classList.add("Flex"),function(){a.clientEmulator.createControl("Panel","panel1");const e=s.controls.get("panel1");e.width="400px",e.height="350px",a.clientEmulator.createControl("Label","panel1.label"),s.controls.get("panel1.label").text="LABEL",a.clientEmulator.createControl("EditBox","panel1.editbox"),s.controls.get("panel1.editbox").text="Edit"}(),function(){a.clientEmulator.createControl("Button","panel1.button"),s.controls.get("panel1.button").text="BUTTON",a.clientEmulator.createControl("Button","panel1.button2");const e=s.controls.get("panel1.button2");e.text="BUTTON2",e.enabled=!1,a.clientEmulator.createControl("CheckBox","panel1.toggle"),s.controls.get("panel1.toggle").value=!0}(),function(){a.clientEmulator.createControl("Panel","panel2");const e=s.controls.get("panel2");e.width="400px",e.height="350px",a.clientEmulator.createControl("ProgressBar","panel2.progressbar");const t=s.controls.get("panel2.progressbar");t.setMinMax(100,200),t.value=140,a.clientEmulator.createControl("VProgressBar","panel2.vprogressbar"),s.controls.get("panel2.vprogressbar").value=40}(),function(){a.clientEmulator.createControl("Panel","panel3");const e=s.controls.get("panel3");e.width="400px",e.height="350px",a.clientEmulator.createControl("Slider","panel3.slider"),s.controls.get("panel3.slider").value=40,a.clientEmulator.createControl("VSlider","panel3.vslider"),s.controls.get("panel3.vslider").value=40,a.clientEmulator.createControl("Panel","panel4");const t=s.controls.get("panel4");t.width="400px",t.height="350px",a.clientEmulator.createControl("ScrollBar","panel4.scrollbar"),s.controls.get("panel4.scrollbar").value=40,a.clientEmulator.createControl("VScrollBar","panel4.vscrollbar"),s.controls.get("panel4.vscrollbar").value=40}(),function(){a.clientEmulator.createControl("Panel","panel5");const e=s.controls.get("panel5");e.width="400px",e.height="350px",a.clientEmulator.createControl("ListBox","panel5.listbox");const t=s.controls.get("panel5.listbox");for(let e=1;e<=5;e++)t.addItem({id:e,text:`ITEM${e}`});t.clear();for(let e=1;e<=100;e++)t.addItem({id:e,text:`ITEM${e}`});t.removeItemById(2),t.setSelectedItemById(3)}(),function(){a.clientEmulator.createControl("Image","image");const e=s.controls.get("image");e.alias="images/test/hero_malva.dds",e.setListenRectChanged(),e.position="absolute",e.x=10,e.y=310,i.TweenMax.to(e,1,{x:210})}()}}.apply(t,s),void 0===n||(e.exports=n)},3373:(e,t,i)=>{var s,n;s=[i,t,i(8606)],n=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends i.Control{}t.TestScreen=s}.apply(t,s),void 0===n||(e.exports=n)},9762:(e,t,i)=>{var s,n;s=[i,t,i(8606),i(206)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends i.Control{init(){super.init(),s.tests[s.test]()}}t.Test=n}.apply(t,s),void 0===n||(e.exports=n)},206:(e,t,i)=>{var s,n;s=[i,t,i(6749),i(1977)],n=function(e,t,i,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.debugScreen=Object(window).debugScreen||i.getUrlParam("debugScreen",""),t.test="",t.tests={testProceduralScreen:s.testProceduralScreen}}.apply(t,s),void 0===n||(e.exports=n)},2112:(e,t,i)=>{var s,n;s=[i,t,i(227),i(0)],void 0===(n=function(e,t,i,s){"use strict";console.log("Gameface:",navigator.userAgent),s.clientEmulator.handleInit(),i.Factory.init(),s.clientEmulator.handleRun()}.apply(t,s))||(e.exports=n)},0:(e,t,i)=>{var s,n;s=[i,t,i(8330),i(6749),i(5542),i(8606),i(206)],n=function(e,t,i,s,n,a,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dataModelPrefix="ControlDataModel",t.controlModelPrefix="ControlViewModel",t.drawModelPrefix="ControlDrawModel";const r=new Map;t.clientEmulator=new class{constructor(){this._nextId=0,this.on=(e,t)=>{r.set(e,t)},this.trigger=(e,...t)=>{r.get(e)(...t)},this.createJSModel=(e,t)=>{Object(window)[e]=t},this.unregisterModel=e=>{delete Object(window)[e]},this.logExternalEvent=(e,t,...i)=>{const s=a.controlsById.get(t);console.log(e,...i,"id:",t,s.controlPath)},this.setMember=(e,t,s)=>{i.engine.TriggerEvent("setMember",e,t,s)}}handleInit(){this.isWebBrowser=null==i.engine.createJSModel,this.isWebBrowser&&this.initMockEngine()}initMockEngine(){i.engine.on=this.on,i.engine.trigger=this.trigger,i.engine.TriggerEvent=this.trigger,i.engine.setMember=this.setMember,i.engine.createJSModel=this.createJSModel,i.engine.unregisterModel=this.unregisterModel}handleRun(){o.debugScreen&&this.run()}run(){this.isWebBrowser&&this.initListeners(),t.clientEmulator.createControl(o.debugScreen,"test"),this.isWebBrowser&&i.engine.synchronizeModels()}initListeners(){i.engine.on(n.externalEvent,this.logExternalEvent)}createControl(e,t,s=!1){const n=this.generateId();i.engine.TriggerEvent("createControl",e,t,n,s)}createControlFromJson(e,t,i){const s=i.children;this.createControl(e,t);const n=a.controls.get(t);for(let e=0;e<s.length;e++){const i=s[e];this.registerControl(`${t}.${i.path}`);for(const e in i)if("name"!=e&&"path"!=e){const t=n.searchControl(i.path);Object(t)[e]=Object(i)[e]}}}createControlFromJsonEx(e,t,i){const s=i.children;this.createControl(e,t);const n=a.controls.get(t);for(let e=0;e<s.length;e++){const i=s[e];if(this.registerControl(`${t}.${i.path}`),i.dynamic)for(let e=0;e<i.value.length;e++){const s=`${t}.${i.path}.${i.fill+e}`,n=i.value[e];this.createControlFromJsonEx(i.fill,s,n)}else for(const e in i)if("name"!=e&&"path"!=e){const t=n.searchControl(i.path);Object(t)[e]=Object(i)[e]}}}createControlsFromLayout(){s.loadObject("test_layouts.json",(e=>{s.loadObject("test_flowchart.json",(e=>{e.flowchart_config[0].component}))}))}registerControl(e,t=!1){const s=this.generateId();i.engine.TriggerEvent("registerControl",e,s,t)}removeControl(e){const t=a.controls.get(e);t?t.destroy():console.error('removeControl: unknown control path "'+e+'"')}callMethod(e,t,...s){i.engine.TriggerEvent("callMethod",e,t,...s)}generateId(){return++this._nextId}}}.apply(t,s),void 0===n||(e.exports=n)},9664:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TestHandler=class{update(e,t){console.log(`---\x3e ${JSON.stringify(t)}`)}},t.CohColorMatrixHandler=class{update(e,t){this._value!=t&&(this._value=t,e.style.filter=""!=t?this.convertColor(t):"none")}convertColor(e){const t=e.split("#"),i=t[t.length-1];return`coh-color-matrix(${parseInt(`${i[0]}${i[1]}`,16)/255}, 0, 0, 0, 0, ${parseInt(`${i[2]}${i[3]}`,16)/255}, 0, 0, 0, 0, ${parseInt(`${i[4]}${i[5]}`,16)/255}, 0, 0, 0, 0, 0, 0, 0, ${i.length>6?parseInt(`${i[6]}${i[7]}`,16)/255:1}, 0)`}},t.MaskImageHandler=class{update(e,t){this._value!=t&&(this._value=t,e.style.maskImage=`url(${t})`)}},t.CustomHtmlHandler=class{update(e,t){this._value!=t&&(this._value=t,e.innerHTML=t)}},t.ZIndexHandler=class{update(e,t){this._value!=t&&(this._value=t,e.style.zIndex=t)}};class i{animationRestart(e){const t=e.getAnimations();for(let e=0;e<t.length;e++){const i=t[e];i&&(i.currentTime=0,i.play())}}update(e,t){t&&this.animationRestart(e)}}t.AnimationRestartHandler=i,t.AnimationRestartAllHandler=class extends i{animationRestartAll(e){for(let t=0;t<e.children.length;t++){const i=e.children[t];this.animationRestart(i),this.animationRestartAll(i)}}update(e,t){t&&(this.animationRestart(e),this.animationRestartAll(e))}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},9586:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=function(e,t,i){return e+(t-e)*i},t.relative=function(e,t,i){return(i-e)/(t-e)},t.limit=function(e,t,i){return e>i?e=i:e<t&&(e=t),e},t.linear=function(e,t,i,s,n){return s+(e-t)/(i-t)*(n-s)},t.pxToVh=1/9,t.vhToPx=9,t._pxToVh=function(e){return e/window.innerHeight*100},t._pxToVw=function(e){return e/window.innerWidth*100},t._vhToPx=function(e){return e*window.innerHeight/100},t._vwToPx=function(e){return e*window.innerWidth/100},t.getValueFromString=function(e){return+e.slice(0,e.length-2)},t._pxToVhHorizontal=function(e){return e/1600*window.innerWidth/window.innerHeight*100}}.apply(t,[i,t]),void 0===s||(e.exports=s)},3008:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(){this.removeAll=()=>{this.listeners=null},this.dispatch=(e=null)=>{const{listeners:t}=this;if(t)if(e)for(const i of t)i(e);else for(const e of t)e()}}add(e){const{listeners:t}=this;t?t.indexOf(e)<0&&t.push(e):(this.listeners=new Array,this.listeners.push(e))}remove(e){const{listeners:t}=this;if(t){const i=t.indexOf(e);i>=0&&t.splice(i,1)}}}t.Signal=i,t.SignalEnterFrame=class extends i{constructor(){super(...arguments),this.isActive=!1,this.removeAll=()=>{super.removeAll(),window.cancelAnimationFrame(this.idAnimation)},this.enterFrameDispatch=()=>{this.idAnimation=window.requestAnimationFrame(this.enterFrameDispatch),this.dispatch()}}add(e){super.add(e),this.isActive||(this.isActive=!0,this.enterFrameDispatch())}remove(e){super.remove(e),this.listeners.length<=0&&(window.cancelAnimationFrame(this.idAnimation),this.isActive=!1)}}}.apply(t,[i,t]),void 0===s||(e.exports=s)},4376:(e,t,i)=>{var s,n;s=[i,t,i(9586)],n=function(e,t,i){"use strict";function s(e){if(e.includes("<font")){let t="";if(e.includes("face=")){const i=e.slice(e.search("face=")+6,e.indexOf("'",e.search("face=")+7));e=e.replace(`face='${i}'`,""),"FontMedium"==i?t+="font-family: var(--font-medium); ":"FontLight"==i?t+="font-family: var(--font-light); ":"FontBold"==i?t+="font-family: var(--font-bold); ":"FontBlack"==i?t+="font-family: var(--font-black); ":"FontRegular"==i&&(t+="font-family: var(--font-regular); ")}if(e.includes("color=")){const i=e.slice(e.search("color=")+7,e.indexOf("'",e.search("color=")+8));e=e.replace(`color='${i}'`,""),t+=`color: ${i}; `}if(e.includes("size=")){let i=Number(e.slice(e.search("size=")+6,e.indexOf("'",e.search("size=")+7)));e=e.replace(`size='${i}'`,""),i/=9,t+=`font-size: ${i}vh; `}e=s(e=(e=t?e.replace("<font",'<span style="'+t+'"'):e.replace("<font","<span")).replace("</font>","</span>"))}return e}function n(e){if(e.includes("<img")){const t=e.indexOf("<img"),s=e.indexOf(">",t)-t+1;let n=e.substr(t,s),a=n,o="",r="",l="",h=0,d=0;n.includes("width=")&&(h=Number(n.slice(n.search("width=")+7,n.indexOf("'",n.search("width=")+8))),n=n.replace(`width='${h}'`,""),h*=i.pxToVh,r+=`width: ${h}vh; `),n.includes("height=")&&(d=Number(n.slice(n.search("height=")+8,n.indexOf("'",n.search("height=")+9))),n=n.replace(`height='${d}'`,""),d*=i.pxToVh,r+=`height: ${d}vh; `),n.includes("src=")&&(o=n.slice(n.search("src=")+5,n.indexOf("'",n.search("src=")+6)),n=n.replace(`src='${o}'`,""),o=o.replace("img://libs/ui","../.."),r+=`background-image: url('${o}'); `),n.includes("class=")?(l=n.slice(n.search("class=")+7,n.indexOf("'",n.search("class=")+8)),n=n.replace(`class='${l}'`,""),l+=" BackgroundImage "):l=" BackgroundImage ",n=n.replace("<img",`<div style="${r}" class="${l}"`),n+="</div>",e=e.replace(a,n)}return e}Object.defineProperty(t,"__esModule",{value:!0}),t.replaceUnsupportedTags=function(e){return e.includes("<")&&(e=function(e){const t=e.split("<img").length-1;for(let i=0;i<t;i++)e=n(e);return e}(e=function(e){return e.replace(new RegExp("<br>","g"),'<div class="Br"></div>')}(e=s(e)))),e},t.replaceHTMLSpecialChars=function(e){return(e=(e=(e=(e=e.replace("&","&amp;")).replace('"',"&quot;")).replace("'","&apos;")).replace("<","&lt;")).replace(">","&gt;")}}.apply(t,s),void 0===n||(e.exports=n)},3962:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isRunning=function(e){return e.time()/e.duration()!=1}}.apply(t,[i,t]),void 0===s||(e.exports=s)},6749:(e,t,i)=>{var s;s=function(e,t){"use strict";function i(e){const t=e.getAnimations();for(let e=0;e<t.length;e++){const i=t[e];i&&(i.currentTime=0,i.play())}}function s(e){const t=e.getAnimations();for(let e=0;e<t.length;e++){const i=t[e];i&&(i.currentTime=0,i.pause())}}Object.defineProperty(t,"__esModule",{value:!0}),t.log=console.log.bind(console),t.logObject=function(e){console.log(JSON.stringify(e))},t.removeChildren=function(e){let t;for(;t=e.lastChild;)e.removeChild(t)},t.loadText=function(e,t){const i=new XMLHttpRequest;i.onload=function(){t(i.responseText)},i.open("get",e,!0),i.send()},t.loadObject=function(e,t){const i=new XMLHttpRequest;i.onload=function(){t(JSON.parse(i.responseText))},i.open("get",e,!0),i.send()},t.getUrlParam=function(e,t){const i=location.search.split(e+"=")[1];return""!=i?i:t},t.removeChildrenControls=function(e){const t=e.childNodes;if(t.length>0)for(let e=0;e<t.length;e++){const i=t[e],s=i.control;s?(s.destroy(),t[e]=null,e--):i.childNodes.length>0&&this.removeChildrenControls(i)}},t.waitSeveralFrames=function e(t,i=3){return 0===i&&t?t():i>0&&(i--,window.requestAnimationFrame((()=>{e(t,i)}))),()=>{i=-1,t=null}},t.getChildIndex=function(e){return Array.prototype.indexOf.call(e.parentNode.childNodes,e)||0},t.restartAllAnimations=function e(t){i(t);for(let i=0;i<t.children.length;i++)e(t.children[i])},t.restartAnimations=i,t.stopAllAnimations=function e(t){s(t);for(let i=0;i<t.children.length;i++)e(t.children[i])},t.stopAnimations=s,t.capitalize=function(e){return"string"!=typeof e||0==e.length?"":e.charAt(0).toUpperCase()+e.slice(1)}}.apply(t,[i,t]),void 0===s||(e.exports=s)},8330:(e,t,i)=>{var s;s=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.engine=window.engine}.apply(t,[i,t]),void 0===s||(e.exports=s)},5957:(e,t,i)=>{"use strict";i.d(t,{ML:()=>s,li:()=>a,ZP:()=>n,MQ:()=>r,fw:()=>l,SX:()=>h,bJ:()=>d,qD:()=>c,EA:()=>u,Lp:()=>p,Aq:()=>m,Yp:()=>g,VN:()=>_}),e=i.hmd(e);var s="undefined"!=typeof window?window:e.exports&&void 0!==i.g?i.g:{},n=function(e){var t={},i=e.document,s=e.GreenSockGlobals=e.GreenSockGlobals||e;if(s.TweenLite)return s.TweenLite;var n,a,o,r,l,h,d,c=function(e){var t,i=e.split("."),n=s;for(t=0;t<i.length;t++)n[i[t]]=n=n[i[t]]||{};return n},u=c("com.greensock"),p=1e-8,m=function(e){var t,i=[],s=e.length;for(t=0;t!==s;i.push(e[t++]));return i},g=function(){},_=(h=Object.prototype.toString,d=h.call([]),function(e){return null!=e&&(e instanceof Array||"object"==typeof e&&!!e.push&&h.call(e)===d)}),f={},v=function(e,i,n,a){this.sc=f[e]?f[e].sc:[],f[e]=this,this.gsClass=null,this.func=n;var o=[];this.check=function(r){for(var l,h,d,u,p=i.length,m=p;--p>-1;)(l=f[i[p]]||new v(i[p],[])).gsClass?(o[p]=l.gsClass,m--):r&&l.sc.push(this);if(0===m&&n)for(d=(h=("com.greensock."+e).split(".")).pop(),u=c(h.join("."))[d]=this.gsClass=n.apply(n,o),a&&(s[d]=t[d]=u),p=0;p<this.sc.length;p++)this.sc[p].check()},this.check(!0)},y=e._gsDefine=function(e,t,i,s){return new v(e,t,i,s)},b=u._class=function(e,t,i){return t=t||function(){},y(e,[],(function(){return t}),i),t};y.globals=s;var w=[0,0,1,1],x=b("easing.Ease",(function(e,t,i,s){this._func=e,this._type=i||0,this._power=s||0,this._params=t?w.concat(t):w}),!0),C=x.map={},M=x.register=function(e,t,i,s){for(var n,a,o,r,l=t.split(","),h=l.length,d=(i||"easeIn,easeOut,easeInOut").split(",");--h>-1;)for(a=l[h],n=s?b("easing."+a,null,!0):u.easing[a]||{},o=d.length;--o>-1;)r=d[o],C[a+"."+r]=C[r+a]=n[r]=e.getRatio?e:e[r]||new e};for((o=x.prototype)._calcEnd=!1,o.getRatio=function(e){if(this._func)return this._params[0]=e,this._func.apply(null,this._params);var t=this._type,i=this._power,s=1===t?1-e:2===t?e:e<.5?2*e:2*(1-e);return 1===i?s*=s:2===i?s*=s*s:3===i?s*=s*s*s:4===i&&(s*=s*s*s*s),1===t?1-s:2===t?s:e<.5?s/2:1-s/2},a=(n=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;--a>-1;)o=n[a]+",Power"+a,M(new x(null,null,1,a),o,"easeOut",!0),M(new x(null,null,2,a),o,"easeIn"+(0===a?",easeNone":"")),M(new x(null,null,3,a),o,"easeInOut");C.linear=u.easing.Linear.easeIn,C.swing=u.easing.Quad.easeInOut;var I=b("events.EventDispatcher",(function(e){this._listeners={},this._eventTarget=e||this}));(o=I.prototype).addEventListener=function(e,t,i,s,n){n=n||0;var a,o,h=this._listeners[e],d=0;for(this!==r||l||r.wake(),null==h&&(this._listeners[e]=h=[]),o=h.length;--o>-1;)(a=h[o]).c===t&&a.s===i?h.splice(o,1):0===d&&a.pr<n&&(d=o+1);h.splice(d,0,{c:t,s:i,up:s,pr:n})},o.removeEventListener=function(e,t){var i,s=this._listeners[e];if(s)for(i=s.length;--i>-1;)if(s[i].c===t)return void s.splice(i,1)},o.dispatchEvent=function(e){var t,i,s,n=this._listeners[e];if(n)for((t=n.length)>1&&(n=n.slice(0)),i=this._eventTarget;--t>-1;)(s=n[t])&&(s.up?s.c.call(s.s||i,{type:e,target:i}):s.c.call(s.s||i))};var T=e.requestAnimationFrame,P=e.cancelAnimationFrame,E=Date.now||function(){return(new Date).getTime()},k=E();for(a=(n=["ms","moz","webkit","o"]).length;--a>-1&&!T;)T=e[n[a]+"RequestAnimationFrame"],P=e[n[a]+"CancelAnimationFrame"]||e[n[a]+"CancelRequestAnimationFrame"];b("Ticker",(function(e,t){var s,n,a,o,h,d=this,c=E(),u=!(!1===t||!T)&&"auto",p=500,m=33,_=function(e){var t,i,r=E()-k;r>p&&(c+=r-m),k+=r,d.time=(k-c)/1e3,t=d.time-h,(!s||t>0||!0===e)&&(d.frame++,h+=t+(t>=o?.004:o-t),i=!0),!0!==e&&(a=n(_)),i&&d.dispatchEvent("tick")};I.call(d),d.time=d.frame=0,d.tick=function(){_(!0)},d.lagSmoothing=function(e,t){if(!arguments.length)return p<1e8;p=e||1e8,m=Math.min(t,p,0)},d.sleep=function(){null!=a&&(u&&P?P(a):clearTimeout(a),n=g,a=null,d===r&&(l=!1))},d.wake=function(e){null!==a?d.sleep():e?c+=-k+(k=E()):d.frame>10&&(k=E()-p+5),n=0===s?g:u&&T?T:function(e){return setTimeout(e,1e3*(h-d.time)+1|0)},d===r&&(l=!0),_(2)},d.fps=function(e){if(!arguments.length)return s;o=1/((s=e)||60),h=this.time+o,d.wake()},d.useRAF=function(e){if(!arguments.length)return u;d.sleep(),u=e,d.fps(s)},d.fps(e),setTimeout((function(){"auto"===u&&d.frame<5&&"hidden"!==(i||{}).visibilityState&&d.useRAF(!1)}),1500)})),(o=u.Ticker.prototype=new u.events.EventDispatcher).constructor=u.Ticker;var L=b("core.Animation",(function(e,t){if(this.vars=t=t||{},this._duration=this._totalDuration=e||0,this._delay=Number(t.delay)||0,this._timeScale=1,this._active=!!t.immediateRender,this.data=t.data,this._reversed=!!t.reversed,Z){l||r.wake();var i=this.vars.useFrames?Y:Z;i.add(this,i._time),this.vars.paused&&this.paused(!0)}}));r=L.ticker=new u.Ticker,(o=L.prototype)._dirty=o._gc=o._initted=o._paused=!1,o._totalTime=o._time=0,o._rawPrevTime=-1,o._next=o._last=o._onUpdate=o._timeline=o.timeline=null,o._paused=!1;var A=function(){l&&E()-k>2e3&&("hidden"!==(i||{}).visibilityState||!r.lagSmoothing())&&r.wake();var e=setTimeout(A,2e3);e.unref&&e.unref()};A(),o.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},o.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},o.resume=function(e,t){return null!=e&&this.seek(e,t),this.paused(!1)},o.seek=function(e,t){return this.totalTime(Number(e),!1!==t)},o.restart=function(e,t){return this.reversed(!1).paused(!1).totalTime(e?-this._delay:0,!1!==t,!0)},o.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},o.render=function(e,t,i){},o.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},o.isActive=function(){var e,t=this._timeline,i=this._startTime;return!t||!this._gc&&!this._paused&&t.isActive()&&(e=t.rawTime(!0))>=i&&e<i+this.totalDuration()/this._timeScale-p},o._enabled=function(e,t){return l||r.wake(),this._gc=!e,this._active=this.isActive(),!0!==t&&(e&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!e&&this.timeline&&this._timeline._remove(this,!0)),!1},o._kill=function(e,t){return this._enabled(!1,!1)},o.kill=function(e,t){return this._kill(e,t),this},o._uncache=function(e){for(var t=e?this:this.timeline;t;)t._dirty=!0,t=t.timeline;return this},o._swapSelfInParams=function(e){for(var t=e.length,i=e.concat();--t>-1;)"{self}"===e[t]&&(i[t]=this);return i},o._callback=function(e){var t=this.vars,i=t[e],s=t[e+"Params"],n=t[e+"Scope"]||t.callbackScope||this;switch(s?s.length:0){case 0:i.call(n);break;case 1:i.call(n,s[0]);break;case 2:i.call(n,s[0],s[1]);break;default:i.apply(n,s)}},o.eventCallback=function(e,t,i,s){if("on"===(e||"").substr(0,2)){var n=this.vars;if(1===arguments.length)return n[e];null==t?delete n[e]:(n[e]=t,n[e+"Params"]=_(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,n[e+"Scope"]=s),"onUpdate"===e&&(this._onUpdate=t)}return this},o.delay=function(e){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+e-this._delay),this._delay=e,this):this._delay},o.duration=function(e){return arguments.length?(this._duration=this._totalDuration=e,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==e&&this.totalTime(this._totalTime*(e/this._duration),!0),this):(this._dirty=!1,this._duration)},o.totalDuration=function(e){return this._dirty=!1,arguments.length?this.duration(e):this._totalDuration},o.time=function(e,t){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(e>this._duration?this._duration:e,t)):this._time},o.totalTime=function(e,t,i){if(l||r.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(e<0&&!i&&(e+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var s=this._totalDuration,n=this._timeline;if(e>s&&!i&&(e=s),this._startTime=(this._paused?this._pauseTime:n._time)-(this._reversed?s-e:e)/this._timeScale,n._dirty||this._uncache(!1),n._timeline)for(;n._timeline;)n._timeline._time!==(n._startTime+n._totalTime)/n._timeScale&&n.totalTime(n._totalTime,!0),n=n._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===e&&0!==this._duration||(N.length&&J(),this.render(e,t,!1),N.length&&J())}return this},o.progress=o.totalProgress=function(e,t){var i=this.duration();return arguments.length?this.totalTime(i*e,t):i?this._time/i:this.ratio},o.startTime=function(e){return arguments.length?(e!==this._startTime&&(this._startTime=e,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,e-this._delay)),this):this._startTime},o.endTime=function(e){return this._startTime+(0!=e?this.totalDuration():this.duration())/this._timeScale},o.timeScale=function(e){if(!arguments.length)return this._timeScale;var t,i;for(e=e||p,this._timeline&&this._timeline.smoothChildTiming&&(i=(t=this._pauseTime)||0===t?t:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/e),this._timeScale=e,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},o.reversed=function(e){return arguments.length?(e!=this._reversed&&(this._reversed=e,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},o.paused=function(e){if(!arguments.length)return this._paused;var t,i,s=this._timeline;return e!=this._paused&&s&&(l||e||r.wake(),i=(t=s.rawTime())-this._pauseTime,!e&&s.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=e?t:null,this._paused=e,this._active=this.isActive(),!e&&0!==i&&this._initted&&this.duration()&&(t=s.smoothChildTiming?this._totalTime:(t-this._startTime)/this._timeScale,this.render(t,t===this._totalTime,!0))),this._gc&&!e&&this._enabled(!0,!1),this};var S=b("core.SimpleTimeline",(function(e){L.call(this,0,e),this.autoRemoveChildren=this.smoothChildTiming=!0}));(o=S.prototype=new L).constructor=S,o.kill()._gc=!1,o._first=o._last=o._recent=null,o._sortChildren=!1,o.add=o.insert=function(e,t,i,s){var n,a;if(e._startTime=Number(t||0)+e._delay,e._paused&&this!==e._timeline&&(e._pauseTime=this.rawTime()-(e._timeline.rawTime()-e._pauseTime)),e.timeline&&e.timeline._remove(e,!0),e.timeline=e._timeline=this,e._gc&&e._enabled(!0,!0),n=this._last,this._sortChildren)for(a=e._startTime;n&&n._startTime>a;)n=n._prev;return n?(e._next=n._next,n._next=e):(e._next=this._first,this._first=e),e._next?e._next._prev=e:this._last=e,e._prev=n,this._recent=e,this._timeline&&this._uncache(!0),this},o._remove=function(e,t){return e.timeline===this&&(t||e._enabled(!1,!0),e._prev?e._prev._next=e._next:this._first===e&&(this._first=e._next),e._next?e._next._prev=e._prev:this._last===e&&(this._last=e._prev),e._next=e._prev=e.timeline=null,e===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},o.render=function(e,t,i){var s,n=this._first;for(this._totalTime=this._time=this._rawPrevTime=e;n;)s=n._next,(n._active||e>=n._startTime&&!n._paused&&!n._gc)&&(n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(e-n._startTime)*n._timeScale,t,i):n.render((e-n._startTime)*n._timeScale,t,i)),n=s},o.rawTime=function(){return l||r.wake(),this._totalTime};var D=b("TweenLite",(function(t,i,s){if(L.call(this,i,s),this.render=D.prototype.render,null==t)throw"Cannot tween a null target.";this.target=t="string"!=typeof t?t:D.selector(t)||t;var n,a,o,r=t.jquery||t.length&&t!==e&&t[0]&&(t[0]===e||t[0].nodeType&&t[0].style&&!t.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?q[D.defaultOverwrite]:"number"==typeof l?l>>0:q[l],(r||t instanceof Array||t.push&&_(t))&&"number"!=typeof t[0])for(this._targets=o=m(t),this._propLookup=[],this._siblings=[],n=0;n<o.length;n++)(a=o[n])?"string"!=typeof a?a.length&&a!==e&&a[0]&&(a[0]===e||a[0].nodeType&&a[0].style&&!a.nodeType)?(o.splice(n--,1),this._targets=o=o.concat(m(a))):(this._siblings[n]=Q(a,this,!1),1===l&&this._siblings[n].length>1&&te(a,this,null,1,this._siblings[n])):"string"==typeof(a=o[n--]=D.selector(a))&&o.splice(n+1,1):o.splice(n--,1);else this._propLookup={},this._siblings=Q(t,this,!1),1===l&&this._siblings.length>1&&te(t,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-1e-8,this.render(Math.min(0,-this._delay)))}),!0),R=function(t){return t&&t.length&&t!==e&&t[0]&&(t[0]===e||t[0].nodeType&&t[0].style&&!t.nodeType)};(o=D.prototype=new L).constructor=D,o.kill()._gc=!1,o.ratio=0,o._firstPT=o._targets=o._overwrittenProps=o._startAt=null,o._notifyPluginsOfEnabled=o._lazy=!1,D.version="2.1.3",D.defaultEase=o._ease=new x(null,null,1,1),D.defaultOverwrite="auto",D.ticker=r,D.autoSleep=120,D.lagSmoothing=function(e,t){r.lagSmoothing(e,t)},D.selector=e.$||e.jQuery||function(t){var s=e.$||e.jQuery;return s?(D.selector=s,s(t)):(i||(i=e.document),i?i.querySelectorAll?i.querySelectorAll(t):i.getElementById("#"===t.charAt(0)?t.substr(1):t):t)};var N=[],B={},O=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,F=/[\+-]=-?[\.\d]/,V=function(e){for(var t,i=this._firstPT,s=1e-6;i;)t=i.blob?1===e&&null!=this.end?this.end:e?this.join(""):this.start:i.c*e+i.s,i.m?t=i.m.call(this._tween,t,this._target||i.t,this._tween):t<s&&t>-s&&!i.blob&&(t=0),i.f?i.fp?i.t[i.p](i.fp,t):i.t[i.p](t):i.t[i.p]=t,i=i._next},$=function(e){return(1e3*e|0)/1e3+""},H=function(e,t,i,s){var n,a,o,r,l,h,d,c=[],u=0,p="",m=0;for(c.start=e,c.end=t,e=c[0]=e+"",t=c[1]=t+"",i&&(i(c),e=c[0],t=c[1]),c.length=0,n=e.match(O)||[],a=t.match(O)||[],s&&(s._next=null,s.blob=1,c._firstPT=c._applyPT=s),l=a.length,r=0;r<l;r++)d=a[r],p+=(h=t.substr(u,t.indexOf(d,u)-u))||!r?h:",",u+=h.length,m?m=(m+1)%5:"rgba("===h.substr(-5)&&(m=1),d===n[r]||n.length<=r?p+=d:(p&&(c.push(p),p=""),o=parseFloat(n[r]),c.push(o),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:o,c:("="===d.charAt(1)?parseInt(d.charAt(0)+"1",10)*parseFloat(d.substr(2)):parseFloat(d)-o)||0,f:0,m:m&&m<4?Math.round:$}),u+=d.length;return(p+=t.substr(u))&&c.push(p),c.setRatio=V,F.test(t)&&(c.end=null),c},W=function(e,t,i,s,n,a,o,r,l){"function"==typeof s&&(s=s(l||0,e));var h=typeof e[t],d="function"!==h?"":t.indexOf("set")||"function"!=typeof e["get"+t.substr(3)]?t:"get"+t.substr(3),c="get"!==i?i:d?o?e[d](o):e[d]():e[t],u="string"==typeof s&&"="===s.charAt(1),p={t:e,p:t,s:c,f:"function"===h,pg:0,n:n||t,m:a?"function"==typeof a?a:Math.round:0,pr:0,c:u?parseInt(s.charAt(0)+"1",10)*parseFloat(s.substr(2)):parseFloat(s)-c||0};if(("number"!=typeof c||"number"!=typeof s&&!u)&&(o||isNaN(c)||!u&&isNaN(s)||"boolean"==typeof c||"boolean"==typeof s?(p.fp=o,p={t:H(c,u?parseFloat(p.s)+p.c+(p.s+"").replace(/[0-9\-\.]/g,""):s,r||D.defaultStringFilter,p),p:"setRatio",s:0,c:1,f:2,pg:0,n:n||t,pr:0,m:0}):(p.s=parseFloat(c),u||(p.c=parseFloat(s)-p.s||0))),p.c)return(p._next=this._firstPT)&&(p._next._prev=p),this._firstPT=p,p},z=D._internals={isArray:_,isSelector:R,lazyTweens:N,blobDif:H},U=D._plugins={},j=z.tweenLookup={},X=0,G=z.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1,stagger:1},q={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},Y=L._rootFramesTimeline=new S,Z=L._rootTimeline=new S,K=30,J=z.lazyRender=function(){var e,t,i=N.length;for(B={},e=0;e<i;e++)(t=N[e])&&!1!==t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);N.length=0};Z._startTime=r.time,Y._startTime=r.frame,Z._active=Y._active=!0,setTimeout(J,1),L._updateRoot=D.render=function(){var e,t,i;if(N.length&&J(),Z.render((r.time-Z._startTime)*Z._timeScale,!1,!1),Y.render((r.frame-Y._startTime)*Y._timeScale,!1,!1),N.length&&J(),r.frame>=K){for(i in K=r.frame+(parseInt(D.autoSleep,10)||120),j){for(e=(t=j[i].tweens).length;--e>-1;)t[e]._gc&&t.splice(e,1);0===t.length&&delete j[i]}if((!(i=Z._first)||i._paused)&&D.autoSleep&&!Y._first&&1===r._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||r.sleep()}}},r.addEventListener("tick",L._updateRoot);var Q=function(e,t,i){var s,n,a=e._gsTweenID;if(j[a||(e._gsTweenID=a="t"+X++)]||(j[a]={target:e,tweens:[]}),t&&((s=j[a].tweens)[n=s.length]=t,i))for(;--n>-1;)s[n]===t&&s.splice(n,1);return j[a].tweens},ee=function(e,t,i,s){var n,a,o=e.vars.onOverwrite;return o&&(n=o(e,t,i,s)),(o=D.onOverwrite)&&(a=o(e,t,i,s)),!1!==n&&!1!==a},te=function(e,t,i,s,n){var a,o,r,l;if(1===s||s>=4){for(l=n.length,a=0;a<l;a++)if((r=n[a])!==t)r._gc||r._kill(null,e,t)&&(o=!0);else if(5===s)break;return o}var h,d=t._startTime+p,c=[],u=0,m=0===t._duration;for(a=n.length;--a>-1;)(r=n[a])===t||r._gc||r._paused||(r._timeline!==t._timeline?(h=h||ie(t,0,m),0===ie(r,h,m)&&(c[u++]=r)):r._startTime<=d&&r._startTime+r.totalDuration()/r._timeScale>d&&((m||!r._initted)&&d-r._startTime<=2e-8||(c[u++]=r)));for(a=u;--a>-1;)if(l=(r=c[a])._firstPT,2===s&&r._kill(i,e,t)&&(o=!0),2!==s||!r._firstPT&&r._initted&&l){if(2!==s&&!ee(r,t))continue;r._enabled(!1,!1)&&(o=!0)}return o},ie=function(e,t,i){for(var s=e._timeline,n=s._timeScale,a=e._startTime;s._timeline;){if(a+=s._startTime,n*=s._timeScale,s._paused)return-100;s=s._timeline}return(a/=n)>t?a-t:i&&a===t||!e._initted&&a-t<2e-8?p:(a+=e.totalDuration()/e._timeScale/n)>t+p?0:a-t-p};o._init=function(){var e,t,i,s,n,a,o=this.vars,r=this._overwrittenProps,l=this._duration,h=!!o.immediateRender,d=o.ease,c=this._startAt;if(o.startAt){for(s in c&&(c.render(-1,!0),c.kill()),n={},o.startAt)n[s]=o.startAt[s];if(n.data="isStart",n.overwrite=!1,n.immediateRender=!0,n.lazy=h&&!1!==o.lazy,n.startAt=n.delay=null,n.onUpdate=o.onUpdate,n.onUpdateParams=o.onUpdateParams,n.onUpdateScope=o.onUpdateScope||o.callbackScope||this,this._startAt=D.to(this.target||{},0,n),h)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(o.runBackwards&&0!==l)if(c)c.render(-1,!0),c.kill(),this._startAt=null;else{for(s in 0!==this._time&&(h=!1),i={},o)G[s]&&"autoCSS"!==s||(i[s]=o[s]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&!1!==o.lazy,i.immediateRender=h,this._startAt=D.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=d=d?d instanceof x?d:"function"==typeof d?new x(d,o.easeParams):C[d]||D.defaultEase:D.defaultEase,o.easeParams instanceof Array&&d.config&&(this._ease=d.config.apply(d,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(a=this._targets.length,e=0;e<a;e++)this._initProps(this._targets[e],this._propLookup[e]={},this._siblings[e],r?r[e]:null,e)&&(t=!0);else t=this._initProps(this.target,this._propLookup,this._siblings,r,0);if(t&&D._onPluginEvent("_onInitAllProps",this),r&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},o._initProps=function(t,i,s,n,a){var o,r,l,h,d,c;if(null==t)return!1;for(o in B[t._gsTweenID]&&J(),this.vars.css||t.style&&t!==e&&t.nodeType&&U.css&&!1!==this.vars.autoCSS&&function(e,t){var i,s={};for(i in e)G[i]||i in t&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!U[i]||U[i]&&U[i]._autoCSS)||(s[i]=e[i],delete e[i]);e.css=s}(this.vars,t),this.vars)if(c=this.vars[o],G[o])c&&(c instanceof Array||c.push&&_(c))&&-1!==c.join("").indexOf("{self}")&&(this.vars[o]=c=this._swapSelfInParams(c,this));else if(U[o]&&(h=new U[o])._onInitTween(t,this.vars[o],this,a)){for(this._firstPT=d={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:h._priority,m:0},r=h._overwriteProps.length;--r>-1;)i[h._overwriteProps[r]]=this._firstPT;(h._priority||h._onInitAllProps)&&(l=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0),d._next&&(d._next._prev=d)}else i[o]=W.call(this,t,o,"get",c,o,0,null,this.vars.stringFilter,a);return n&&this._kill(n,t)?this._initProps(t,i,s,n,a):this._overwrite>1&&this._firstPT&&s.length>1&&te(t,this,i,this._overwrite,s)?(this._kill(i,t),this._initProps(t,i,s,n,a)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(B[t._gsTweenID]=!0),l)},o.render=function(e,t,i){var s,n,a,o,r=this,l=r._time,h=r._duration,d=r._rawPrevTime;if(e>=h-p&&e>=0)r._totalTime=r._time=h,r.ratio=r._ease._calcEnd?r._ease.getRatio(1):1,r._reversed||(s=!0,n="onComplete",i=i||r._timeline.autoRemoveChildren),0===h&&(r._initted||!r.vars.lazy||i)&&(r._startTime===r._timeline._duration&&(e=0),(d<0||e<=0&&e>=-1e-8||d===p&&"isPause"!==r.data)&&d!==e&&(i=!0,d>p&&(n="onReverseComplete")),r._rawPrevTime=o=!t||e||d===e?e:p);else if(e<p)r._totalTime=r._time=0,r.ratio=r._ease._calcEnd?r._ease.getRatio(0):0,(0!==l||0===h&&d>0)&&(n="onReverseComplete",s=r._reversed),e>-1e-8?e=0:e<0&&(r._active=!1,0===h&&(r._initted||!r.vars.lazy||i)&&(d>=0&&(d!==p||"isPause"!==r.data)&&(i=!0),r._rawPrevTime=o=!t||e||d===e?e:p)),(!r._initted||r._startAt&&r._startAt.progress())&&(i=!0);else if(r._totalTime=r._time=e,r._easeType){var c=e/h,u=r._easeType,m=r._easePower;(1===u||3===u&&c>=.5)&&(c=1-c),3===u&&(c*=2),1===m?c*=c:2===m?c*=c*c:3===m?c*=c*c*c:4===m&&(c*=c*c*c*c),r.ratio=1===u?1-c:2===u?c:e/h<.5?c/2:1-c/2}else r.ratio=r._ease.getRatio(e/h);if(r._time!==l||i){if(!r._initted){if(r._init(),!r._initted||r._gc)return;if(!i&&r._firstPT&&(!1!==r.vars.lazy&&r._duration||r.vars.lazy&&!r._duration))return r._time=r._totalTime=l,r._rawPrevTime=d,N.push(r),void(r._lazy=[e,t]);r._time&&!s?r.ratio=r._ease.getRatio(r._time/h):s&&r._ease._calcEnd&&(r.ratio=r._ease.getRatio(0===r._time?0:1))}for(!1!==r._lazy&&(r._lazy=!1),r._active||!r._paused&&r._time!==l&&e>=0&&(r._active=!0),0===l&&(r._startAt&&(e>=0?r._startAt.render(e,!0,i):n||(n="_dummyGS")),r.vars.onStart&&(0===r._time&&0!==h||t||r._callback("onStart"))),a=r._firstPT;a;)a.f?a.t[a.p](a.c*r.ratio+a.s):a.t[a.p]=a.c*r.ratio+a.s,a=a._next;r._onUpdate&&(e<0&&r._startAt&&-1e-4!==e&&r._startAt.render(e,!0,i),t||(r._time!==l||s||i)&&r._callback("onUpdate")),n&&(r._gc&&!i||(e<0&&r._startAt&&!r._onUpdate&&-1e-4!==e&&r._startAt.render(e,!0,i),s&&(r._timeline.autoRemoveChildren&&r._enabled(!1,!1),r._active=!1),!t&&r.vars[n]&&r._callback(n),0===h&&r._rawPrevTime===p&&o!==p&&(r._rawPrevTime=0)))}},o._kill=function(e,t,i){if("all"===e&&(e=null),null==e&&(null==t||t===this.target))return this._lazy=!1,this._enabled(!1,!1);t="string"!=typeof t?t||this._targets||this.target:D.selector(t)||t;var s,n,a,o,r,l,h,d,c,u=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline,p=this._firstPT;if((_(t)||R(t))&&"number"!=typeof t[0])for(s=t.length;--s>-1;)this._kill(e,t[s],i)&&(l=!0);else{if(this._targets){for(s=this._targets.length;--s>-1;)if(t===this._targets[s]){r=this._propLookup[s]||{},this._overwrittenProps=this._overwrittenProps||[],n=this._overwrittenProps[s]=e?this._overwrittenProps[s]||{}:"all";break}}else{if(t!==this.target)return!1;r=this._propLookup,n=this._overwrittenProps=e?this._overwrittenProps||{}:"all"}if(r){if(h=e||r,d=e!==n&&"all"!==n&&e!==r&&("object"!=typeof e||!e._tempKill),i&&(D.onOverwrite||this.vars.onOverwrite)){for(a in h)r[a]&&(c||(c=[]),c.push(a));if((c||!e)&&!ee(this,i,t,c))return!1}for(a in h)(o=r[a])&&(u&&(o.f?o.t[o.p](o.s):o.t[o.p]=o.s,l=!0),o.pg&&o.t._kill(h)&&(l=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete r[a]),d&&(n[a]=1);!this._firstPT&&this._initted&&p&&this._enabled(!1,!1)}}return l},o.invalidate=function(){this._notifyPluginsOfEnabled&&D._onPluginEvent("_onDisable",this);var e=this._time;return this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],L.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-1e-8,this.render(e,!1,!1!==this.vars.lazy)),this},o._enabled=function(e,t){if(l||r.wake(),e&&this._gc){var i,s=this._targets;if(s)for(i=s.length;--i>-1;)this._siblings[i]=Q(s[i],this,!0);else this._siblings=Q(this.target,this,!0)}return L.prototype._enabled.call(this,e,t),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&D._onPluginEvent(e?"_onEnable":"_onDisable",this)},D.to=function(e,t,i){return new D(e,t,i)},D.from=function(e,t,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new D(e,t,i)},D.fromTo=function(e,t,i,s){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,new D(e,t,s)},D.delayedCall=function(e,t,i,s,n){return new D(t,0,{delay:e,onComplete:t,onCompleteParams:i,callbackScope:s,onReverseComplete:t,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:n,overwrite:0})},D.set=function(e,t){return new D(e,0,t)},D.getTweensOf=function(e,t){if(null==e)return[];var i,s,n,a;if(e="string"!=typeof e?e:D.selector(e)||e,(_(e)||R(e))&&"number"!=typeof e[0]){for(i=e.length,s=[];--i>-1;)s=s.concat(D.getTweensOf(e[i],t));for(i=s.length;--i>-1;)for(a=s[i],n=i;--n>-1;)a===s[n]&&s.splice(i,1)}else if(e._gsTweenID)for(i=(s=Q(e).concat()).length;--i>-1;)(s[i]._gc||t&&!s[i].isActive())&&s.splice(i,1);return s||[]},D.killTweensOf=D.killDelayedCallsTo=function(e,t,i){"object"==typeof t&&(i=t,t=!1);for(var s=D.getTweensOf(e,t),n=s.length;--n>-1;)s[n]._kill(i,e)};var se=b("plugins.TweenPlugin",(function(e,t){this._overwriteProps=(e||"").split(","),this._propName=this._overwriteProps[0],this._priority=t||0,this._super=se.prototype}),!0);if(o=se.prototype,se.version="1.19.0",se.API=2,o._firstPT=null,o._addTween=W,o.setRatio=V,o._kill=function(e){var t,i=this._overwriteProps,s=this._firstPT;if(null!=e[this._propName])this._overwriteProps=[];else for(t=i.length;--t>-1;)null!=e[i[t]]&&i.splice(t,1);for(;s;)null!=e[s.n]&&(s._next&&(s._next._prev=s._prev),s._prev?(s._prev._next=s._next,s._prev=null):this._firstPT===s&&(this._firstPT=s._next)),s=s._next;return!1},o._mod=o._roundProps=function(e){for(var t,i=this._firstPT;i;)(t=e[this._propName]||null!=i.n&&e[i.n.split(this._propName+"_").join("")])&&"function"==typeof t&&(2===i.f?i.t._applyPT.m=t:i.m=t),i=i._next},D._onPluginEvent=function(e,t){var i,s,n,a,o,r=t._firstPT;if("_onInitAllProps"===e){for(;r;){for(o=r._next,s=n;s&&s.pr>r.pr;)s=s._next;(r._prev=s?s._prev:a)?r._prev._next=r:n=r,(r._next=s)?s._prev=r:a=r,r=o}r=t._firstPT=n}for(;r;)r.pg&&"function"==typeof r.t[e]&&r.t[e]()&&(i=!0),r=r._next;return i},se.activate=function(e){for(var t=e.length;--t>-1;)e[t].API===se.API&&(U[(new e[t])._propName]=e[t]);return!0},y.plugin=function(e){if(!(e&&e.propName&&e.init&&e.API))throw"illegal plugin definition.";var t,i=e.propName,s=e.priority||0,n=e.overwriteProps,a={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},o=b("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",(function(){se.call(this,i,s),this._overwriteProps=n||[]}),!0===e.global),r=o.prototype=new se(i);for(t in r.constructor=o,o.API=e.API,a)"function"==typeof e[t]&&(r[a[t]]=e[t]);return o.version=e.version,se.activate([o]),o},n=e._gsQueue){for(a=0;a<n.length;a++)n[a]();for(o in f)f[o].func||e.console.log("GSAP encountered missing dependency: "+o)}return l=!1,D}(s),a=s.GreenSockGlobals,o=a.com.greensock,r=o.core.SimpleTimeline,l=o.core.Animation,h=a.Ease,d=a.Linear,c=d,u=a.Power1,p=a.Power2,m=a.Power3,g=a.Power4,_=a.TweenPlugin;o.events.EventDispatcher},8674:(e,t,i)=>{"use strict";i.r(t),i.d(t,{AttrPlugin:()=>l,Back:()=>E,BezierPlugin:()=>T,Bounce:()=>L,CSSPlugin:()=>r,Circ:()=>R,DirectionalRotationPlugin:()=>p,Ease:()=>s.SX,Elastic:()=>k,Expo:()=>N,ExpoScaleEase:()=>O,Linear:()=>s.bJ,Power0:()=>s.qD,Power1:()=>s.EA,Power2:()=>s.Lp,Power3:()=>s.Aq,Power4:()=>s.Yp,RoughEase:()=>A,RoundPropsPlugin:()=>h,Sine:()=>B,SlowMo:()=>S,SteppedEase:()=>D,TimelineLite:()=>n,TimelineMax:()=>a,TweenLite:()=>s.ZP,TweenMax:()=>F,TweenPlugin:()=>s.VN,_gsScope:()=>s.ML,default:()=>F});var s=i(5957);s.ML._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],(function(){var e=function(e){s.MQ.call(this,e);var t,i,n=this,a=n.vars;for(i in n._labels={},n.autoRemoveChildren=!!a.autoRemoveChildren,n.smoothChildTiming=!!a.smoothChildTiming,n._sortChildren=!0,n._onUpdate=a.onUpdate,a)t=a[i],o(t)&&-1!==t.join("").indexOf("{self}")&&(a[i]=n._swapSelfInParams(t));o(a.tweens)&&n.add(a.tweens,0,a.align,a.stagger)},t=1e-8,i=s.ZP._internals,n=e._internals={},a=i.isSelector,o=i.isArray,r=i.lazyTweens,l=i.lazyRender,h=s.ML._gsDefine.globals,d=function(e){var t,i={};for(t in e)i[t]=e[t];return i},c=function(e,t,i){var s,n,a=e.cycle;for(s in a)n=a[s],e[s]="function"==typeof n?n(i,t[i],t):n[i%n.length];delete e.cycle},u=n.pauseCallback=function(){},p=function(e,t,i,s){var n="immediateRender";return n in t||(t[n]=!(i&&!1===i[n]||s)),t},m=function(e){if("function"==typeof e)return e;var t="object"==typeof e?e:{each:e},i=t.ease,s=t.from||0,n=t.base||0,a={},o=isNaN(s),r=t.axis,l={center:.5,end:1}[s]||0;return function(e,h,d){var c,u,p,m,g,_,f,v,y,b=(d||t).length,w=a[b];if(!w){if(!(y="auto"===t.grid?0:(t.grid||[1/0])[0])){for(f=-1/0;f<(f=d[y++].getBoundingClientRect().left)&&y<b;);y--}for(w=a[b]=[],c=o?Math.min(y,b)*l-.5:s%y,u=o?b*l/y-.5:s/y|0,f=0,v=1/0,_=0;_<b;_++)p=_%y-c,m=u-(_/y|0),w[_]=g=r?Math.abs("y"===r?m:p):Math.sqrt(p*p+m*m),g>f&&(f=g),g<v&&(v=g);w.max=f-v,w.min=v,w.v=b=t.amount||t.each*(y>b?b-1:r?"y"===r?b/y:y:Math.max(y,b/y))||0,w.b=b<0?n-b:n}return b=(w[e]-w.min)/w.max,w.b+(i?i.getRatio(b):b)*w.v}},g=e.prototype=new s.MQ;return e.version="2.1.3",e.distribute=m,g.constructor=e,g.kill()._gc=g._forcingPlayhead=g._hasPause=!1,g.to=function(e,t,i,n){var a=i.repeat&&h.TweenMax||s.ZP;return t?this.add(new a(e,t,i),n):this.set(e,i,n)},g.from=function(e,t,i,n){return this.add((i.repeat&&h.TweenMax||s.ZP).from(e,t,p(0,i)),n)},g.fromTo=function(e,t,i,n,a){var o=n.repeat&&h.TweenMax||s.ZP;return n=p(0,n,i),t?this.add(o.fromTo(e,t,i,n),a):this.set(e,n,a)},g.staggerTo=function(t,i,n,o,r,l,h,u){var p,g,_=new e({onComplete:l,onCompleteParams:h,callbackScope:u,smoothChildTiming:this.smoothChildTiming}),f=m(n.stagger||o),v=n.startAt,y=n.cycle;for("string"==typeof t&&(t=s.ZP.selector(t)||t),a(t=t||[])&&(t=function(e){var t,i=[],s=e.length;for(t=0;t!==s;i.push(e[t++]));return i}(t)),g=0;g<t.length;g++)p=d(n),v&&(p.startAt=d(v),v.cycle&&c(p.startAt,t,g)),y&&(c(p,t,g),null!=p.duration&&(i=p.duration,delete p.duration)),_.to(t[g],i,p,f(g,t[g],t));return this.add(_,r)},g.staggerFrom=function(e,t,i,s,n,a,o,r){return i.runBackwards=!0,this.staggerTo(e,t,p(0,i),s,n,a,o,r)},g.staggerFromTo=function(e,t,i,s,n,a,o,r,l){return s.startAt=i,this.staggerTo(e,t,p(0,s,i),n,a,o,r,l)},g.call=function(e,t,i,n){return this.add(s.ZP.delayedCall(0,e,t,i),n)},g.set=function(e,t,i){return this.add(new s.ZP(e,0,p(0,t,null,!0)),i)},e.exportRoot=function(t,i){null==(t=t||{}).smoothChildTiming&&(t.smoothChildTiming=!0);var n,a,o,r,l=new e(t),h=l._timeline;for(null==i&&(i=!0),h._remove(l,!0),l._startTime=0,l._rawPrevTime=l._time=l._totalTime=h._time,o=h._first;o;)r=o._next,i&&o instanceof s.ZP&&o.target===o.vars.onComplete||((a=o._startTime-o._delay)<0&&(n=1),l.add(o,a)),o=r;return h.add(l,0),n&&l.totalDuration(),l},g.add=function(t,i,n,a){var r,l,h,d,c,u,p=this;if("number"!=typeof i&&(i=p._parseTimeOrLabel(i,0,!0,t)),!(t instanceof s.fw)){if(t instanceof Array||t&&t.push&&o(t)){for(n=n||"normal",a=a||0,r=i,l=t.length,h=0;h<l;h++)o(d=t[h])&&(d=new e({tweens:d})),p.add(d,r),"string"!=typeof d&&"function"!=typeof d&&("sequence"===n?r=d._startTime+d.totalDuration()/d._timeScale:"start"===n&&(d._startTime-=d.delay())),r+=a;return p._uncache(!0)}if("string"==typeof t)return p.addLabel(t,i);if("function"!=typeof t)throw"Cannot add "+t+" into the timeline; it is not a tween, timeline, function, or string.";t=s.ZP.delayedCall(0,t)}if(s.MQ.prototype.add.call(p,t,i),(t._time||!t._duration&&t._initted)&&(r=(p.rawTime()-t._startTime)*t._timeScale,(!t._duration||Math.abs(Math.max(0,Math.min(t.totalDuration(),r)))-t._totalTime>1e-5)&&t.render(r,!1,!1)),(p._gc||p._time===p._duration)&&!p._paused&&p._duration<p.duration())for(u=(c=p).rawTime()>t._startTime;c._timeline;)u&&c._timeline.smoothChildTiming?c.totalTime(c._totalTime,!0):c._gc&&c._enabled(!0,!1),c=c._timeline;return p},g.remove=function(e){if(e instanceof s.fw){this._remove(e,!1);var t=e._timeline=e.vars.useFrames?s.fw._rootFramesTimeline:s.fw._rootTimeline;return e._startTime=(e._paused?e._pauseTime:t._time)-(e._reversed?e.totalDuration()-e._totalTime:e._totalTime)/e._timeScale,this}if(e instanceof Array||e&&e.push&&o(e)){for(var i=e.length;--i>-1;)this.remove(e[i]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},g._remove=function(e,t){return s.MQ.prototype._remove.call(this,e,t),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},g.append=function(e,t){return this.add(e,this._parseTimeOrLabel(null,t,!0,e))},g.insert=g.insertMultiple=function(e,t,i,s){return this.add(e,t||0,i,s)},g.appendMultiple=function(e,t,i,s){return this.add(e,this._parseTimeOrLabel(null,t,!0,e),i,s)},g.addLabel=function(e,t){return this._labels[e]=this._parseTimeOrLabel(t),this},g.addPause=function(e,t,i,n){var a=s.ZP.delayedCall(0,u,i,n||this);return a.vars.onComplete=a.vars.onReverseComplete=t,a.data="isPause",this._hasPause=!0,this.add(a,e)},g.removeLabel=function(e){return delete this._labels[e],this},g.getLabelTime=function(e){return null!=this._labels[e]?this._labels[e]:-1},g._parseTimeOrLabel=function(e,t,i,n){var a,r;if(n instanceof s.fw&&n.timeline===this)this.remove(n);else if(n&&(n instanceof Array||n.push&&o(n)))for(r=n.length;--r>-1;)n[r]instanceof s.fw&&n[r].timeline===this&&this.remove(n[r]);if(a="number"!=typeof e||t?this.duration()>99999999999?this.recent().endTime(!1):this._duration:0,"string"==typeof t)return this._parseTimeOrLabel(t,i&&"number"==typeof e&&null==this._labels[t]?e-a:0,i);if(t=t||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=a);else{if(-1===(r=e.indexOf("=")))return null==this._labels[e]?i?this._labels[e]=a+t:t:this._labels[e]+t;t=parseInt(e.charAt(r-1)+"1",10)*Number(e.substr(r+1)),e=r>1?this._parseTimeOrLabel(e.substr(0,r-1),0,i):a}return Number(e)+t},g.seek=function(e,t){return this.totalTime("number"==typeof e?e:this._parseTimeOrLabel(e),!1!==t)},g.stop=function(){return this.paused(!0)},g.gotoAndPlay=function(e,t){return this.play(e,t)},g.gotoAndStop=function(e,t){return this.pause(e,t)},g.render=function(e,i,s){this._gc&&this._enabled(!0,!1);var n,a,o,h,d,c,u,p,m=this,g=m._time,_=m._dirty?m.totalDuration():m._totalDuration,f=m._startTime,v=m._timeScale,y=m._paused;if(g!==m._time&&(e+=m._time-g),m._hasPause&&!m._forcingPlayhead&&!i){if(e>g)for(n=m._first;n&&n._startTime<=e&&!c;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===m._rawPrevTime||(c=n),n=n._next;else for(n=m._last;n&&n._startTime>=e&&!c;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(c=n),n=n._prev;c&&(m._time=m._totalTime=e=c._startTime,p=m._startTime+(m._reversed?m._duration-e:e)/m._timeScale)}if(e>=_-t&&e>=0)m._totalTime=m._time=_,m._reversed||m._hasPausedChild()||(a=!0,h="onComplete",d=!!m._timeline.autoRemoveChildren,0===m._duration&&(e<=0&&e>=-1e-8||m._rawPrevTime<0||m._rawPrevTime===t)&&m._rawPrevTime!==e&&m._first&&(d=!0,m._rawPrevTime>t&&(h="onReverseComplete"))),m._rawPrevTime=m._duration||!i||e||m._rawPrevTime===e?e:t,e=_+1e-4;else if(e<t)if(m._totalTime=m._time=0,e>-1e-8&&(e=0),(0!==g||0===m._duration&&m._rawPrevTime!==t&&(m._rawPrevTime>0||e<0&&m._rawPrevTime>=0))&&(h="onReverseComplete",a=m._reversed),e<0)m._active=!1,m._timeline.autoRemoveChildren&&m._reversed?(d=a=!0,h="onReverseComplete"):m._rawPrevTime>=0&&m._first&&(d=!0),m._rawPrevTime=e;else{if(m._rawPrevTime=m._duration||!i||e||m._rawPrevTime===e?e:t,0===e&&a)for(n=m._first;n&&0===n._startTime;)n._duration||(a=!1),n=n._next;e=0,m._initted||(d=!0)}else m._totalTime=m._time=m._rawPrevTime=e;if(m._time!==g&&m._first||s||d||c){if(m._initted||(m._initted=!0),m._active||!m._paused&&m._time!==g&&e>0&&(m._active=!0),0===g&&m.vars.onStart&&(0===m._time&&m._duration||i||m._callback("onStart")),(u=m._time)>=g)for(n=m._first;n&&(o=n._next,u===m._time&&(!m._paused||y));)(n._active||n._startTime<=u&&!n._paused&&!n._gc)&&(c===n&&(m.pause(),m._pauseTime=p),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(e-n._startTime)*n._timeScale,i,s):n.render((e-n._startTime)*n._timeScale,i,s)),n=o;else for(n=m._last;n&&(o=n._prev,u===m._time&&(!m._paused||y));){if(n._active||n._startTime<=g&&!n._paused&&!n._gc){if(c===n){for(c=n._prev;c&&c.endTime()>m._time;)c.render(c._reversed?c.totalDuration()-(e-c._startTime)*c._timeScale:(e-c._startTime)*c._timeScale,i,s),c=c._prev;c=null,m.pause(),m._pauseTime=p}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(e-n._startTime)*n._timeScale,i,s):n.render((e-n._startTime)*n._timeScale,i,s)}n=o}m._onUpdate&&(i||(r.length&&l(),m._callback("onUpdate"))),h&&(m._gc||f!==m._startTime&&v===m._timeScale||(0===m._time||_>=m.totalDuration())&&(a&&(r.length&&l(),m._timeline.autoRemoveChildren&&m._enabled(!1,!1),m._active=!1),!i&&m.vars[h]&&m._callback(h)))}},g._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof e&&t._hasPausedChild())return!0;t=t._next}return!1},g.getChildren=function(e,t,i,n){n=n||-9999999999;for(var a=[],o=this._first,r=0;o;)o._startTime<n||(o instanceof s.ZP?!1!==t&&(a[r++]=o):(!1!==i&&(a[r++]=o),!1!==e&&(r=(a=a.concat(o.getChildren(!0,t,i))).length))),o=o._next;return a},g.getTweensOf=function(e,t){var i,n,a=this._gc,o=[],r=0;for(a&&this._enabled(!0,!0),n=(i=s.ZP.getTweensOf(e)).length;--n>-1;)(i[n].timeline===this||t&&this._contains(i[n]))&&(o[r++]=i[n]);return a&&this._enabled(!1,!0),o},g.recent=function(){return this._recent},g._contains=function(e){for(var t=e.timeline;t;){if(t===this)return!0;t=t.timeline}return!1},g.shiftChildren=function(e,t,i){i=i||0;for(var s,n=this._first,a=this._labels;n;)n._startTime>=i&&(n._startTime+=e),n=n._next;if(t)for(s in a)a[s]>=i&&(a[s]+=e);return this._uncache(!0)},g._kill=function(e,t){if(!e&&!t)return this._enabled(!1,!1);for(var i=t?this.getTweensOf(t):this.getChildren(!0,!0,!1),s=i.length,n=!1;--s>-1;)i[s]._kill(e,t)&&(n=!0);return n},g.clear=function(e){var t=this.getChildren(!1,!0,!0),i=t.length;for(this._time=this._totalTime=0;--i>-1;)t[i]._enabled(!1,!1);return!1!==e&&(this._labels={}),this._uncache(!0)},g.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return s.fw.prototype.invalidate.call(this)},g._enabled=function(e,t){if(e===this._gc)for(var i=this._first;i;)i._enabled(e,!0),i=i._next;return s.MQ.prototype._enabled.call(this,e,t)},g.totalTime=function(e,t,i){this._forcingPlayhead=!0;var n=s.fw.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,n},g.duration=function(e){return arguments.length?(0!==this.duration()&&0!==e&&this.timeScale(this._duration/e),this):(this._dirty&&this.totalDuration(),this._duration)},g.totalDuration=function(e){if(!arguments.length){if(this._dirty){for(var t,i,s=0,n=this,a=n._last,o=999999999999;a;)t=a._prev,a._dirty&&a.totalDuration(),a._startTime>o&&n._sortChildren&&!a._paused&&!n._calculatingDuration?(n._calculatingDuration=1,n.add(a,a._startTime-a._delay),n._calculatingDuration=0):o=a._startTime,a._startTime<0&&!a._paused&&(s-=a._startTime,n._timeline.smoothChildTiming&&(n._startTime+=a._startTime/n._timeScale,n._time-=a._startTime,n._totalTime-=a._startTime,n._rawPrevTime-=a._startTime),n.shiftChildren(-a._startTime,!1,-9999999999),o=0),(i=a._startTime+a._totalDuration/a._timeScale)>s&&(s=i),a=t;n._duration=n._totalDuration=s,n._dirty=!1}return this._totalDuration}return e&&this.totalDuration()?this.timeScale(this._totalDuration/e):this},g.paused=function(e){if(!1===e&&this._paused)for(var t=this._first;t;)t._startTime===this._time&&"isPause"===t.data&&(t._rawPrevTime=0),t=t._next;return s.fw.prototype.paused.apply(this,arguments)},g.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===s.fw._rootFramesTimeline},g.rawTime=function(e){return e&&(this._paused||this._repeat&&this.time()>0&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(e)-this._startTime)*this._timeScale},e}),!0);var n=s.li.TimelineLite;s.ML._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],(function(){var e=function(e){n.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!!this.vars.yoyo,this._dirty=!0},t=1e-8,i=s.ZP._internals,a=i.lazyTweens,o=i.lazyRender,r=s.ML._gsDefine.globals,l=new s.SX(null,null,1,0),h=e.prototype=new n;return h.constructor=e,h.kill()._gc=!1,e.version="2.1.3",h.invalidate=function(){return this._yoyo=!!this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),n.prototype.invalidate.call(this)},h.addCallback=function(e,t,i,n){return this.add(s.ZP.delayedCall(0,e,i,n),t)},h.removeCallback=function(e,t){if(e)if(null==t)this._kill(null,e);else for(var i=this.getTweensOf(e,!1),s=i.length,n=this._parseTimeOrLabel(t);--s>-1;)i[s]._startTime===n&&i[s]._enabled(!1,!1);return this},h.removePause=function(e){return this.removeCallback(n._internals.pauseCallback,e)},h.tweenTo=function(e,t){t=t||{};var i,n,a,o={ease:l,useFrames:this.usesFrames(),immediateRender:!1,lazy:!1},h=t.repeat&&r.TweenMax||s.ZP;for(n in t)o[n]=t[n];return o.time=this._parseTimeOrLabel(e),i=Math.abs(Number(o.time)-this._time)/this._timeScale||.001,a=new h(this,i,o),o.onStart=function(){a.target.paused(!0),a.vars.time===a.target.time()||i!==a.duration()||a.isFromTo||a.duration(Math.abs(a.vars.time-a.target.time())/a.target._timeScale).render(a.time(),!0,!0),t.onStart&&t.onStart.apply(t.onStartScope||t.callbackScope||a,t.onStartParams||[])},a},h.tweenFromTo=function(e,t,i){i=i||{},e=this._parseTimeOrLabel(e),i.startAt={onComplete:this.seek,onCompleteParams:[e],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var s=this.tweenTo(t,i);return s.isFromTo=1,s.duration(Math.abs(s.vars.time-e)/this._timeScale||.001)},h.render=function(e,i,s){this._gc&&this._enabled(!0,!1);var n,r,l,h,d,c,u,p,m,g=this,_=g._time,f=g._dirty?g.totalDuration():g._totalDuration,v=g._duration,y=g._totalTime,b=g._startTime,w=g._timeScale,x=g._rawPrevTime,C=g._paused,M=g._cycle;if(_!==g._time&&(e+=g._time-_),e>=f-t&&e>=0)g._locked||(g._totalTime=f,g._cycle=g._repeat),g._reversed||g._hasPausedChild()||(r=!0,h="onComplete",d=!!g._timeline.autoRemoveChildren,0===g._duration&&(e<=0&&e>=-1e-8||x<0||x===t)&&x!==e&&g._first&&(d=!0,x>t&&(h="onReverseComplete"))),g._rawPrevTime=g._duration||!i||e||g._rawPrevTime===e?e:t,g._yoyo&&1&g._cycle?g._time=e=0:(g._time=v,e=v+1e-4);else if(e<t)if(g._locked||(g._totalTime=g._cycle=0),g._time=0,e>-1e-8&&(e=0),(0!==_||0===v&&x!==t&&(x>0||e<0&&x>=0)&&!g._locked)&&(h="onReverseComplete",r=g._reversed),e<0)g._active=!1,g._timeline.autoRemoveChildren&&g._reversed?(d=r=!0,h="onReverseComplete"):x>=0&&g._first&&(d=!0),g._rawPrevTime=e;else{if(g._rawPrevTime=v||!i||e||g._rawPrevTime===e?e:t,0===e&&r)for(n=g._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;e=0,g._initted||(d=!0)}else 0===v&&x<0&&(d=!0),g._time=g._rawPrevTime=e,g._locked||(g._totalTime=e,0!==g._repeat&&(c=v+g._repeatDelay,g._cycle=g._totalTime/c>>0,g._cycle&&g._cycle===g._totalTime/c&&y<=e&&g._cycle--,g._time=g._totalTime-g._cycle*c,g._yoyo&&1&g._cycle&&(g._time=v-g._time),g._time>v?(g._time=v,e=v+1e-4):g._time<0?g._time=e=0:e=g._time));if(g._hasPause&&!g._forcingPlayhead&&!i){if((e=g._time)>_||g._repeat&&M!==g._cycle)for(n=g._first;n&&n._startTime<=e&&!u;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===g._rawPrevTime||(u=n),n=n._next;else for(n=g._last;n&&n._startTime>=e&&!u;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(u=n),n=n._prev;u&&(m=g._startTime+(g._reversed?g._duration-u._startTime:u._startTime)/g._timeScale,u._startTime<v&&(g._time=g._rawPrevTime=e=u._startTime,g._totalTime=e+g._cycle*(g._totalDuration+g._repeatDelay)))}if(g._cycle!==M&&!g._locked){var I=g._yoyo&&0!=(1&M),T=I===(g._yoyo&&0!=(1&g._cycle)),P=g._totalTime,E=g._cycle,k=g._rawPrevTime,L=g._time;if(g._totalTime=M*v,g._cycle<M?I=!I:g._totalTime+=v,g._time=_,g._rawPrevTime=0===v?x-1e-4:x,g._cycle=M,g._locked=!0,_=I?0:v,g.render(_,i,0===v),i||g._gc||g.vars.onRepeat&&(g._cycle=E,g._locked=!1,g._callback("onRepeat")),_!==g._time)return;if(T&&(g._cycle=M,g._locked=!0,_=I?v+1e-4:-1e-4,g.render(_,!0,!1)),g._locked=!1,g._paused&&!C)return;g._time=L,g._totalTime=P,g._cycle=E,g._rawPrevTime=k}if(g._time!==_&&g._first||s||d||u){if(g._initted||(g._initted=!0),g._active||!g._paused&&g._totalTime!==y&&e>0&&(g._active=!0),0===y&&g.vars.onStart&&(0===g._totalTime&&g._totalDuration||i||g._callback("onStart")),(p=g._time)>=_)for(n=g._first;n&&(l=n._next,p===g._time&&(!g._paused||C));)(n._active||n._startTime<=g._time&&!n._paused&&!n._gc)&&(u===n&&(g.pause(),g._pauseTime=m),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(e-n._startTime)*n._timeScale,i,s):n.render((e-n._startTime)*n._timeScale,i,s)),n=l;else for(n=g._last;n&&(l=n._prev,p===g._time&&(!g._paused||C));){if(n._active||n._startTime<=_&&!n._paused&&!n._gc){if(u===n){for(u=n._prev;u&&u.endTime()>g._time;)u.render(u._reversed?u.totalDuration()-(e-u._startTime)*u._timeScale:(e-u._startTime)*u._timeScale,i,s),u=u._prev;u=null,g.pause(),g._pauseTime=m}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(e-n._startTime)*n._timeScale,i,s):n.render((e-n._startTime)*n._timeScale,i,s)}n=l}g._onUpdate&&(i||(a.length&&o(),g._callback("onUpdate"))),h&&(g._locked||g._gc||b!==g._startTime&&w===g._timeScale||(0===g._time||f>=g.totalDuration())&&(r&&(a.length&&o(),g._timeline.autoRemoveChildren&&g._enabled(!1,!1),g._active=!1),!i&&g.vars[h]&&g._callback(h)))}else y!==g._totalTime&&g._onUpdate&&(i||g._callback("onUpdate"))},h.getActive=function(e,t,i){var s,n,a=[],o=this.getChildren(e||null==e,t||null==e,!!i),r=0,l=o.length;for(s=0;s<l;s++)(n=o[s]).isActive()&&(a[r++]=n);return a},h.getLabelAfter=function(e){e||0!==e&&(e=this._time);var t,i=this.getLabelsArray(),s=i.length;for(t=0;t<s;t++)if(i[t].time>e)return i[t].name;return null},h.getLabelBefore=function(e){null==e&&(e=this._time);for(var t=this.getLabelsArray(),i=t.length;--i>-1;)if(t[i].time<e)return t[i].name;return null},h.getLabelsArray=function(){var e,t=[],i=0;for(e in this._labels)t[i++]={time:this._labels[e],name:e};return t.sort((function(e,t){return e.time-t.time})),t},h.invalidate=function(){return this._locked=!1,n.prototype.invalidate.call(this)},h.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-e:e)+this._cycle*(this._duration+this._repeatDelay),t):this._time/this.duration()||0},h.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this._totalTime/this.totalDuration()||0},h.totalDuration=function(e){return arguments.length?-1!==this._repeat&&e?this.timeScale(this.totalDuration()/e):this:(this._dirty&&(n.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},h.time=function(e,t){if(!arguments.length)return this._time;this._dirty&&this.totalDuration();var i=this._duration,s=this._cycle,n=s*(i+this._repeatDelay);return e>i&&(e=i),this.totalTime(this._yoyo&&1&s?i-e+n:this._repeat?e+n:e,t)},h.repeat=function(e){return arguments.length?(this._repeat=e,this._uncache(!0)):this._repeat},h.repeatDelay=function(e){return arguments.length?(this._repeatDelay=e,this._uncache(!0)):this._repeatDelay},h.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},h.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.getLabelBefore(this._time+t)},e}),!0);var a=s.li.TimelineMax;s.ML._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],(function(){var e=function(e){var t,i=[],s=e.length;for(t=0;t!==s;i.push(e[t++]));return i},t=function(e,t,i){var s,n,a=e.cycle;for(s in a)n=a[s],e[s]="function"==typeof n?n(i,t[i],t):n[i%n.length];delete e.cycle},i=function(e){if("function"==typeof e)return e;var t="object"==typeof e?e:{each:e},i=t.ease,s=t.from||0,n=t.base||0,a={},o=isNaN(s),r=t.axis,l={center:.5,end:1}[s]||0;return function(e,h,d){var c,u,p,m,g,_,f,v,y,b=(d||t).length,w=a[b];if(!w){if(!(y="auto"===t.grid?0:(t.grid||[1/0])[0])){for(f=-1/0;f<(f=d[y++].getBoundingClientRect().left)&&y<b;);y--}for(w=a[b]=[],c=o?Math.min(y,b)*l-.5:s%y,u=o?b*l/y-.5:s/y|0,f=0,v=1/0,_=0;_<b;_++)p=_%y-c,m=u-(_/y|0),w[_]=g=r?Math.abs("y"===r?m:p):Math.sqrt(p*p+m*m),g>f&&(f=g),g<v&&(v=g);w.max=f-v,w.min=v,w.v=b=t.amount||t.each*(y>b?b-1:r?"y"===r?b/y:y:Math.max(y,b/y))||0,w.b=b<0?n-b:n}return b=(w[e]-w.min)/w.max,w.b+(i?i.getRatio(b):b)*w.v}},n=function(e,t,i){s.ZP.call(this,e,t,i),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=n.prototype.render},a=1e-8,o=s.ZP._internals,r=o.isSelector,l=o.isArray,h=n.prototype=s.ZP.to({},.1,{}),d=[];n.version="2.1.3",h.constructor=n,h.kill()._gc=!1,n.killTweensOf=n.killDelayedCallsTo=s.ZP.killTweensOf,n.getTweensOf=s.ZP.getTweensOf,n.lagSmoothing=s.ZP.lagSmoothing,n.ticker=s.ZP.ticker,n.render=s.ZP.render,n.distribute=i,h.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),s.ZP.prototype.invalidate.call(this)},h.updateTo=function(e,t){var i,n=this,a=n.ratio,o=n.vars.immediateRender||e.immediateRender;for(i in t&&n._startTime<n._timeline._time&&(n._startTime=n._timeline._time,n._uncache(!1),n._gc?n._enabled(!0,!1):n._timeline.insert(n,n._startTime-n._delay)),e)n.vars[i]=e[i];if(n._initted||o)if(t)n._initted=!1,o&&n.render(0,!0,!0);else if(n._gc&&n._enabled(!0,!1),n._notifyPluginsOfEnabled&&n._firstPT&&s.ZP._onPluginEvent("_onDisable",n),n._time/n._duration>.998){var r=n._totalTime;n.render(0,!0,!1),n._initted=!1,n.render(r,!0,!1)}else if(n._initted=!1,n._init(),n._time>0||o)for(var l,h=1/(1-a),d=n._firstPT;d;)l=d.s+d.c,d.c*=h,d.s=l-d.c,d=d._next;return n},h.render=function(e,t,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var n,r,l,h,d,c,u,p,m,g=this,_=g._dirty?g.totalDuration():g._totalDuration,f=g._time,v=g._totalTime,y=g._cycle,b=g._duration,w=g._rawPrevTime;if(e>=_-a&&e>=0?(g._totalTime=_,g._cycle=g._repeat,g._yoyo&&0!=(1&g._cycle)?(g._time=0,g.ratio=g._ease._calcEnd?g._ease.getRatio(0):0):(g._time=b,g.ratio=g._ease._calcEnd?g._ease.getRatio(1):1),g._reversed||(n=!0,r="onComplete",i=i||g._timeline.autoRemoveChildren),0===b&&(g._initted||!g.vars.lazy||i)&&(g._startTime===g._timeline._duration&&(e=0),(w<0||e<=0&&e>=-1e-8||w===a&&"isPause"!==g.data)&&w!==e&&(i=!0,w>a&&(r="onReverseComplete")),g._rawPrevTime=p=!t||e||w===e?e:a)):e<a?(g._totalTime=g._time=g._cycle=0,g.ratio=g._ease._calcEnd?g._ease.getRatio(0):0,(0!==v||0===b&&w>0)&&(r="onReverseComplete",n=g._reversed),e>-1e-8?e=0:e<0&&(g._active=!1,0===b&&(g._initted||!g.vars.lazy||i)&&(w>=0&&(i=!0),g._rawPrevTime=p=!t||e||w===e?e:a)),g._initted||(i=!0)):(g._totalTime=g._time=e,0!==g._repeat&&(h=b+g._repeatDelay,g._cycle=g._totalTime/h>>0,0!==g._cycle&&g._cycle===g._totalTime/h&&v<=e&&g._cycle--,g._time=g._totalTime-g._cycle*h,g._yoyo&&0!=(1&g._cycle)&&(g._time=b-g._time,(m=g._yoyoEase||g.vars.yoyoEase)&&(g._yoyoEase||(!0!==m||g._initted?g._yoyoEase=m=!0===m?g._ease:m instanceof s.SX?m:s.SX.map[m]:(m=g.vars.ease,g._yoyoEase=m=m?m instanceof s.SX?m:"function"==typeof m?new s.SX(m,g.vars.easeParams):s.SX.map[m]||s.ZP.defaultEase:s.ZP.defaultEase)),g.ratio=m?1-m.getRatio((b-g._time)/b):0)),g._time>b?g._time=b:g._time<0&&(g._time=0)),g._easeType&&!m?(d=g._time/b,(1===(c=g._easeType)||3===c&&d>=.5)&&(d=1-d),3===c&&(d*=2),1===(u=g._easePower)?d*=d:2===u?d*=d*d:3===u?d*=d*d*d:4===u&&(d*=d*d*d*d),g.ratio=1===c?1-d:2===c?d:g._time/b<.5?d/2:1-d/2):m||(g.ratio=g._ease.getRatio(g._time/b))),f!==g._time||i||y!==g._cycle){if(!g._initted){if(g._init(),!g._initted||g._gc)return;if(!i&&g._firstPT&&(!1!==g.vars.lazy&&g._duration||g.vars.lazy&&!g._duration))return g._time=f,g._totalTime=v,g._rawPrevTime=w,g._cycle=y,o.lazyTweens.push(g),void(g._lazy=[e,t]);!g._time||n||m?n&&this._ease._calcEnd&&!m&&(g.ratio=g._ease.getRatio(0===g._time?0:1)):g.ratio=g._ease.getRatio(g._time/b)}for(!1!==g._lazy&&(g._lazy=!1),g._active||!g._paused&&g._time!==f&&e>=0&&(g._active=!0),0===v&&(2===g._initted&&e>0&&g._init(),g._startAt&&(e>=0?g._startAt.render(e,!0,i):r||(r="_dummyGS")),g.vars.onStart&&(0===g._totalTime&&0!==b||t||g._callback("onStart"))),l=g._firstPT;l;)l.f?l.t[l.p](l.c*g.ratio+l.s):l.t[l.p]=l.c*g.ratio+l.s,l=l._next;g._onUpdate&&(e<0&&g._startAt&&g._startTime&&g._startAt.render(e,!0,i),t||(g._totalTime!==v||r)&&g._callback("onUpdate")),g._cycle!==y&&(t||g._gc||g.vars.onRepeat&&g._callback("onRepeat")),r&&(g._gc&&!i||(e<0&&g._startAt&&!g._onUpdate&&g._startTime&&g._startAt.render(e,!0,i),n&&(g._timeline.autoRemoveChildren&&g._enabled(!1,!1),g._active=!1),!t&&g.vars[r]&&g._callback(r),0===b&&g._rawPrevTime===a&&p!==a&&(g._rawPrevTime=0)))}else v!==g._totalTime&&g._onUpdate&&(t||g._callback("onUpdate"))},n.to=function(e,t,i){return new n(e,t,i)},n.from=function(e,t,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new n(e,t,i)},n.fromTo=function(e,t,i,s){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,new n(e,t,s)},n.staggerTo=n.allTo=function(a,o,h,c,u,p,m){var g,_,f,v,y=[],b=i(h.stagger||c),w=h.cycle,x=(h.startAt||d).cycle;for(l(a)||("string"==typeof a&&(a=s.ZP.selector(a)||a),r(a)&&(a=e(a))),g=(a=a||[]).length-1,f=0;f<=g;f++){for(v in _={},h)_[v]=h[v];if(w&&(t(_,a,f),null!=_.duration&&(o=_.duration,delete _.duration)),x){for(v in x=_.startAt={},h.startAt)x[v]=h.startAt[v];t(_.startAt,a,f)}_.delay=b(f,a[f],a)+(_.delay||0),f===g&&u&&(_.onComplete=function(){h.onComplete&&h.onComplete.apply(h.onCompleteScope||this,arguments),u.apply(m||h.callbackScope||this,p||d)}),y[f]=new n(a[f],o,_)}return y},n.staggerFrom=n.allFrom=function(e,t,i,s,a,o,r){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,n.staggerTo(e,t,i,s,a,o,r)},n.staggerFromTo=n.allFromTo=function(e,t,i,s,a,o,r,l){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,n.staggerTo(e,t,s,a,o,r,l)},n.delayedCall=function(e,t,i,s,a){return new n(t,0,{delay:e,onComplete:t,onCompleteParams:i,callbackScope:s,onReverseComplete:t,onReverseCompleteParams:i,immediateRender:!1,useFrames:a,overwrite:0})},n.set=function(e,t){return new n(e,0,t)},n.isTweening=function(e){return s.ZP.getTweensOf(e,!0).length>0};var c=function(e,t){for(var i=[],n=0,a=e._first;a;)a instanceof s.ZP?i[n++]=a:(t&&(i[n++]=a),n=(i=i.concat(c(a,t))).length),a=a._next;return i},u=n.getAllTweens=function(e){return c(s.fw._rootTimeline,e).concat(c(s.fw._rootFramesTimeline,e))};n.killAll=function(e,t,i,n){null==t&&(t=!0),null==i&&(i=!0);var a,o,r,l=u(0!=n),h=l.length,d=t&&i&&n;for(r=0;r<h;r++)o=l[r],(d||o instanceof s.MQ||(a=o.target===o.vars.onComplete)&&i||t&&!a)&&(e?o.totalTime(o._reversed?0:o.totalDuration()):o._enabled(!1,!1))},n.killChildTweensOf=function(t,i){if(null!=t){var a,h,d,c,u,p=o.tweenLookup;if("string"==typeof t&&(t=s.ZP.selector(t)||t),r(t)&&(t=e(t)),l(t))for(c=t.length;--c>-1;)n.killChildTweensOf(t[c],i);else{for(d in a=[],p)for(h=p[d].target.parentNode;h;)h===t&&(a=a.concat(p[d].tweens)),h=h.parentNode;for(u=a.length,c=0;c<u;c++)i&&a[c].totalTime(a[c].totalDuration()),a[c]._enabled(!1,!1)}}};var p=function(e,t,i,n){t=!1!==t,i=!1!==i;for(var a,o,r=u(n=!1!==n),l=t&&i&&n,h=r.length;--h>-1;)o=r[h],(l||o instanceof s.MQ||(a=o.target===o.vars.onComplete)&&i||t&&!a)&&o.paused(e)};return n.pauseAll=function(e,t,i){p(!0,e,t,i)},n.resumeAll=function(e,t,i){p(!1,e,t,i)},n.globalTimeScale=function(e){var t=s.fw._rootTimeline,i=s.ZP.ticker.time;return arguments.length?(e=e||a,t._startTime=i-(i-t._startTime)*t._timeScale/e,t=s.fw._rootFramesTimeline,i=s.ZP.ticker.frame,t._startTime=i-(i-t._startTime)*t._timeScale/e,t._timeScale=s.fw._rootTimeline._timeScale=e,e):t._timeScale},h.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-e:e)+this._cycle*(this._duration+this._repeatDelay),t):this.duration()?this._time/this._duration:this.ratio},h.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this._totalTime/this.totalDuration()},h.time=function(e,t){if(!arguments.length)return this._time;this._dirty&&this.totalDuration();var i=this._duration,s=this._cycle,n=s*(i+this._repeatDelay);return e>i&&(e=i),this.totalTime(this._yoyo&&1&s?i-e+n:this._repeat?e+n:e,t)},h.duration=function(e){return arguments.length?s.fw.prototype.duration.call(this,e):this._duration},h.totalDuration=function(e){return arguments.length?-1===this._repeat?this:this.duration((e-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},h.repeat=function(e){return arguments.length?(this._repeat=e,this._uncache(!0)):this._repeat},h.repeatDelay=function(e){return arguments.length?(this._repeatDelay=e,this._uncache(!0)):this._repeatDelay},h.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},n}),!0);var o=s.li.TweenMax;s.ML._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],(function(){var e,t,i,n,a=function(){s.VN.call(this,"css"),this._overwriteProps.length=0,this.setRatio=a.prototype.setRatio},o=s.ML._gsDefine.globals,r={},l=a.prototype=new s.VN("css");l.constructor=a,a.version="2.1.3",a.API=2,a.defaultTransformPerspective=0,a.defaultSkewType="compensated",a.defaultSmoothOrigin=!0,l="px",a.suffixMap={top:l,right:l,bottom:l,left:l,width:l,height:l,fontSize:l,padding:l,margin:l,perspective:l,lineHeight:""};var h,d,c,u,p,m,g,_,f=/(?:\-|\.|\b)(\d|\.|e\-)+/g,v=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,y=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,b=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b),?/gi,w=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,x=/(?:\d|\-|\+|=|#|\.)*/g,C=/opacity *= *([^)]*)/i,M=/opacity:([^;]*)/i,I=/alpha\(opacity *=.+?\)/i,T=/^(rgb|hsl)/,P=/([A-Z])/g,E=/-([a-z])/gi,k=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,L=function(e,t){return t.toUpperCase()},A=/(?:Left|Right|Width)/i,S=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,D=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,R=/,(?=[^\)]*(?:\(|$))/gi,N=/[\s,\(]/i,B=Math.PI/180,O=180/Math.PI,F={},V={style:{}},$=s.ML.document||{createElement:function(){return V}},H=function(e,t){var i=$.createElementNS?$.createElementNS(t||"http://www.w3.org/1999/xhtml",e):$.createElement(e);return i.style?i:$.createElement(e)},W=H("div"),z=H("img"),U=a._internals={_specialProps:r},j=(s.ML.navigator||{}).userAgent||"",X=function(){var e=j.indexOf("Android"),t=H("a");return c=-1!==j.indexOf("Safari")&&-1===j.indexOf("Chrome")&&(-1===e||parseFloat(j.substr(e+8,2))>3),p=c&&parseFloat(j.substr(j.indexOf("Version/")+8,2))<6,u=-1!==j.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(j)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(j))&&(m=parseFloat(RegExp.$1)),!!t&&(t.style.cssText="top:1px;opacity:.55;",/^0.55/.test(t.style.opacity))}(),G=function(e){return C.test("string"==typeof e?e:(e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?parseFloat(RegExp.$1)/100:1},q=function(e){s.ML.console&&console.log(e)},Y="",Z="",K=function(e,t){var i,s,n=(t=t||W).style;if(void 0!==n[e])return e;for(e=e.charAt(0).toUpperCase()+e.substr(1),i=["O","Moz","ms","Ms","Webkit"],s=5;--s>-1&&void 0===n[i[s]+e];);return s>=0?(Y="-"+(Z=3===s?"ms":i[s]).toLowerCase()+"-",Z+e):null},J="undefined"!=typeof window?window:$.defaultView||{getComputedStyle:function(){}},Q=function(e){return J.getComputedStyle(e)},ee=a.getStyle=function(e,t,i,s,n){var a;return X||"opacity"!==t?(!s&&e.style[t]?a=e.style[t]:(i=i||Q(e))?a=i[t]||i.getPropertyValue(t)||i.getPropertyValue(t.replace(P,"-$1").toLowerCase()):e.currentStyle&&(a=e.currentStyle[t]),null==n||a&&"none"!==a&&"auto"!==a&&"auto auto"!==a?a:n):G(e)},te=U.convertToPixels=function(e,t,i,n,o){if("px"===n||!n&&"lineHeight"!==t)return i;if("auto"===n||!i)return 0;var r,l,h,d=A.test(t),c=e,u=W.style,p=i<0,m=1===i;if(p&&(i=-i),m&&(i*=100),"lineHeight"!==t||n)if("%"===n&&-1!==t.indexOf("border"))r=i/100*(d?e.clientWidth:e.clientHeight);else{if(u.cssText="border:0 solid red;position:"+ee(e,"position")+";line-height:0;","%"!==n&&c.appendChild&&"v"!==n.charAt(0)&&"rem"!==n)u[d?"borderLeftWidth":"borderTopWidth"]=i+n;else{if(c=e.parentNode||$.body,-1!==ee(c,"display").indexOf("flex")&&(u.position="absolute"),l=c._gsCache,h=s.ZP.ticker.frame,l&&d&&l.time===h)return l.width*i/100;u[d?"width":"height"]=i+n}c.appendChild(W),r=parseFloat(W[d?"offsetWidth":"offsetHeight"]),c.removeChild(W),d&&"%"===n&&!1!==a.cacheWidths&&((l=c._gsCache=c._gsCache||{}).time=h,l.width=r/i*100),0!==r||o||(r=te(e,t,i,n,!0))}else l=Q(e).lineHeight,e.style.lineHeight=i,r=parseFloat(Q(e).lineHeight),e.style.lineHeight=l;return m&&(r/=100),p?-r:r},ie=U.calculateOffset=function(e,t,i){if("absolute"!==ee(e,"position",i))return 0;var s="left"===t?"Left":"Top",n=ee(e,"margin"+s,i);return e["offset"+s]-(te(e,t,parseFloat(n),n.replace(x,""))||0)},se=function(e,t){var i,s,n,a={};if(t=t||Q(e))if(i=t.length)for(;--i>-1;)-1!==(n=t[i]).indexOf("-transform")&&Re!==n||(a[n.replace(E,L)]=t.getPropertyValue(n));else for(i in t)-1!==i.indexOf("Transform")&&De!==i||(a[i]=t[i]);else if(t=e.currentStyle||e.style)for(i in t)"string"==typeof i&&void 0===a[i]&&(a[i.replace(E,L)]=t[i]);return X||(a.opacity=G(e)),s=Ge(e,t,!1),a.rotation=s.rotation,a.skewX=s.skewX,a.scaleX=s.scaleX,a.scaleY=s.scaleY,a.x=s.x,a.y=s.y,Be&&(a.z=s.z,a.rotationX=s.rotationX,a.rotationY=s.rotationY,a.scaleZ=s.scaleZ),a.filters&&delete a.filters,a},ne=function(e,t,i,s,n){var a,o,r,l={},h=e.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(t[o]!==(a=i[o])||n&&n[o])&&-1===o.indexOf("Origin")&&("number"!=typeof a&&"string"!=typeof a||(l[o]="auto"!==a||"left"!==o&&"top"!==o?""!==a&&"auto"!==a&&"none"!==a||"string"!=typeof t[o]||""===t[o].replace(w,"")?a:0:ie(e,o),void 0!==h[o]&&(r=new ye(h,o,h[o],r))));if(s)for(o in s)"className"!==o&&(l[o]=s[o]);return{difs:l,firstMPT:r}},ae={width:["Left","Right"],height:["Top","Bottom"]},oe=["marginLeft","marginRight","marginTop","marginBottom"],re=function(e,t,i){if("svg"===(e.nodeName+"").toLowerCase())return(i||Q(e))[t]||0;if(e.getCTM&&Ue(e))return e.getBBox()[t]||0;var s=parseFloat("width"===t?e.offsetWidth:e.offsetHeight),n=ae[t],a=n.length;for(i=i||Q(e);--a>-1;)s-=parseFloat(ee(e,"padding"+n[a],i,!0))||0,s-=parseFloat(ee(e,"border"+n[a]+"Width",i,!0))||0;return s},le=function(e,t){if("contain"===e||"auto"===e||"auto auto"===e)return e+" ";null!=e&&""!==e||(e="0 0");var i,s=e.split(" "),n=-1!==e.indexOf("left")?"0%":-1!==e.indexOf("right")?"100%":s[0],a=-1!==e.indexOf("top")?"0%":-1!==e.indexOf("bottom")?"100%":s[1];if(s.length>3&&!t){for(s=e.split(", ").join(",").split(","),e=[],i=0;i<s.length;i++)e.push(le(s[i]));return e.join(",")}return null==a?a="center"===n?"50%":"0":"center"===a&&(a="50%"),("center"===n||isNaN(parseFloat(n))&&-1===(n+"").indexOf("="))&&(n="50%"),e=n+" "+a+(s.length>2?" "+s[2]:""),t&&(t.oxp=-1!==n.indexOf("%"),t.oyp=-1!==a.indexOf("%"),t.oxr="="===n.charAt(1),t.oyr="="===a.charAt(1),t.ox=parseFloat(n.replace(w,"")),t.oy=parseFloat(a.replace(w,"")),t.v=e),t||e},he=function(e,t){return"function"==typeof e&&(e=e(_,g)),"string"==typeof e&&"="===e.charAt(1)?parseInt(e.charAt(0)+"1",10)*parseFloat(e.substr(2)):parseFloat(e)-parseFloat(t)||0},de=function(e,t){"function"==typeof e&&(e=e(_,g));var i="string"==typeof e&&"="===e.charAt(1);return"string"==typeof e&&"v"===e.charAt(e.length-2)&&(e=(i?e.substr(0,2):0)+window["inner"+("vh"===e.substr(-2)?"Height":"Width")]*(parseFloat(i?e.substr(2):e)/100)),null==e?t:i?parseInt(e.charAt(0)+"1",10)*parseFloat(e.substr(2))+t:parseFloat(e)||0},ce=function(e,t,i,s){var n,a,o,r,l,h=1e-6;return"function"==typeof e&&(e=e(_,g)),null==e?r=t:"number"==typeof e?r=e:(n=360,a=e.split("_"),o=((l="="===e.charAt(1))?parseInt(e.charAt(0)+"1",10)*parseFloat(a[0].substr(2)):parseFloat(a[0]))*(-1===e.indexOf("rad")?1:O)-(l?0:t),a.length&&(s&&(s[i]=t+o),-1!==e.indexOf("short")&&(o%=n)!=o%180&&(o=o<0?o+n:o-n),-1!==e.indexOf("_cw")&&o<0?o=(o+3599999999640)%n-(o/n|0)*n:-1!==e.indexOf("ccw")&&o>0&&(o=(o-3599999999640)%n-(o/n|0)*n)),r=t+o),r<h&&r>-h&&(r=0),r},ue={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},pe=function(e,t,i){return 255*(6*(e=e<0?e+1:e>1?e-1:e)<1?t+(i-t)*e*6:e<.5?i:3*e<2?t+(i-t)*(2/3-e)*6:t)+.5|0},me=a.parseColor=function(e,t){var i,s,n,a,o,r,l,h,d,c,u;if(e)if("number"==typeof e)i=[e>>16,e>>8&255,255&e];else{if(","===e.charAt(e.length-1)&&(e=e.substr(0,e.length-1)),ue[e])i=ue[e];else if("#"===e.charAt(0))4===e.length&&(s=e.charAt(1),n=e.charAt(2),a=e.charAt(3),e="#"+s+s+n+n+a+a),i=[(e=parseInt(e.substr(1),16))>>16,e>>8&255,255&e];else if("hsl"===e.substr(0,3))if(i=u=e.match(f),t){if(-1!==e.indexOf("="))return e.match(v)}else o=Number(i[0])%360/360,r=Number(i[1])/100,s=2*(l=Number(i[2])/100)-(n=l<=.5?l*(r+1):l+r-l*r),i.length>3&&(i[3]=Number(i[3])),i[0]=pe(o+1/3,s,n),i[1]=pe(o,s,n),i[2]=pe(o-1/3,s,n);else i=e.match(f)||ue.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ue.black;return t&&!u&&(s=i[0]/255,n=i[1]/255,a=i[2]/255,l=((h=Math.max(s,n,a))+(d=Math.min(s,n,a)))/2,h===d?o=r=0:(c=h-d,r=l>.5?c/(2-h-d):c/(h+d),o=h===s?(n-a)/c+(n<a?6:0):h===n?(a-s)/c+2:(s-n)/c+4,o*=60),i[0]=o+.5|0,i[1]=100*r+.5|0,i[2]=100*l+.5|0),i},ge=function(e,t){var i,s,n,a=e.match(_e)||[],o=0,r="";if(!a.length)return e;for(i=0;i<a.length;i++)s=a[i],o+=(n=e.substr(o,e.indexOf(s,o)-o)).length+s.length,3===(s=me(s,t)).length&&s.push(1),r+=n+(t?"hsla("+s[0]+","+s[1]+"%,"+s[2]+"%,"+s[3]:"rgba("+s.join(","))+")";return r+e.substr(o)},_e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(l in ue)_e+="|"+l+"\\b";_e=new RegExp(_e+")","gi"),a.colorStringFilter=function(e){var t,i=e[0]+" "+e[1];_e.test(i)&&(t=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),e[0]=ge(e[0],t),e[1]=ge(e[1],t)),_e.lastIndex=0},s.ZP.defaultStringFilter||(s.ZP.defaultStringFilter=a.colorStringFilter);var fe=function(e,t,i,s){if(null==e)return function(e){return e};var n,a=t?(e.match(_e)||[""])[0]:"",o=e.split(a).join("").match(y)||[],r=e.substr(0,e.indexOf(o[0])),l=")"===e.charAt(e.length-1)?")":"",h=-1!==e.indexOf(" ")?" ":",",d=o.length,c=d>0?o[0].replace(f,""):"";return d?t?(n=function(e){var t,u,p,m;if("number"==typeof e)e+=c;else if(s&&R.test(e)){for(m=e.replace(R,"|").split("|"),p=0;p<m.length;p++)m[p]=n(m[p]);return m.join(",")}if(t=(e.match(_e)||[a])[0],p=(u=e.split(t).join("").match(y)||[]).length,d>p--)for(;++p<d;)u[p]=i?u[(p-1)/2|0]:o[p];return r+u.join(h)+h+t+l+(-1!==e.indexOf("inset")?" inset":"")},n):(n=function(e){var t,a,u;if("number"==typeof e)e+=c;else if(s&&R.test(e)){for(a=e.replace(R,"|").split("|"),u=0;u<a.length;u++)a[u]=n(a[u]);return a.join(",")}if(u=(t=e.match(","===h?y:b)||[]).length,d>u--)for(;++u<d;)t[u]=i?t[(u-1)/2|0]:o[u];return(r&&"none"!==e&&e.substr(0,e.indexOf(t[0]))||r)+t.join(h)+l},n):function(e){return e}},ve=function(e){return e=e.split(","),function(t,i,s,n,a,o,r){var l,h=(i+"").split(" ");for(r={},l=0;l<4;l++)r[e[l]]=h[l]=h[l]||h[(l-1)/2>>0];return n.parse(t,r,a,o)}},ye=(U._setPluginRatio=function(e){this.plugin.setRatio(e);for(var t,i,s,n,a,o=this.data,r=o.proxy,l=o.firstMPT,h=1e-6;l;)t=r[l.v],l.r?t=l.r(t):t<h&&t>-h&&(t=0),l.t[l.p]=t,l=l._next;if(o.autoRotate&&(o.autoRotate.rotation=o.mod?o.mod.call(this._tween,r.rotation,this.t,this._tween):r.rotation),1===e||0===e)for(l=o.firstMPT,a=1===e?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(n=i.xs0+i.s+i.xs1,s=1;s<i.l;s++)n+=i["xn"+s]+i["xs"+(s+1)];i[a]=n}}else i[a]=i.s+i.xs0;l=l._next}},function(e,t,i,s,n){this.t=e,this.p=t,this.v=i,this.r=n,s&&(s._prev=this,this._next=s)}),be=(U._parseToProxy=function(e,t,i,s,n,a){var o,r,l,h,d,c=s,u={},p={},m=i._transform,g=F;for(i._transform=null,F=t,s=d=i.parse(e,t,s,n),F=g,a&&(i._transform=m,c&&(c._prev=null,c._prev&&(c._prev._next=null)));s&&s!==c;){if(s.type<=1&&(p[r=s.p]=s.s+s.c,u[r]=s.s,a||(h=new ye(s,"s",r,h,s.r),s.c=0),1===s.type))for(o=s.l;--o>0;)l="xn"+o,p[r=s.p+"_"+l]=s.data[l],u[r]=s[l],a||(h=new ye(s,l,r,h,s.rxp[l]));s=s._next}return{proxy:u,end:p,firstMPT:h,pt:d}},U.CSSPropTween=function(t,i,s,a,o,r,l,h,d,c,u){this.t=t,this.p=i,this.s=s,this.c=a,this.n=l||i,t instanceof be||n.push(this.n),this.r=h?"function"==typeof h?h:Math.round:h,this.type=r||0,d&&(this.pr=d,e=!0),this.b=void 0===c?s:c,this.e=void 0===u?s+a:u,o&&(this._next=o,o._prev=this)}),we=function(e,t,i,s,n,a){var o=new be(e,t,i,s-i,n,-1,a);return o.b=i,o.e=o.xs0=s,o},xe=a.parseComplex=function(e,t,i,s,n,o,r,l,d,c){i=i||o||"","function"==typeof s&&(s=s(_,g)),r=new be(e,t,0,0,r,c?2:1,null,!1,l,i,s),s+="",n&&_e.test(s+i)&&(s=[i,s],a.colorStringFilter(s),i=s[0],s=s[1]);var u,p,m,y,b,w,x,C,M,I,T,P,E,k=i.split(", ").join(",").split(" "),L=s.split(", ").join(",").split(" "),A=k.length,S=!1!==h;for(-1===s.indexOf(",")&&-1===i.indexOf(",")||(-1!==(s+i).indexOf("rgb")||-1!==(s+i).indexOf("hsl")?(k=k.join(" ").replace(R,", ").split(" "),L=L.join(" ").replace(R,", ").split(" ")):(k=k.join(" ").split(",").join(", ").split(" "),L=L.join(" ").split(",").join(", ").split(" ")),A=k.length),A!==L.length&&(A=(k=(o||"").split(" ")).length),r.plugin=d,r.setRatio=c,_e.lastIndex=0,u=0;u<A;u++)if(y=k[u],b=L[u]+"",(C=parseFloat(y))||0===C)r.appendXtra("",C,he(b,C),b.replace(v,""),!(!S||-1===b.indexOf("px"))&&Math.round,!0);else if(n&&_e.test(y))P=")"+((P=b.indexOf(")")+1)?b.substr(P):""),E=-1!==b.indexOf("hsl")&&X,I=b,y=me(y,E),b=me(b,E),(M=y.length+b.length>6)&&!X&&0===b[3]?(r["xs"+r.l]+=r.l?" transparent":"transparent",r.e=r.e.split(L[u]).join("transparent")):(X||(M=!1),E?r.appendXtra(I.substr(0,I.indexOf("hsl"))+(M?"hsla(":"hsl("),y[0],he(b[0],y[0]),",",!1,!0).appendXtra("",y[1],he(b[1],y[1]),"%,",!1).appendXtra("",y[2],he(b[2],y[2]),M?"%,":"%"+P,!1):r.appendXtra(I.substr(0,I.indexOf("rgb"))+(M?"rgba(":"rgb("),y[0],b[0]-y[0],",",Math.round,!0).appendXtra("",y[1],b[1]-y[1],",",Math.round).appendXtra("",y[2],b[2]-y[2],M?",":P,Math.round),M&&(y=y.length<4?1:y[3],r.appendXtra("",y,(b.length<4?1:b[3])-y,P,!1))),_e.lastIndex=0;else if(w=y.match(f)){if(!(x=b.match(v))||x.length!==w.length)return r;for(m=0,p=0;p<w.length;p++)T=w[p],I=y.indexOf(T,m),r.appendXtra(y.substr(m,I-m),Number(T),he(x[p],T),"",!(!S||"px"!==y.substr(I+T.length,2))&&Math.round,0===p),m=I+T.length;r["xs"+r.l]+=y.substr(m)}else r["xs"+r.l]+=r.l||r["xs"+r.l]?" "+b:b;if(-1!==s.indexOf("=")&&r.data){for(P=r.xs0+r.data.s,u=1;u<r.l;u++)P+=r["xs"+u]+r.data["xn"+u];r.e=P+r["xs"+u]}return r.l||(r.type=-1,r.xs0=r.e),r.xfirst||r},Ce=9;for((l=be.prototype).l=l.pr=0;--Ce>0;)l["xn"+Ce]=0,l["xs"+Ce]="";l.xs0="",l._next=l._prev=l.xfirst=l.data=l.plugin=l.setRatio=l.rxp=null,l.appendXtra=function(e,t,i,s,n,a){var o=this,r=o.l;return o["xs"+r]+=a&&(r||o["xs"+r])?" "+e:e||"",i||0===r||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=s||"",r>0?(o.data["xn"+r]=t+i,o.rxp["xn"+r]=n,o["xn"+r]=t,o.plugin||(o.xfirst=new be(o,"xn"+r,t,i,o.xfirst||o,0,o.n,n,o.pr),o.xfirst.xs0=0),o):(o.data={s:t+i},o.rxp={},o.s=t,o.c=i,o.r=n,o)):(o["xs"+r]+=t+(s||""),o)};var Me=function(e,t){t=t||{},this.p=t.prefix&&K(e)||e,r[e]=r[this.p]=this,this.format=t.formatter||fe(t.defaultValue,t.color,t.collapsible,t.multi),t.parser&&(this.parse=t.parser),this.clrs=t.color,this.multi=t.multi,this.keyword=t.keyword,this.dflt=t.defaultValue,this.allowFunc=t.allowFunc,this.pr=t.priority||0},Ie=U._registerComplexSpecialProp=function(e,t,i){"object"!=typeof t&&(t={parser:i});var s,n=e.split(","),a=t.defaultValue;for(i=i||[a],s=0;s<n.length;s++)t.prefix=0===s&&t.prefix,t.defaultValue=i[s]||a,new Me(n[s],t)},Te=U._registerPluginProp=function(e){if(!r[e]){var t=e.charAt(0).toUpperCase()+e.substr(1)+"Plugin";Ie(e,{parser:function(e,i,s,n,a,l,h){var d=o.com.greensock.plugins[t];return d?(d._cssRegister(),r[s].parse(e,i,s,n,a,l,h)):(q("Error: "+t+" js file not loaded."),a)}})}};(l=Me.prototype).parseComplex=function(e,t,i,s,n,a){var o,r,l,h,d,c,u=this.keyword;if(this.multi&&(R.test(i)||R.test(t)?(r=t.replace(R,"|").split("|"),l=i.replace(R,"|").split("|")):u&&(r=[t],l=[i])),l){for(h=l.length>r.length?l.length:r.length,o=0;o<h;o++)t=r[o]=r[o]||this.dflt,i=l[o]=l[o]||this.dflt,u&&(d=t.indexOf(u))!==(c=i.indexOf(u))&&(-1===c?r[o]=r[o].split(u).join(""):-1===d&&(r[o]+=" "+u));t=r.join(", "),i=l.join(", ")}return xe(e,this.p,t,i,this.clrs,this.dflt,s,this.pr,n,a)},l.parse=function(e,t,s,n,a,o,r){return this.parseComplex(e.style,this.format(ee(e,this.p,i,!1,this.dflt)),this.format(t),a,o)},a.registerSpecialProp=function(e,t,i){Ie(e,{parser:function(e,s,n,a,o,r,l){var h=new be(e,n,0,0,o,2,n,!1,i);return h.plugin=r,h.setRatio=t(e,s,a._tween,n),h},priority:i})},a.useSVGTransformAttr=!0;var Pe,Ee,ke,Le,Ae,Se="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),De=K("transform"),Re=Y+"transform",Ne=K("transformOrigin"),Be=null!==K("perspective"),Oe=U.Transform=function(){this.perspective=parseFloat(a.defaultTransformPerspective)||0,this.force3D=!(!1===a.defaultForce3D||!Be)&&(a.defaultForce3D||"auto")},Fe=s.ML.SVGElement,Ve=function(e,t,i){var s,n=$.createElementNS("http://www.w3.org/2000/svg",e),a=/([a-z])([A-Z])/g;for(s in i)n.setAttributeNS(null,s.replace(a,"$1-$2").toLowerCase(),i[s]);return t.appendChild(n),n},$e=$.documentElement||{},He=(Ae=m||/Android/i.test(j)&&!s.ML.chrome,$.createElementNS&&$e.appendChild&&!Ae&&(Ee=Ve("svg",$e),Le=(ke=Ve("rect",Ee,{width:100,height:50,x:100})).getBoundingClientRect().width,ke.style[Ne]="50% 50%",ke.style[De]="scaleX(0.5)",Ae=Le===ke.getBoundingClientRect().width&&!(u&&Be),$e.removeChild(Ee)),Ae),We=function(e,t,i,s,n,o){var r,l,h,d,c,u,p,m,g,_,f,v,y,b,w=e._gsTransform,x=Xe(e,!0);w&&(y=w.xOrigin,b=w.yOrigin),(!s||(r=s.split(" ")).length<2)&&(0===(p=e.getBBox()).x&&0===p.y&&p.width+p.height===0&&(p={x:parseFloat(e.hasAttribute("x")?e.getAttribute("x"):e.hasAttribute("cx")?e.getAttribute("cx"):0)||0,y:parseFloat(e.hasAttribute("y")?e.getAttribute("y"):e.hasAttribute("cy")?e.getAttribute("cy"):0)||0,width:0,height:0}),r=[(-1!==(t=le(t).split(" "))[0].indexOf("%")?parseFloat(t[0])/100*p.width:parseFloat(t[0]))+p.x,(-1!==t[1].indexOf("%")?parseFloat(t[1])/100*p.height:parseFloat(t[1]))+p.y]),i.xOrigin=d=parseFloat(r[0]),i.yOrigin=c=parseFloat(r[1]),s&&x!==je&&(u=x[0],p=x[1],m=x[2],g=x[3],_=x[4],f=x[5],(v=u*g-p*m)&&(l=d*(g/v)+c*(-m/v)+(m*f-g*_)/v,h=d*(-p/v)+c*(u/v)-(u*f-p*_)/v,d=i.xOrigin=r[0]=l,c=i.yOrigin=r[1]=h)),w&&(o&&(i.xOffset=w.xOffset,i.yOffset=w.yOffset,w=i),n||!1!==n&&!1!==a.defaultSmoothOrigin?(l=d-y,h=c-b,w.xOffset+=l*x[0]+h*x[2]-l,w.yOffset+=l*x[1]+h*x[3]-h):w.xOffset=w.yOffset=0),o||e.setAttribute("data-svg-origin",r.join(" "))},ze=function(e){var t,i=H("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,n=this.nextSibling,a=this.style.cssText;if($e.appendChild(i),i.appendChild(this),this.style.display="block",e)try{t=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=ze}catch(e){}else this._originalGetBBox&&(t=this._originalGetBBox());return n?s.insertBefore(this,n):s.appendChild(this),$e.removeChild(i),this.style.cssText=a,t},Ue=function(e){return!(!Fe||!e.getCTM||e.parentNode&&!e.ownerSVGElement||!function(e){try{return e.getBBox()}catch(t){return ze.call(e,!0)}}(e))},je=[1,0,0,1,0,0],Xe=function(e,t){var i,s,n,a,o,r,l,h=e._gsTransform||new Oe,d=1e5,c=e.style;if(De?s=ee(e,Re,null,!0):e.currentStyle&&(s=(s=e.currentStyle.filter.match(S))&&4===s.length?[s[0].substr(4),Number(s[2].substr(4)),Number(s[1].substr(4)),s[3].substr(4),h.x||0,h.y||0].join(","):""),i=!s||"none"===s||"matrix(1, 0, 0, 1, 0, 0)"===s,De&&i&&!e.offsetParent&&e!==$e&&(a=c.display,c.display="block",(l=e.parentNode)&&e.offsetParent||(o=1,r=e.nextSibling,$e.appendChild(e)),i=!(s=ee(e,Re,null,!0))||"none"===s||"matrix(1, 0, 0, 1, 0, 0)"===s,a?c.display=a:Ke(c,"display"),o&&(r?l.insertBefore(e,r):l?l.appendChild(e):$e.removeChild(e))),(h.svg||e.getCTM&&Ue(e))&&(i&&-1!==(c[De]+"").indexOf("matrix")&&(s=c[De],i=0),n=e.getAttribute("transform"),i&&n&&(s="matrix("+(n=e.transform.baseVal.consolidate().matrix).a+","+n.b+","+n.c+","+n.d+","+n.e+","+n.f+")",i=0)),i)return je;for(n=(s||"").match(f)||[],Ce=n.length;--Ce>-1;)a=Number(n[Ce]),n[Ce]=(o=a-(a|=0))?(o*d+(o<0?-.5:.5)|0)/d+a:a;return t&&n.length>6?[n[0],n[1],n[4],n[5],n[12],n[13]]:n},Ge=U.getTransform=function(e,t,i,n){if(e._gsTransform&&i&&!n)return e._gsTransform;var o,r,l,h,d,c,u=i&&e._gsTransform||new Oe,p=u.scaleX<0,m=2e-5,g=1e5,_=Be&&(parseFloat(ee(e,Ne,t,!1,"0 0 0").split(" ")[2])||u.zOrigin)||0,f=parseFloat(a.defaultTransformPerspective)||0;if(u.svg=!(!e.getCTM||!Ue(e)),u.svg&&(We(e,ee(e,Ne,t,!1,"50% 50%")+"",u,e.getAttribute("data-svg-origin")),Pe=a.useSVGTransformAttr||He),(o=Xe(e))!==je){if(16===o.length){var v,y,b,w,x,C=o[0],M=o[1],I=o[2],T=o[3],P=o[4],E=o[5],k=o[6],L=o[7],A=o[8],S=o[9],D=o[10],R=o[12],N=o[13],B=o[14],F=o[11],V=Math.atan2(k,D);u.zOrigin&&(R=A*(B=-u.zOrigin)-o[12],N=S*B-o[13],B=D*B+u.zOrigin-o[14]),u.rotationX=V*O,V&&(v=P*(w=Math.cos(-V))+A*(x=Math.sin(-V)),y=E*w+S*x,b=k*w+D*x,A=P*-x+A*w,S=E*-x+S*w,D=k*-x+D*w,F=L*-x+F*w,P=v,E=y,k=b),V=Math.atan2(-I,D),u.rotationY=V*O,V&&(y=M*(w=Math.cos(-V))-S*(x=Math.sin(-V)),b=I*w-D*x,S=M*x+S*w,D=I*x+D*w,F=T*x+F*w,C=v=C*w-A*x,M=y,I=b),V=Math.atan2(M,C),u.rotation=V*O,V&&(v=C*(w=Math.cos(V))+M*(x=Math.sin(V)),y=P*w+E*x,b=A*w+S*x,M=M*w-C*x,E=E*w-P*x,S=S*w-A*x,C=v,P=y,A=b),u.rotationX&&Math.abs(u.rotationX)+Math.abs(u.rotation)>359.9&&(u.rotationX=u.rotation=0,u.rotationY=180-u.rotationY),V=Math.atan2(P,E),u.scaleX=(Math.sqrt(C*C+M*M+I*I)*g+.5|0)/g,u.scaleY=(Math.sqrt(E*E+k*k)*g+.5|0)/g,u.scaleZ=(Math.sqrt(A*A+S*S+D*D)*g+.5|0)/g,C/=u.scaleX,P/=u.scaleY,M/=u.scaleX,E/=u.scaleY,Math.abs(V)>m?(u.skewX=V*O,P=0,"simple"!==u.skewType&&(u.scaleY*=1/Math.cos(V))):u.skewX=0,u.perspective=F?1/(F<0?-F:F):0,u.x=R,u.y=N,u.z=B,u.svg&&(u.x-=u.xOrigin-(u.xOrigin*C-u.yOrigin*P),u.y-=u.yOrigin-(u.yOrigin*M-u.xOrigin*E))}else if(!Be||n||!o.length||u.x!==o[4]||u.y!==o[5]||!u.rotationX&&!u.rotationY){var $=o.length>=6,H=$?o[0]:1,W=o[1]||0,z=o[2]||0,U=$?o[3]:1;u.x=o[4]||0,u.y=o[5]||0,l=Math.sqrt(H*H+W*W),h=Math.sqrt(U*U+z*z),d=H||W?Math.atan2(W,H)*O:u.rotation||0,c=z||U?Math.atan2(z,U)*O+d:u.skewX||0,u.scaleX=l,u.scaleY=h,u.rotation=d,u.skewX=c,Be&&(u.rotationX=u.rotationY=u.z=0,u.perspective=f,u.scaleZ=1),u.svg&&(u.x-=u.xOrigin-(u.xOrigin*H+u.yOrigin*z),u.y-=u.yOrigin-(u.xOrigin*W+u.yOrigin*U))}for(r in Math.abs(u.skewX)>90&&Math.abs(u.skewX)<270&&(p?(u.scaleX*=-1,u.skewX+=u.rotation<=0?180:-180,u.rotation+=u.rotation<=0?180:-180):(u.scaleY*=-1,u.skewX+=u.skewX<=0?180:-180)),u.zOrigin=_,u)u[r]<m&&u[r]>-m&&(u[r]=0)}return i&&(e._gsTransform=u,u.svg&&(Pe&&e.style[De]?s.ZP.delayedCall(.001,(function(){Ke(e.style,De)})):!Pe&&e.getAttribute("transform")&&s.ZP.delayedCall(.001,(function(){e.removeAttribute("transform")})))),u},qe=function(e){var t,i,s=this.data,n=-s.rotation*B,a=n+s.skewX*B,o=1e5,r=(Math.cos(n)*s.scaleX*o|0)/o,l=(Math.sin(n)*s.scaleX*o|0)/o,h=(Math.sin(a)*-s.scaleY*o|0)/o,d=(Math.cos(a)*s.scaleY*o|0)/o,c=this.t.style,u=this.t.currentStyle;if(u){i=l,l=-h,h=-i,t=u.filter,c.filter="";var p,g,_=this.t.offsetWidth,f=this.t.offsetHeight,v="absolute"!==u.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+r+", M12="+l+", M21="+h+", M22="+d,b=s.x+_*s.xPercent/100,w=s.y+f*s.yPercent/100;if(null!=s.ox&&(b+=(p=(s.oxp?_*s.ox*.01:s.ox)-_/2)-(p*r+(g=(s.oyp?f*s.oy*.01:s.oy)-f/2)*l),w+=g-(p*h+g*d)),y+=v?", Dx="+((p=_/2)-(p*r+(g=f/2)*l)+b)+", Dy="+(g-(p*h+g*d)+w)+")":", sizingMethod='auto expand')",-1!==t.indexOf("DXImageTransform.Microsoft.Matrix(")?c.filter=t.replace(D,y):c.filter=y+" "+t,0!==e&&1!==e||1===r&&0===l&&0===h&&1===d&&(v&&-1===y.indexOf("Dx=0, Dy=0")||C.test(t)&&100!==parseFloat(RegExp.$1)||-1===t.indexOf(t.indexOf("Alpha"))&&c.removeAttribute("filter")),!v){var M,I,T,P=m<8?1:-1;for(p=s.ieOffsetX||0,g=s.ieOffsetY||0,s.ieOffsetX=Math.round((_-((r<0?-r:r)*_+(l<0?-l:l)*f))/2+b),s.ieOffsetY=Math.round((f-((d<0?-d:d)*f+(h<0?-h:h)*_))/2+w),Ce=0;Ce<4;Ce++)T=(i=-1!==(M=u[I=oe[Ce]]).indexOf("px")?parseFloat(M):te(this.t,I,parseFloat(M),M.replace(x,""))||0)!==s[I]?Ce<2?-s.ieOffsetX:-s.ieOffsetY:Ce<2?p-s.ieOffsetX:g-s.ieOffsetY,c[I]=(s[I]=Math.round(i-T*(0===Ce||2===Ce?1:P)))+"px"}}},Ye=U.set3DTransformRatio=U.setTransformRatio=function(e){var t,i,s,n,a,o,r,l,h,d,c,p,m,g,_,f,v,y,b,w,x,C,M,I=this.data,T=this.t.style,P=I.rotation,E=I.rotationX,k=I.rotationY,L=I.scaleX,A=I.scaleY,S=I.scaleZ,D=I.x,R=I.y,N=I.z,O=I.svg,F=I.perspective,V=I.force3D,$=I.skewY,H=I.skewX;if($&&(H+=$,P+=$),!((1!==e&&0!==e||"auto"!==V||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&V||N||F||k||E||1!==S)||Pe&&O||!Be)P||H||O?(P*=B,C=H*B,M=1e5,i=Math.cos(P)*L,a=Math.sin(P)*L,s=Math.sin(P-C)*-A,o=Math.cos(P-C)*A,C&&"simple"===I.skewType&&(t=Math.tan(C-$*B),s*=t=Math.sqrt(1+t*t),o*=t,$&&(t=Math.tan($*B),i*=t=Math.sqrt(1+t*t),a*=t)),O&&(D+=I.xOrigin-(I.xOrigin*i+I.yOrigin*s)+I.xOffset,R+=I.yOrigin-(I.xOrigin*a+I.yOrigin*o)+I.yOffset,Pe&&(I.xPercent||I.yPercent)&&(_=this.t.getBBox(),D+=.01*I.xPercent*_.width,R+=.01*I.yPercent*_.height),D<(_=1e-6)&&D>-_&&(D=0),R<_&&R>-_&&(R=0)),b=(i*M|0)/M+","+(a*M|0)/M+","+(s*M|0)/M+","+(o*M|0)/M+","+D+","+R+")",O&&Pe?this.t.setAttribute("transform","matrix("+b):T[De]=(I.xPercent||I.yPercent?"translate("+I.xPercent+"%,"+I.yPercent+"%) matrix(":"matrix(")+b):T[De]=(I.xPercent||I.yPercent?"translate("+I.xPercent+"%,"+I.yPercent+"%) matrix(":"matrix(")+L+",0,0,"+A+","+D+","+R+")";else{if(u&&(L<(_=1e-4)&&L>-_&&(L=S=2e-5),A<_&&A>-_&&(A=S=2e-5),!F||I.z||I.rotationX||I.rotationY||(F=0)),P||H)P*=B,f=i=Math.cos(P),v=a=Math.sin(P),H&&(P-=H*B,f=Math.cos(P),v=Math.sin(P),"simple"===I.skewType&&(t=Math.tan((H-$)*B),f*=t=Math.sqrt(1+t*t),v*=t,I.skewY&&(t=Math.tan($*B),i*=t=Math.sqrt(1+t*t),a*=t))),s=-v,o=f;else{if(!(k||E||1!==S||F||O))return void(T[De]=(I.xPercent||I.yPercent?"translate("+I.xPercent+"%,"+I.yPercent+"%) translate3d(":"translate3d(")+D+"px,"+R+"px,"+N+"px)"+(1!==L||1!==A?" scale("+L+","+A+")":""));i=o=1,s=a=0}d=1,n=r=l=h=c=p=0,m=F?-1/F:0,g=I.zOrigin,_=1e-6,w=",",x="0",(P=k*B)&&(f=Math.cos(P),l=-(v=Math.sin(P)),c=m*-v,n=i*v,r=a*v,d=f,m*=f,i*=f,a*=f),(P=E*B)&&(t=s*(f=Math.cos(P))+n*(v=Math.sin(P)),y=o*f+r*v,h=d*v,p=m*v,n=s*-v+n*f,r=o*-v+r*f,d*=f,m*=f,s=t,o=y),1!==S&&(n*=S,r*=S,d*=S,m*=S),1!==A&&(s*=A,o*=A,h*=A,p*=A),1!==L&&(i*=L,a*=L,l*=L,c*=L),(g||O)&&(g&&(D+=n*-g,R+=r*-g,N+=d*-g+g),O&&(D+=I.xOrigin-(I.xOrigin*i+I.yOrigin*s)+I.xOffset,R+=I.yOrigin-(I.xOrigin*a+I.yOrigin*o)+I.yOffset),D<_&&D>-_&&(D=x),R<_&&R>-_&&(R=x),N<_&&N>-_&&(N=0)),b=I.xPercent||I.yPercent?"translate("+I.xPercent+"%,"+I.yPercent+"%) matrix3d(":"matrix3d(",b+=(i<_&&i>-_?x:i)+w+(a<_&&a>-_?x:a)+w+(l<_&&l>-_?x:l),b+=w+(c<_&&c>-_?x:c)+w+(s<_&&s>-_?x:s)+w+(o<_&&o>-_?x:o),E||k||1!==S?(b+=w+(h<_&&h>-_?x:h)+w+(p<_&&p>-_?x:p)+w+(n<_&&n>-_?x:n),b+=w+(r<_&&r>-_?x:r)+w+(d<_&&d>-_?x:d)+w+(m<_&&m>-_?x:m)+w):b+=",0,0,0,0,1,0,",b+=D+w+R+w+N+w+(F?1+-N/F:1)+")",T[De]=b}};(l=Oe.prototype).x=l.y=l.z=l.skewX=l.skewY=l.rotation=l.rotationX=l.rotationY=l.zOrigin=l.xPercent=l.yPercent=l.xOffset=l.yOffset=0,l.scaleX=l.scaleY=l.scaleZ=1,Ie("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(e,t,s,n,o,r,l){if(n._lastParsedTransform===l)return o;n._lastParsedTransform=l;var h=l.scale&&"function"==typeof l.scale?l.scale:0;h&&(l.scale=h(_,e));var d,c,u,p,m,f,v,y,b,w=e._gsTransform,x=e.style,C=1e-6,M=Se.length,I=l,T={},P="transformOrigin",E=Ge(e,i,!0,I.parseTransform),k=I.transform&&("function"==typeof I.transform?I.transform(_,g):I.transform);if(E.skewType=I.skewType||E.skewType||a.defaultSkewType,n._transform=E,"rotationZ"in I&&(I.rotation=I.rotationZ),k&&"string"==typeof k&&De)(c=W.style)[De]=k,c.display="block",c.position="absolute",-1!==k.indexOf("%")&&(c.width=ee(e,"width"),c.height=ee(e,"height")),$.body.appendChild(W),d=Ge(W,null,!1),"simple"===E.skewType&&(d.scaleY*=Math.cos(d.skewX*B)),E.svg&&(f=E.xOrigin,v=E.yOrigin,d.x-=E.xOffset,d.y-=E.yOffset,(I.transformOrigin||I.svgOrigin)&&(k={},We(e,le(I.transformOrigin),k,I.svgOrigin,I.smoothOrigin,!0),f=k.xOrigin,v=k.yOrigin,d.x-=k.xOffset-E.xOffset,d.y-=k.yOffset-E.yOffset),(f||v)&&(y=Xe(W,!0),d.x-=f-(f*y[0]+v*y[2]),d.y-=v-(f*y[1]+v*y[3]))),$.body.removeChild(W),d.perspective||(d.perspective=E.perspective),null!=I.xPercent&&(d.xPercent=de(I.xPercent,E.xPercent)),null!=I.yPercent&&(d.yPercent=de(I.yPercent,E.yPercent));else if("object"==typeof I){if(d={scaleX:de(null!=I.scaleX?I.scaleX:I.scale,E.scaleX),scaleY:de(null!=I.scaleY?I.scaleY:I.scale,E.scaleY),scaleZ:de(I.scaleZ,E.scaleZ),x:de(I.x,E.x),y:de(I.y,E.y),z:de(I.z,E.z),xPercent:de(I.xPercent,E.xPercent),yPercent:de(I.yPercent,E.yPercent),perspective:de(I.transformPerspective,E.perspective)},null!=(m=I.directionalRotation))if("object"==typeof m)for(c in m)I[c]=m[c];else I.rotation=m;"string"==typeof I.x&&-1!==I.x.indexOf("%")&&(d.x=0,d.xPercent=de(I.x,E.xPercent)),"string"==typeof I.y&&-1!==I.y.indexOf("%")&&(d.y=0,d.yPercent=de(I.y,E.yPercent)),d.rotation=ce("rotation"in I?I.rotation:"shortRotation"in I?I.shortRotation+"_short":E.rotation,E.rotation,"rotation",T),Be&&(d.rotationX=ce("rotationX"in I?I.rotationX:"shortRotationX"in I?I.shortRotationX+"_short":E.rotationX||0,E.rotationX,"rotationX",T),d.rotationY=ce("rotationY"in I?I.rotationY:"shortRotationY"in I?I.shortRotationY+"_short":E.rotationY||0,E.rotationY,"rotationY",T)),d.skewX=ce(I.skewX,E.skewX),d.skewY=ce(I.skewY,E.skewY)}for(Be&&null!=I.force3D&&(E.force3D=I.force3D,p=!0),(u=E.force3D||E.z||E.rotationX||E.rotationY||d.z||d.rotationX||d.rotationY||d.perspective)||null==I.scale||(d.scaleZ=1);--M>-1;)((k=d[b=Se[M]]-E[b])>C||k<-C||null!=I[b]||null!=F[b])&&(p=!0,o=new be(E,b,E[b],k,o),b in T&&(o.e=T[b]),o.xs0=0,o.plugin=r,n._overwriteProps.push(o.n));return k="function"==typeof I.transformOrigin?I.transformOrigin(_,g):I.transformOrigin,E.svg&&(k||I.svgOrigin)&&(f=E.xOffset,v=E.yOffset,We(e,le(k),d,I.svgOrigin,I.smoothOrigin),o=we(E,"xOrigin",(w?E:d).xOrigin,d.xOrigin,o,P),o=we(E,"yOrigin",(w?E:d).yOrigin,d.yOrigin,o,P),f===E.xOffset&&v===E.yOffset||(o=we(E,"xOffset",w?f:E.xOffset,E.xOffset,o,P),o=we(E,"yOffset",w?v:E.yOffset,E.yOffset,o,P)),k="0px 0px"),(k||Be&&u&&E.zOrigin)&&(De?(p=!0,b=Ne,k||(k=(k=(ee(e,b,i,!1,"50% 50%")+"").split(" "))[0]+" "+k[1]+" "+E.zOrigin+"px"),k+="",(o=new be(x,b,0,0,o,-1,P)).b=x[b],o.plugin=r,Be?(c=E.zOrigin,k=k.split(" "),E.zOrigin=(k.length>2?parseFloat(k[2]):c)||0,o.xs0=o.e=k[0]+" "+(k[1]||"50%")+" 0px",(o=new be(E,"zOrigin",0,0,o,-1,o.n)).b=c,o.xs0=o.e=E.zOrigin):o.xs0=o.e=k):le(k+"",E)),p&&(n._transformType=E.svg&&Pe||!u&&3!==this._transformType?2:3),h&&(l.scale=h),o},allowFunc:!0,prefix:!0}),Ie("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Ie("clipPath",{defaultValue:"inset(0%)",prefix:!0,multi:!0,formatter:fe("inset(0% 0% 0% 0%)",!1,!0)}),Ie("borderRadius",{defaultValue:"0px",parser:function(e,s,n,a,o,r){s=this.format(s);var l,h,d,c,u,p,m,g,_,f,v,y,b,w,x,C,M=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],I=e.style;for(_=parseFloat(e.offsetWidth),f=parseFloat(e.offsetHeight),l=s.split(" "),h=0;h<M.length;h++)this.p.indexOf("border")&&(M[h]=K(M[h])),-1!==(u=c=ee(e,M[h],i,!1,"0px")).indexOf(" ")&&(c=u.split(" "),u=c[0],c=c[1]),p=d=l[h],m=parseFloat(u),y=u.substr((m+"").length),(b="="===p.charAt(1))?(g=parseInt(p.charAt(0)+"1",10),p=p.substr(2),g*=parseFloat(p),v=p.substr((g+"").length-(g<0?1:0))||""):(g=parseFloat(p),v=p.substr((g+"").length)),""===v&&(v=t[n]||y),v!==y&&(w=te(e,"borderLeft",m,y),x=te(e,"borderTop",m,y),"%"===v?(u=w/_*100+"%",c=x/f*100+"%"):"em"===v?(u=w/(C=te(e,"borderLeft",1,"em"))+"em",c=x/C+"em"):(u=w+"px",c=x+"px"),b&&(p=parseFloat(u)+g+v,d=parseFloat(c)+g+v)),o=xe(I,M[h],u+" "+c,p+" "+d,!1,"0px",o);return o},prefix:!0,formatter:fe("0px 0px 0px 0px",!1,!0)}),Ie("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(e,t,s,n,a,o){return xe(e.style,s,this.format(ee(e,s,i,!1,"0px 0px")),this.format(t),!1,"0px",a)},prefix:!0,formatter:fe("0px 0px",!1,!0)}),Ie("backgroundPosition",{defaultValue:"0 0",parser:function(e,t,s,n,a,o){var r,l,h,d,c,u,p="background-position",g=i||Q(e),_=this.format((g?m?g.getPropertyValue(p+"-x")+" "+g.getPropertyValue(p+"-y"):g.getPropertyValue(p):e.currentStyle.backgroundPositionX+" "+e.currentStyle.backgroundPositionY)||"0 0"),f=this.format(t);if(-1!==_.indexOf("%")!=(-1!==f.indexOf("%"))&&f.split(",").length<2&&(u=ee(e,"backgroundImage").replace(k,""))&&"none"!==u){for(r=_.split(" "),l=f.split(" "),z.setAttribute("src",u),h=2;--h>-1;)(d=-1!==(_=r[h]).indexOf("%"))!=(-1!==l[h].indexOf("%"))&&(c=0===h?e.offsetWidth-z.width:e.offsetHeight-z.height,r[h]=d?parseFloat(_)/100*c+"px":parseFloat(_)/c*100+"%");_=r.join(" ")}return this.parseComplex(e.style,_,f,a,o)},formatter:le}),Ie("backgroundSize",{defaultValue:"0 0",formatter:function(e){return"co"===(e+="").substr(0,2)?e:le(-1===e.indexOf(" ")?e+" "+e:e)}}),Ie("perspective",{defaultValue:"0px",prefix:!0}),Ie("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Ie("transformStyle",{prefix:!0}),Ie("backfaceVisibility",{prefix:!0}),Ie("userSelect",{prefix:!0}),Ie("margin",{parser:ve("marginTop,marginRight,marginBottom,marginLeft")}),Ie("padding",{parser:ve("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Ie("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(e,t,s,n,a,o){var r,l,h;return m<9?(l=e.currentStyle,h=m<8?" ":",",r="rect("+l.clipTop+h+l.clipRight+h+l.clipBottom+h+l.clipLeft+")",t=this.format(t).split(",").join(h)):(r=this.format(ee(e,this.p,i,!1,this.dflt)),t=this.format(t)),this.parseComplex(e.style,r,t,a,o)}}),Ie("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Ie("autoRound,strictUnits",{parser:function(e,t,i,s,n){return n}}),Ie("border",{defaultValue:"0px solid #000",parser:function(e,t,s,n,a,o){var r=ee(e,"borderTopWidth",i,!1,"0px"),l=this.format(t).split(" "),h=l[0].replace(x,"");return"px"!==h&&(r=parseFloat(r)/te(e,"borderTopWidth",1,h)+h),this.parseComplex(e.style,this.format(r+" "+ee(e,"borderTopStyle",i,!1,"solid")+" "+ee(e,"borderTopColor",i,!1,"#000")),l.join(" "),a,o)},color:!0,formatter:function(e){var t=e.split(" ");return t[0]+" "+(t[1]||"solid")+" "+(e.match(_e)||["#000"])[0]}}),Ie("borderWidth",{parser:ve("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Ie("float,cssFloat,styleFloat",{parser:function(e,t,i,s,n,a){var o=e.style,r="cssFloat"in o?"cssFloat":"styleFloat";return new be(o,r,0,0,n,-1,i,!1,0,o[r],t)}});var Ze=function(e){var t,i=this.t,s=i.filter||ee(this.data,"filter")||"",n=this.s+this.c*e|0;100===n&&(-1===s.indexOf("atrix(")&&-1===s.indexOf("radient(")&&-1===s.indexOf("oader(")?(i.removeAttribute("filter"),t=!ee(this.data,"filter")):(i.filter=s.replace(I,""),t=!0)),t||(this.xn1&&(i.filter=s=s||"alpha(opacity="+n+")"),-1===s.indexOf("pacity")?0===n&&this.xn1||(i.filter=s+" alpha(opacity="+n+")"):i.filter=s.replace(C,"opacity="+n))};Ie("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(e,t,s,n,a,o){var r=parseFloat(ee(e,"opacity",i,!1,"1")),l=e.style,h="autoAlpha"===s;return"string"==typeof t&&"="===t.charAt(1)&&(t=("-"===t.charAt(0)?-1:1)*parseFloat(t.substr(2))+r),h&&1===r&&"hidden"===ee(e,"visibility",i)&&0!==t&&(r=0),X?a=new be(l,"opacity",r,t-r,a):((a=new be(l,"opacity",100*r,100*(t-r),a)).xn1=h?1:0,l.zoom=1,a.type=2,a.b="alpha(opacity="+a.s+")",a.e="alpha(opacity="+(a.s+a.c)+")",a.data=e,a.plugin=o,a.setRatio=Ze),h&&((a=new be(l,"visibility",0,0,a,-1,null,!1,0,0!==r?"inherit":"hidden",0===t?"hidden":"inherit")).xs0="inherit",n._overwriteProps.push(a.n),n._overwriteProps.push(s)),a}});var Ke=function(e,t){t&&(e.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),e.removeProperty(t.replace(P,"-$1").toLowerCase())):e.removeAttribute(t))},Je=function(e){if(this.t._gsClassPT=this,1===e||0===e){this.t.setAttribute("class",0===e?this.b:this.e);for(var t=this.data,i=this.t.style;t;)t.v?i[t.p]=t.v:Ke(i,t.p),t=t._next;1===e&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Ie("className",{parser:function(t,s,n,a,o,r,l){var h,d,c,u,p,m=t.getAttribute("class")||"",g=t.style.cssText;if((o=a._classNamePT=new be(t,n,0,0,o,2)).setRatio=Je,o.pr=-11,e=!0,o.b=m,d=se(t,i),c=t._gsClassPT){for(u={},p=c.data;p;)u[p.p]=1,p=p._next;c.setRatio(1)}return t._gsClassPT=o,o.e="="!==s.charAt(1)?s:m.replace(new RegExp("(?:\\s|^)"+s.substr(2)+"(?![\\w-])"),"")+("+"===s.charAt(0)?" "+s.substr(2):""),t.setAttribute("class",o.e),h=ne(t,d,se(t),l,u),t.setAttribute("class",m),o.data=h.firstMPT,t.style.cssText!==g&&(t.style.cssText=g),o.xfirst=a.parse(t,h.difs,o,r)}});var Qe=function(e){if((1===e||0===e)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var t,i,s,n,a,o=this.t.style,l=r.transform.parse;if("all"===this.e)o.cssText="",n=!0;else for(s=(t=this.e.split(" ").join("").split(",")).length;--s>-1;)i=t[s],r[i]&&(r[i].parse===l?n=!0:i="transformOrigin"===i?Ne:r[i].p),Ke(o,i);n&&(Ke(o,De),(a=this.t._gsTransform)&&(a.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Ie("clearProps",{parser:function(t,i,s,n,a){return(a=new be(t,s,0,0,a,2)).setRatio=Qe,a.e=i,a.pr=-10,a.data=n._tween,e=!0,a}}),l="bezier,throwProps,physicsProps,physics2D".split(","),Ce=l.length;Ce--;)Te(l[Ce]);(l=a.prototype)._firstPT=l._lastParsedTransform=l._transform=null,l._onInitTween=function(s,o,l,u){if(!s.nodeType)return!1;this._target=g=s,this._tween=l,this._vars=o,_=u,h=o.autoRound,e=!1,t=o.suffixMap||a.suffixMap,i=Q(s),n=this._overwriteProps;var m,f,v,y,b,w,x,C,I,T=s.style;if(d&&""===T.zIndex&&("auto"!==(m=ee(s,"zIndex",i))&&""!==m||this._addLazySet(T,"zIndex",0)),"string"==typeof o&&(y=T.cssText,m=se(s,i),T.cssText=y+";"+o,m=ne(s,m,se(s)).difs,!X&&M.test(o)&&(m.opacity=parseFloat(RegExp.$1)),o=m,T.cssText=y),o.className?this._firstPT=f=r.className.parse(s,o.className,"className",this,null,null,o):this._firstPT=f=this.parse(s,o,null),this._transformType){for(I=3===this._transformType,De?c&&(d=!0,""===T.zIndex&&("auto"!==(x=ee(s,"zIndex",i))&&""!==x||this._addLazySet(T,"zIndex",0)),p&&this._addLazySet(T,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(I?"visible":"hidden"))):T.zoom=1,v=f;v&&v._next;)v=v._next;C=new be(s,"transform",0,0,null,2),this._linkCSSP(C,null,v),C.setRatio=De?Ye:qe,C.data=this._transform||Ge(s,i,!0),C.tween=l,C.pr=-1,n.pop()}if(e){for(;f;){for(w=f._next,v=y;v&&v.pr>f.pr;)v=v._next;(f._prev=v?v._prev:b)?f._prev._next=f:y=f,(f._next=v)?v._prev=f:b=f,f=w}this._firstPT=y}return!0},l.parse=function(e,s,n,a){var o,l,d,c,u,p,m,f,v,y,b=e.style;for(o in s){if(p=s[o],l=r[o],"function"!=typeof p||l&&l.allowFunc||(p=p(_,g)),l)n=l.parse(e,p,o,this,n,a,s);else{if("--"===o.substr(0,2)){this._tween._propLookup[o]=this._addTween.call(this._tween,e.style,"setProperty",Q(e).getPropertyValue(o)+"",p+"",o,!1,o);continue}u=ee(e,o,i)+"",v="string"==typeof p,"color"===o||"fill"===o||"stroke"===o||-1!==o.indexOf("Color")||v&&T.test(p)?(v||(p=((p=me(p)).length>3?"rgba(":"rgb(")+p.join(",")+")"),n=xe(b,o,u,p,!0,"transparent",n,0,a)):v&&N.test(p)?n=xe(b,o,u,p,!0,null,n,0,a):(m=(d=parseFloat(u))||0===d?u.substr((d+"").length):"",""!==u&&"auto"!==u||("width"===o||"height"===o?(d=re(e,o,i),m="px"):"left"===o||"top"===o?(d=ie(e,o,i),m="px"):(d="opacity"!==o?0:1,m="")),(y=v&&"="===p.charAt(1))?(c=parseInt(p.charAt(0)+"1",10),p=p.substr(2),c*=parseFloat(p),f=p.replace(x,"")):(c=parseFloat(p),f=v?p.replace(x,""):""),""===f&&(f=o in t?t[o]:m),p=c||0===c?(y?c+d:c)+f:s[o],m!==f&&(""===f&&"lineHeight"!==o||(c||0===c)&&d&&(d=te(e,o,d,m),"%"===f?(d/=te(e,o,100,"%")/100,!0!==s.strictUnits&&(u=d+"%")):"em"===f||"rem"===f||"vw"===f||"vh"===f?d/=te(e,o,1,f):"px"!==f&&(c=te(e,o,c,f),f="px"),y&&(c||0===c)&&(p=c+d+f))),y&&(c+=d),!d&&0!==d||!c&&0!==c?void 0!==b[o]&&(p||p+""!="NaN"&&null!=p)?(n=new be(b,o,c||d||0,0,n,-1,o,!1,0,u,p)).xs0="none"!==p||"display"!==o&&-1===o.indexOf("Style")?p:u:q("invalid "+o+" tween value: "+s[o]):(n=new be(b,o,d,c-d,n,0,o,!1!==h&&("px"===f||"zIndex"===o),0,u,p)).xs0=f)}a&&n&&!n.plugin&&(n.plugin=a)}return n},l.setRatio=function(e){var t,i,s,n=this._firstPT,a=1e-6;if(1!==e||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(e||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;n;){if(t=n.c*e+n.s,n.r?t=n.r(t):t<a&&t>-a&&(t=0),n.type)if(1===n.type)if(2===(s=n.l))n.t[n.p]=n.xs0+t+n.xs1+n.xn1+n.xs2;else if(3===s)n.t[n.p]=n.xs0+t+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3;else if(4===s)n.t[n.p]=n.xs0+t+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3+n.xn3+n.xs4;else if(5===s)n.t[n.p]=n.xs0+t+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3+n.xn3+n.xs4+n.xn4+n.xs5;else{for(i=n.xs0+t+n.xs1,s=1;s<n.l;s++)i+=n["xn"+s]+n["xs"+(s+1)];n.t[n.p]=i}else-1===n.type?n.t[n.p]=n.xs0:n.setRatio&&n.setRatio(e);else n.t[n.p]=t+n.xs0;n=n._next}else for(;n;)2!==n.type?n.t[n.p]=n.b:n.setRatio(e),n=n._next;else for(;n;){if(2!==n.type)if(n.r&&-1!==n.type)if(t=n.r(n.s+n.c),n.type){if(1===n.type){for(s=n.l,i=n.xs0+t+n.xs1,s=1;s<n.l;s++)i+=n["xn"+s]+n["xs"+(s+1)];n.t[n.p]=i}}else n.t[n.p]=t+n.xs0;else n.t[n.p]=n.e;else n.setRatio(e);n=n._next}},l._enableTransforms=function(e){this._transform=this._transform||Ge(this._target,i,!0),this._transformType=this._transform.svg&&Pe||!e&&3!==this._transformType?2:3};var et=function(e){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};l._addLazySet=function(e,t,i){var s=this._firstPT=new be(e,t,0,0,this._firstPT,2);s.e=i,s.setRatio=et,s.data=this},l._linkCSSP=function(e,t,i,s){return e&&(t&&(t._prev=e),e._next&&(e._next._prev=e._prev),e._prev?e._prev._next=e._next:this._firstPT===e&&(this._firstPT=e._next,s=!0),i?i._next=e:s||null!==this._firstPT||(this._firstPT=e),e._next=t,e._prev=i),e},l._mod=function(e){for(var t=this._firstPT;t;)"function"==typeof e[t.p]&&(t.r=e[t.p]),t=t._next},l._kill=function(e){var t,i,n,a=e;if(e.autoAlpha||e.alpha){for(i in a={},e)a[i]=e[i];a.opacity=1,a.autoAlpha&&(a.visibility=1)}for(e.className&&(t=this._classNamePT)&&((n=t.xfirst)&&n._prev?this._linkCSSP(n._prev,t._next,n._prev._prev):n===this._firstPT&&(this._firstPT=t._next),t._next&&this._linkCSSP(t._next,t._next._next,n._prev),this._classNamePT=null),t=this._firstPT;t;)t.plugin&&t.plugin!==i&&t.plugin._kill&&(t.plugin._kill(e),i=t.plugin),t=t._next;return s.VN.prototype._kill.call(this,a)};var tt=function(e,t,i){var s,n,a,o;if(e.slice)for(n=e.length;--n>-1;)tt(e[n],t,i);else for(n=(s=e.childNodes).length;--n>-1;)o=(a=s[n]).type,a.style&&(t.push(se(a)),i&&i.push(a)),1!==o&&9!==o&&11!==o||!a.childNodes.length||tt(a,t,i)};return a.cascadeTo=function(e,t,i){var n,a,o,r,l=s.ZP.to(e,t,i),h=[l],d=[],c=[],u=[],p=s.ZP._internals.reservedProps;for(e=l._targets||l.target,tt(e,d,u),l.render(t,!0,!0),tt(e,c),l.render(0,!0,!0),l._enabled(!0),n=u.length;--n>-1;)if((a=ne(u[n],d[n],c[n])).firstMPT){for(o in a=a.difs,i)p[o]&&(a[o]=i[o]);for(o in r={},a)r[o]=d[n][o];h.push(s.ZP.fromTo(u[n],t,r,a))}return h},s.VN.activate([a]),a}),!0);var r=s.li.CSSPlugin,l=s.ML._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(e,t,i,s){var n,a;if("function"!=typeof e.setAttribute)return!1;for(n in t)"function"==typeof(a=t[n])&&(a=a(s,e)),this._addTween(e,"setAttribute",e.getAttribute(n)+"",a+"",n,!1,n),this._overwriteProps.push(n);return!0}}),h=s.ML._gsDefine.plugin({propName:"roundProps",version:"1.7.0",priority:-1,API:2,init:function(e,t,i){return this._tween=i,!0}}),d=function(e){var t=e<1?Math.pow(10,(e+"").length-2):1;return function(i){return(Math.round(i/e)*e*t|0)/t}},c=function(e,t){for(;e;)e.f||e.blob||(e.m=t||Math.round),e=e._next},u=h.prototype;u._onInitAllProps=function(){var e,t,i,s,n=this._tween,a=n.vars.roundProps,o={},r=n._propLookup.roundProps;if("object"!=typeof a||a.push)for("string"==typeof a&&(a=a.split(",")),i=a.length;--i>-1;)o[a[i]]=Math.round;else for(s in a)o[s]=d(a[s]);for(s in o)for(e=n._firstPT;e;)t=e._next,e.pg?e.t._mod(o):e.n===s&&(2===e.f&&e.t?c(e.t._firstPT,o[s]):(this._add(e.t,s,e.s,e.c,o[s]),t&&(t._prev=e._prev),e._prev?e._prev._next=t:n._firstPT===e&&(n._firstPT=t),e._next=e._prev=null,n._propLookup[s]=r)),e=t;return!1},u._add=function(e,t,i,s,n){this._addTween(e,t,i,i+s,t,n||Math.round),this._overwriteProps.push(t)};var p=s.ML._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(e,t,i,s){"object"!=typeof t&&(t={rotation:t}),this.finals={};var n,a,o,r,l,h,d=!0===t.useRadians?2*Math.PI:360,c=1e-6;for(n in t)"useRadians"!==n&&("function"==typeof(r=t[n])&&(r=r(s,e)),a=(h=(r+"").split("_"))[0],o=parseFloat("function"!=typeof e[n]?e[n]:e[n.indexOf("set")||"function"!=typeof e["get"+n.substr(3)]?n:"get"+n.substr(3)]()),l=(r=this.finals[n]="string"==typeof a&&"="===a.charAt(1)?o+parseInt(a.charAt(0)+"1",10)*Number(a.substr(2)):Number(a)||0)-o,h.length&&(-1!==(a=h.join("_")).indexOf("short")&&(l%=d)!=l%(d/2)&&(l=l<0?l+d:l-d),-1!==a.indexOf("_cw")&&l<0?l=(l+9999999999*d)%d-(l/d|0)*d:-1!==a.indexOf("ccw")&&l>0&&(l=(l-9999999999*d)%d-(l/d|0)*d)),(l>c||l<-c)&&(this._addTween(e,n,o,o+l,n),this._overwriteProps.push(n)));return!0},set:function(e){var t;if(1!==e)this._super.setRatio.call(this,e);else for(t=this._firstPT;t;)t.f?t.t[t.p](this.finals[t.p]):t.t[t.p]=this.finals[t.p],t=t._next}});p._autoCSS=!0;var m=180/Math.PI,g=[],_=[],f=[],v={},y=s.ML._gsDefine.globals,b=function(e,t,i,s){i===s&&(i=s-(s-t)/1e6),e===t&&(t=e+(i-e)/1e6),this.a=e,this.b=t,this.c=i,this.d=s,this.da=s-e,this.ca=i-e,this.ba=t-e},w=function(e,t,i,s){var n={a:e},a={},o={},r={c:s},l=(e+t)/2,h=(t+i)/2,d=(i+s)/2,c=(l+h)/2,u=(h+d)/2,p=(u-c)/8;return n.b=l+(e-l)/4,a.b=c+p,n.c=a.a=(n.b+a.b)/2,a.c=o.a=(c+u)/2,o.b=u-p,r.b=d+(s-d)/4,o.c=r.a=(o.b+r.b)/2,[n,a,o,r]},x=function(e,t,i,s,n){var a,o,r,l,h,d,c,u,p,m,v,y,b,x=e.length-1,C=0,M=e[0].a;for(a=0;a<x;a++)o=(h=e[C]).a,r=h.d,l=e[C+1].d,n?(v=g[a],b=((y=_[a])+v)*t*.25/(s?.5:f[a]||.5),u=r-((d=r-(r-o)*(s?.5*t:0!==v?b/v:0))+(((c=r+(l-r)*(s?.5*t:0!==y?b/y:0))-d)*(3*v/(v+y)+.5)/4||0))):u=r-((d=r-(r-o)*t*.5)+(c=r+(l-r)*t*.5))/2,d+=u,c+=u,h.c=p=d,h.b=0!==a?M:M=h.a+.6*(h.c-h.a),h.da=r-o,h.ca=p-o,h.ba=M-o,i?(m=w(o,M,p,r),e.splice(C,1,m[0],m[1],m[2],m[3]),C+=4):C++,M=c;(h=e[C]).b=M,h.c=M+.4*(h.d-M),h.da=h.d-h.a,h.ca=h.c-h.a,h.ba=M-h.a,i&&(m=w(h.a,M,h.c,h.d),e.splice(C,1,m[0],m[1],m[2],m[3]))},C=function(e,t,i,s){var n,a,o,r,l,h,d=[];if(s)for(a=(e=[s].concat(e)).length;--a>-1;)"string"==typeof(h=e[a][t])&&"="===h.charAt(1)&&(e[a][t]=s[t]+Number(h.charAt(0)+h.substr(2)));if((n=e.length-2)<0)return d[0]=new b(e[0][t],0,0,e[0][t]),d;for(a=0;a<n;a++)o=e[a][t],r=e[a+1][t],d[a]=new b(o,0,0,r),i&&(l=e[a+2][t],g[a]=(g[a]||0)+(r-o)*(r-o),_[a]=(_[a]||0)+(l-r)*(l-r));return d[a]=new b(e[a][t],0,0,e[a+1][t]),d},M=function(e,t,i,s,n,a){var o,r,l,h,d,c,u,p,m={},y=[],b=a||e[0];for(r in n="string"==typeof n?","+n+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==t&&(t=1),e[0])y.push(r);if(e.length>1){for(p=e[e.length-1],u=!0,o=y.length;--o>-1;)if(r=y[o],Math.abs(b[r]-p[r])>.05){u=!1;break}u&&(e=e.concat(),a&&e.unshift(a),e.push(e[1]),a=e[e.length-3])}for(g.length=_.length=f.length=0,o=y.length;--o>-1;)r=y[o],v[r]=-1!==n.indexOf(","+r+","),m[r]=C(e,r,v[r],a);for(o=g.length;--o>-1;)g[o]=Math.sqrt(g[o]),_[o]=Math.sqrt(_[o]);if(!s){for(o=y.length;--o>-1;)if(v[r])for(c=(l=m[y[o]]).length-1,h=0;h<c;h++)d=l[h+1].da/_[h]+l[h].da/g[h]||0,f[h]=(f[h]||0)+d*d;for(o=f.length;--o>-1;)f[o]=Math.sqrt(f[o])}for(o=y.length,h=i?4:1;--o>-1;)l=m[r=y[o]],x(l,t,i,s,v[r]),u&&(l.splice(0,h),l.splice(l.length-h,h));return m},I=function(e,t,i){for(var s,n,a,o,r,l,h,d,c,u,p,m=1/i,g=e.length;--g>-1;)for(a=(u=e[g]).a,o=u.d-a,r=u.c-a,l=u.b-a,s=n=0,d=1;d<=i;d++)s=n-(n=((h=m*d)*h*o+3*(c=1-h)*(h*r+c*l))*h),t[p=g*i+d-1]=(t[p]||0)+s*s},T=s.ML._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.9",API:2,global:!0,init:function(e,t,i){this._target=e,t instanceof Array&&(t={values:t}),this._func={},this._mod={},this._props=[],this._timeRes=null==t.timeResolution?6:parseInt(t.timeResolution,10);var s,n,a,o,r,l=t.values||[],h={},d=l[0],c=t.autoRotate||i.vars.orientToBezier;for(s in this._autoRotate=c?c instanceof Array?c:[["x","y","rotation",!0===c?0:Number(c)||0]]:null,d)this._props.push(s);for(a=this._props.length;--a>-1;)s=this._props[a],this._overwriteProps.push(s),n=this._func[s]="function"==typeof e[s],h[s]=n?e[s.indexOf("set")||"function"!=typeof e["get"+s.substr(3)]?s:"get"+s.substr(3)]():parseFloat(e[s]),r||h[s]!==l[0][s]&&(r=h);if(this._beziers="cubic"!==t.type&&"quadratic"!==t.type&&"soft"!==t.type?M(l,isNaN(t.curviness)?1:t.curviness,!1,"thruBasic"===t.type,t.correlate,r):function(e,t,i){var s,n,a,o,r,l,h,d,c,u,p,m={},g="cubic"===(t=t||"soft")?3:2,_="soft"===t,f=[];if(_&&i&&(e=[i].concat(e)),null==e||e.length<g+1)throw"invalid Bezier data";for(c in e[0])f.push(c);for(l=f.length;--l>-1;){for(m[c=f[l]]=r=[],u=0,d=e.length,h=0;h<d;h++)s=null==i?e[h][c]:"string"==typeof(p=e[h][c])&&"="===p.charAt(1)?i[c]+Number(p.charAt(0)+p.substr(2)):Number(p),_&&h>1&&h<d-1&&(r[u++]=(s+r[u-2])/2),r[u++]=s;for(d=u-g+1,u=0,h=0;h<d;h+=g)s=r[h],n=r[h+1],a=r[h+2],o=2===g?0:r[h+3],r[u++]=p=3===g?new b(s,n,a,o):new b(s,(2*n+s)/3,(2*n+a)/3,a);r.length=u}return m}(l,t.type,h),this._segCount=this._beziers[s].length,this._timeRes){var u=function(e,t){var i,s,n,a,o=[],r=[],l=0,h=0,d=(t=t>>0||6)-1,c=[],u=[];for(i in e)I(e[i],o,t);for(n=o.length,s=0;s<n;s++)l+=Math.sqrt(o[s]),u[a=s%t]=l,a===d&&(h+=l,c[a=s/t>>0]=u,r[a]=h,l=0,u=[]);return{length:h,lengths:r,segments:c}}(this._beziers,this._timeRes);this._length=u.length,this._lengths=u.lengths,this._segments=u.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(c=this._autoRotate)for(this._initialRotations=[],c[0]instanceof Array||(this._autoRotate=c=[c]),a=c.length;--a>-1;){for(o=0;o<3;o++)s=c[a][o],this._func[s]="function"==typeof e[s]&&e[s.indexOf("set")||"function"!=typeof e["get"+s.substr(3)]?s:"get"+s.substr(3)];s=c[a][2],this._initialRotations[a]=(this._func[s]?this._func[s].call(this._target):this._target[s])||0,this._overwriteProps.push(s)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(e){var t,i,s,n,a,o,r,l,h,d,c,u=this._segCount,p=this._func,g=this._target,_=e!==this._startRatio;if(this._timeRes){if(h=this._lengths,d=this._curSeg,c=e*this._length,s=this._li,c>this._l2&&s<u-1){for(l=u-1;s<l&&(this._l2=h[++s])<=c;);this._l1=h[s-1],this._li=s,this._curSeg=d=this._segments[s],this._s2=d[this._s1=this._si=0]}else if(c<this._l1&&s>0){for(;s>0&&(this._l1=h[--s])>=c;);0===s&&c<this._l1?this._l1=0:s++,this._l2=h[s],this._li=s,this._curSeg=d=this._segments[s],this._s1=d[(this._si=d.length-1)-1]||0,this._s2=d[this._si]}if(t=s,c-=this._l1,s=this._si,c>this._s2&&s<d.length-1){for(l=d.length-1;s<l&&(this._s2=d[++s])<=c;);this._s1=d[s-1],this._si=s}else if(c<this._s1&&s>0){for(;s>0&&(this._s1=d[--s])>=c;);0===s&&c<this._s1?this._s1=0:s++,this._s2=d[s],this._si=s}o=1===e?1:(s+(c-this._s1)/(this._s2-this._s1))*this._prec||0}else o=(e-(t=e<0?0:e>=1?u-1:u*e>>0)*(1/u))*u;for(i=1-o,s=this._props.length;--s>-1;)n=this._props[s],r=(o*o*(a=this._beziers[n][t]).da+3*i*(o*a.ca+i*a.ba))*o+a.a,this._mod[n]&&(r=this._mod[n](r,g)),p[n]?g[n](r):g[n]=r;if(this._autoRotate){var f,v,y,b,w,x,C,M=this._autoRotate;for(s=M.length;--s>-1;)n=M[s][2],x=M[s][3]||0,C=!0===M[s][4]?1:m,a=this._beziers[M[s][0]],f=this._beziers[M[s][1]],a&&f&&(a=a[t],f=f[t],v=a.a+(a.b-a.a)*o,v+=((b=a.b+(a.c-a.b)*o)-v)*o,b+=(a.c+(a.d-a.c)*o-b)*o,y=f.a+(f.b-f.a)*o,y+=((w=f.b+(f.c-f.b)*o)-y)*o,w+=(f.c+(f.d-f.c)*o-w)*o,r=_?Math.atan2(w-y,b-v)*C+x:this._initialRotations[s],this._mod[n]&&(r=this._mod[n](r,g)),p[n]?g[n](r):g[n]=r)}}}),P=T.prototype;T.bezierThrough=M,T.cubicToQuadratic=w,T._autoCSS=!0,T.quadraticToCubic=function(e,t,i){return new b(e,(2*t+e)/3,(2*t+i)/3,i)},T._cssRegister=function(){var e=y.CSSPlugin;if(e){var t=e._internals,i=t._parseToProxy,s=t._setPluginRatio,n=t.CSSPropTween;t._registerComplexSpecialProp("bezier",{parser:function(e,t,a,o,r,l){t instanceof Array&&(t={values:t}),l=new T;var h,d,c,u=t.values,p=u.length-1,m=[],g={};if(p<0)return r;for(h=0;h<=p;h++)c=i(e,u[h],o,r,l,p!==h),m[h]=c.end;for(d in t)g[d]=t[d];return g.values=m,(r=new n(e,"bezier",0,0,c.pt,2)).data=c,r.plugin=l,r.setRatio=s,0===g.autoRotate&&(g.autoRotate=!0),!g.autoRotate||g.autoRotate instanceof Array||(h=!0===g.autoRotate?0:Number(g.autoRotate),g.autoRotate=null!=c.end.left?[["left","top","rotation",h,!1]]:null!=c.end.x&&[["x","y","rotation",h,!1]]),g.autoRotate&&(o._transform||o._enableTransforms(!1),c.autoRotate=o._target._gsTransform,c.proxy.rotation=c.autoRotate.rotation||0,o._overwriteProps.push("rotation")),l._onInitTween(c.proxy,g,o._tween),r}})}},P._mod=function(e){for(var t,i=this._overwriteProps,s=i.length;--s>-1;)(t=e[i[s]])&&"function"==typeof t&&(this._mod[i[s]]=t)},P._kill=function(e){var t,i,s=this._props;for(t in this._beziers)if(t in e)for(delete this._beziers[t],delete this._func[t],i=s.length;--i>-1;)s[i]===t&&s.splice(i,1);if(s=this._autoRotate)for(i=s.length;--i>-1;)e[s[i][2]]&&s.splice(i,1);return this._super._kill.call(this,e)},s.ML._gsDefine("easing.Back",["easing.Ease"],(function(){var e,t,i,n,a=s.ML.GreenSockGlobals||s.ML,o=a.com.greensock,r=2*Math.PI,l=Math.PI/2,h=o._class,d=function(e,t){var i=h("easing."+e,(function(){}),!0),n=i.prototype=new s.SX;return n.constructor=i,n.getRatio=t,i},c=s.SX.register||function(){},u=function(e,t,i,s,n){var a=h("easing."+e,{easeOut:new t,easeIn:new i,easeInOut:new s},!0);return c(a,e),a},p=function(e,t,i){this.t=e,this.v=t,i&&(this.next=i,i.prev=this,this.c=i.v-t,this.gap=i.t-e)},m=function(e,t){var i=h("easing."+e,(function(e){this._p1=e||0===e?e:1.70158,this._p2=1.525*this._p1}),!0),n=i.prototype=new s.SX;return n.constructor=i,n.getRatio=t,n.config=function(e){return new i(e)},i},g=u("Back",m("BackOut",(function(e){return(e-=1)*e*((this._p1+1)*e+this._p1)+1})),m("BackIn",(function(e){return e*e*((this._p1+1)*e-this._p1)})),m("BackInOut",(function(e){return(e*=2)<1?.5*e*e*((this._p2+1)*e-this._p2):.5*((e-=2)*e*((this._p2+1)*e+this._p2)+2)}))),_=h("easing.SlowMo",(function(e,t,i){t=t||0===t?t:.7,null==e?e=.7:e>1&&(e=1),this._p=1!==e?t:0,this._p1=(1-e)/2,this._p2=e,this._p3=this._p1+this._p2,this._calcEnd=!0===i}),!0),f=_.prototype=new s.SX;return f.constructor=_,f.getRatio=function(e){var t=e+(.5-e)*this._p;return e<this._p1?this._calcEnd?1-(e=1-e/this._p1)*e:t-(e=1-e/this._p1)*e*e*e*t:e>this._p3?this._calcEnd?1===e?0:1-(e=(e-this._p3)/this._p1)*e:t+(e-t)*(e=(e-this._p3)/this._p1)*e*e*e:this._calcEnd?1:t},_.ease=new _(.7,.7),f.config=_.config=function(e,t,i){return new _(e,t,i)},(f=(e=h("easing.SteppedEase",(function(e,t){e=e||1,this._p1=1/e,this._p2=e+(t?0:1),this._p3=t?1:0}),!0)).prototype=new s.SX).constructor=e,f.getRatio=function(e){return e<0?e=0:e>=1&&(e=.999999999),((this._p2*e|0)+this._p3)*this._p1},f.config=e.config=function(t,i){return new e(t,i)},(f=(t=h("easing.ExpoScaleEase",(function(e,t,i){this._p1=Math.log(t/e),this._p2=t-e,this._p3=e,this._ease=i}),!0)).prototype=new s.SX).constructor=t,f.getRatio=function(e){return this._ease&&(e=this._ease.getRatio(e)),(this._p3*Math.exp(this._p1*e)-this._p3)/this._p2},f.config=t.config=function(e,i,s){return new t(e,i,s)},(f=(i=h("easing.RoughEase",(function(e){for(var t,i,n,a,o,r,l=(e=e||{}).taper||"none",h=[],d=0,c=0|(e.points||20),u=c,m=!1!==e.randomize,g=!0===e.clamp,_=e.template instanceof s.SX?e.template:null,f="number"==typeof e.strength?.4*e.strength:.4;--u>-1;)t=m?Math.random():1/c*u,i=_?_.getRatio(t):t,n="none"===l?f:"out"===l?(a=1-t)*a*f:"in"===l?t*t*f:t<.5?(a=2*t)*a*.5*f:(a=2*(1-t))*a*.5*f,m?i+=Math.random()*n-.5*n:u%2?i+=.5*n:i-=.5*n,g&&(i>1?i=1:i<0&&(i=0)),h[d++]={x:t,y:i};for(h.sort((function(e,t){return e.x-t.x})),r=new p(1,1,null),u=c;--u>-1;)o=h[u],r=new p(o.x,o.y,r);this._prev=new p(0,0,0!==r.t?r:r.next)}),!0)).prototype=new s.SX).constructor=i,f.getRatio=function(e){var t=this._prev;if(e>t.t){for(;t.next&&e>=t.t;)t=t.next;t=t.prev}else for(;t.prev&&e<=t.t;)t=t.prev;return this._prev=t,t.v+(e-t.t)/t.gap*t.c},f.config=function(e){return new i(e)},i.ease=new i,u("Bounce",d("BounceOut",(function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375})),d("BounceIn",(function(e){return(e=1-e)<1/2.75?1-7.5625*e*e:e<2/2.75?1-(7.5625*(e-=1.5/2.75)*e+.75):e<2.5/2.75?1-(7.5625*(e-=2.25/2.75)*e+.9375):1-(7.5625*(e-=2.625/2.75)*e+.984375)})),d("BounceInOut",(function(e){var t=e<.5;return(e=t?1-2*e:2*e-1)<1/2.75?e*=7.5625*e:e=e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375,t?.5*(1-e):.5*e+.5}))),u("Circ",d("CircOut",(function(e){return Math.sqrt(1-(e-=1)*e)})),d("CircIn",(function(e){return-(Math.sqrt(1-e*e)-1)})),d("CircInOut",(function(e){return(e*=2)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)}))),n=function(e,t,i){var n=h("easing."+e,(function(e,t){this._p1=e>=1?e:1,this._p2=(t||i)/(e<1?e:1),this._p3=this._p2/r*(Math.asin(1/this._p1)||0),this._p2=r/this._p2}),!0),a=n.prototype=new s.SX;return a.constructor=n,a.getRatio=t,a.config=function(e,t){return new n(e,t)},n},u("Elastic",n("ElasticOut",(function(e){return this._p1*Math.pow(2,-10*e)*Math.sin((e-this._p3)*this._p2)+1}),.3),n("ElasticIn",(function(e){return-this._p1*Math.pow(2,10*(e-=1))*Math.sin((e-this._p3)*this._p2)}),.3),n("ElasticInOut",(function(e){return(e*=2)<1?this._p1*Math.pow(2,10*(e-=1))*Math.sin((e-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(e-=1))*Math.sin((e-this._p3)*this._p2)*.5+1}),.45)),u("Expo",d("ExpoOut",(function(e){return 1-Math.pow(2,-10*e)})),d("ExpoIn",(function(e){return Math.pow(2,10*(e-1))-.001})),d("ExpoInOut",(function(e){return(e*=2)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*(e-1)))}))),u("Sine",d("SineOut",(function(e){return Math.sin(e*l)})),d("SineIn",(function(e){return 1-Math.cos(e*l)})),d("SineInOut",(function(e){return-.5*(Math.cos(Math.PI*e)-1)}))),h("easing.EaseLookup",{find:function(e){return s.SX.map[e]}},!0),c(a.SlowMo,"SlowMo","ease,"),c(i,"RoughEase","ease,"),c(e,"SteppedEase","ease,"),g}),!0);var E=s.li.Back,k=s.li.Elastic,L=s.li.Bounce,A=s.li.RoughEase,S=s.li.SlowMo,D=s.li.SteppedEase,R=s.li.Circ,N=s.li.Expo,B=s.li.Sine,O=s.li.ExpoScaleEase,F=o;F._autoActivated=[n,a,r,l,T,h,p,E,k,L,A,S,D,R,N,B,O]}},t={};function i(s){var n=t[s];if(void 0!==n)return n.exports;var a=t[s]={id:s,loaded:!1,exports:{}};return e[s](a,a.exports,i),a.loaded=!0,a.exports}i.d=(e,t)=>{for(var s in t)i.o(t,s)&&!i.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i(2112)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,